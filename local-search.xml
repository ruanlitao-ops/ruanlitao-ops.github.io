<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo 博客搭建</title>
    <link href="/2021/09/14/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/09/14/Hexo-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、相关链接"><a href="#一、相关链接" class="headerlink" title="一、相关链接"></a>一、相关链接</h2><p><a href="https://hexo.io/zh-cn/docs/">Hexo 官方文档</a></p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid 主题 GitHub 地址</a></p><p><a href="https://hexo.fluid-dev.com/docs/">Fluid 主题官方文档</a></p><p><a href="https://hexo.fluid-dev.com/docs/">Fluid 主题官方使用博客</a></p><h2 id="二、Hexo-的安装"><a href="#二、Hexo-的安装" class="headerlink" title="二、Hexo 的安装"></a>二、Hexo 的安装</h2><h3 id="Hexo-简介"><a href="#Hexo-简介" class="headerlink" title="Hexo 简介"></a>Hexo 简介</h3><p>Hexo是一款基于 Node.js 的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在 GitHub 和 Coding上，是搭建博客的首选框架。大家可以进入 <a href="https://hexo.io/zh-cn/">hexo官网</a> 进行详细查看，因为 Hexo 的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>安装 Hexo 首先需要我们电脑上存在的环境</p><ol><li><p>Git（<a href="https://blog.csdn.net/mukes/article/details/115693833?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163158371516780274179020%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163158371516780274179020&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-115693833.pc_search_ecpm_flag&utm_term=git%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">安装教程</a>）</p></li><li><p>Node.js（<a href="https://blog.csdn.net/weixin_42881768/article/details/105028164?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163158307016780269826239%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163158307016780269826239&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-105028164.pc_search_ecpm_flag&utm_term=nodejs%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE&spm=1018.2226.3001.4187">安装教程</a>）</p></li><li><p>GitHub 账号（<a href="https://github.com/">GitHub官网</a>)</p></li></ol><p>我的环境版本</p><p>git</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210910/image.247io4gwjrcw.png" alt="image"></p><p>node.js + npm</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210914/image.ge0g1j1g75s.png" alt="image"></p><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p>1、通过 npm 下载 hexo-cli（记得使用管理员方式开始 cmd）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>下载完成后可以使用命令 <code>hexo -v</code> 查看 hexo 版本</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210914/image.1pl14xkr7hz4.png" alt="image"></p><p>2、通过 hexo-cli 初始化博客目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init myblog<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210914/image.5adwcf04y5k0.png" alt="image"></p><p>进入目录 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd myblog<br></code></pre></td></tr></table></figure><p>npm 安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210914/image-20210914130221310.5py99830ks00.png" alt="image-20210914130221310"></p><p>3、查看目录结构</p><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件（很重要）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210914/image.6vqhp97nt9g0.png" alt="image"></p><p>4、启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo generate # 可简写为 hexo g<br>hexo server # 可简写为 hexo s<br></code></pre></td></tr></table></figure><p>此时可以在 <a href="http://localhost:4000/">http://localhost:4000</a> 中访问到我们的博客</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210914/image.4hcb4qglkjs0.png" alt="image"></p><p>5、新建博客</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><p>其中，layout 表示布局方式，Hexo 有三种默认布局：<strong>post</strong>、<strong>page</strong> 和 <strong>draft</strong>。在创建这三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210914/image.345mpsy1ck80.png" alt="image"></p><p>现在来新建一个文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new post &quot;myblog&quot;<br></code></pre></td></tr></table></figure><p>此时会生成文件 <code>D:\Desktop\myblog\source\_posts\myblog.md</code>，编辑 myblog.md 文件</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210914/image.3opaj8j8mri0.png" alt="image"></p><p>6、在本地发布博客</p><p>依次执行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure><p>此时就可以看到这篇博客出现在了我们的首页</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210914/image.586fro6pblc0.png" alt="image"></p><h2 id="三、Fluid-主题的安装和配置"><a href="#三、Fluid-主题的安装和配置" class="headerlink" title="三、Fluid 主题的安装和配置"></a>三、Fluid 主题的安装和配置</h2><h3 id="主题介绍"><a href="#主题介绍" class="headerlink" title="主题介绍"></a>主题介绍</h3><p>Fluid 是基于 Hexo 的一款 Material Design 风格的主题，由 <a href="https://github.com/fluid-dev">Fluid-dev (opens new window)</a>负责开发与维护。</p><p>主题 GitHub: <a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid(opens new window)</a></p><p>预览网站：<a href="https://hexo.fluid-dev.com/">Fluid’s blog (opens new window)</a>  、<a href="https://zkqiang.cn/">zkqiang’s blog</a></p><h3 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将博客目录下的 <code>config.yml</code> 内容复制过去。</p><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后修改 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2020-02-23 19:20:33</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里写关于页的正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure><h3 id="主题自定义配置"><a href="#主题自定义配置" class="headerlink" title="主题自定义配置"></a>主题自定义配置</h3><p>以下是我在 <code>_config.fluid.yml</code> 文件中的主题配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Hexo Configuration</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="hljs-comment">## Source: https://github.com/hexojs/hexo/</span><br><br><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">叶尘的技术升级小木屋</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;叶尘的技术升级小木屋&#x27;</span><br><span class="hljs-attr">keywords:</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">叶尘</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br><br><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">http://example.com</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span><br><span class="hljs-attr">permalink_defaults:</span><br><span class="hljs-attr">pretty_urls:</span><br>  <span class="hljs-attr">trailing_index:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span><br>  <span class="hljs-attr">trailing_html:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span><br><br><span class="hljs-comment"># Directory</span><br><span class="hljs-attr">source_dir:</span> <span class="hljs-string">source</span><br><span class="hljs-attr">public_dir:</span> <span class="hljs-string">public</span><br><span class="hljs-attr">tag_dir:</span> <span class="hljs-string">tags</span><br><span class="hljs-attr">archive_dir:</span> <span class="hljs-string">archives</span><br><span class="hljs-attr">category_dir:</span> <span class="hljs-string">categories</span><br><span class="hljs-attr">code_dir:</span> <span class="hljs-string">downloads/code</span><br><span class="hljs-attr">i18n_dir:</span> <span class="hljs-string">:lang</span><br><span class="hljs-attr">skip_render:</span><br><br><span class="hljs-comment"># Writing</span><br><span class="hljs-attr">new_post_name:</span> <span class="hljs-string">:title.md</span> <span class="hljs-comment"># File name of new posts</span><br><span class="hljs-attr">default_layout:</span> <span class="hljs-string">post</span><br><span class="hljs-attr">titlecase:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># Transform title into titlecase</span><br><span class="hljs-attr">external_link:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># Open external links in new tab</span><br>  <span class="hljs-attr">field:</span> <span class="hljs-string">site</span> <span class="hljs-comment"># Apply to the whole site</span><br>  <span class="hljs-attr">exclude:</span> <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-attr">filename_case:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">render_drafts:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">relative_link:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">future:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">wrap:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">hljs:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">prismjs:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tab_replace:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># Home page setting</span><br><span class="hljs-comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span><br><span class="hljs-comment"># per_page: Posts displayed per page. (0 = disable pagination)</span><br><span class="hljs-comment"># order_by: Posts order. (Order by date descending by default)</span><br><span class="hljs-attr">index_generator:</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">order_by:</span> <span class="hljs-string">-date</span><br><br><span class="hljs-comment"># Category &amp; Tag</span><br><span class="hljs-attr">default_category:</span> <span class="hljs-string">uncategorized</span><br><span class="hljs-attr">category_map:</span><br><span class="hljs-attr">tag_map:</span><br><br><span class="hljs-comment"># Metadata elements</span><br><span class="hljs-comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span><br><span class="hljs-attr">meta_generator:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># Date / Time format</span><br><span class="hljs-comment">## Hexo uses Moment.js to parse and display date</span><br><span class="hljs-comment">## You can customize the date format as defined in</span><br><span class="hljs-comment">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="hljs-attr">date_format:</span> <span class="hljs-string">YYYY-MM-DD</span><br><span class="hljs-attr">time_format:</span> <span class="hljs-string">HH:mm:ss</span><br><span class="hljs-comment">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span><br><span class="hljs-attr">updated_option:</span> <span class="hljs-string">&#x27;mtime&#x27;</span><br><br><span class="hljs-comment"># Pagination</span><br><span class="hljs-comment">## Set per_page to 0 to disable pagination</span><br><span class="hljs-attr">per_page:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">pagination_dir:</span> <span class="hljs-string">page</span><br><br><span class="hljs-comment"># Include / Exclude file(s)</span><br><span class="hljs-comment">## include:/exclude: options only apply to the &#x27;source/&#x27; folder</span><br><span class="hljs-attr">include:</span><br><span class="hljs-attr">exclude:</span><br><span class="hljs-attr">ignore:</span><br><br><span class="hljs-comment"># Extensions</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">landscape</span><br><br><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># 博客标题 和 导航菜单</span><br><span class="hljs-attr">navbar:</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">YECHEN-OPS</span><br>  <span class="hljs-attr">menu:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;home&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-home-fill&#x27;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;分类&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;/categories/&#x27;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-qrcode&#x27;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;tag&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;/tags/&#x27;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-tags-fill&#x27;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;about&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;/about/&#x27;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-user-fill&#x27;</span>, <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;关于&#x27;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123;<br>      <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;文档&#x27;</span>,<br>      <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-books&#x27;</span>,<br>      <span class="hljs-attr">submenu:</span> [<br>        &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;主题博客&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;配置指南&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/docs/guide/&#x27;</span> &#125;,<br>        &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&#x27;图标用法&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://hexo.fluid-dev.com/docs/icon/&#x27;</span> &#125;<br>      ]<br>    &#125;<br>    <br><span class="hljs-comment"># 懒加载    </span><br><span class="hljs-attr">lazyload:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">loading_img:</span> <span class="hljs-string">/img/loading.gif</span><br>  <span class="hljs-attr">onlypost:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">offset_factor:</span> <span class="hljs-number">2</span><br><br><span class="hljs-attr">font:</span>  <span class="hljs-comment"># 主题字体配置</span><br>  <span class="hljs-attr">font_size:</span> <span class="hljs-string">16px</span>        <span class="hljs-comment"># 全局字号</span><br>  <span class="hljs-attr">font_family:</span> <span class="hljs-string">JetBrains</span> <span class="hljs-string">Mono</span>          <span class="hljs-comment"># 全局字体族</span><br>  <span class="hljs-attr">code_font_size:</span> <span class="hljs-number">85</span><span class="hljs-string">%</span>    <span class="hljs-comment"># 代码的字号  </span><br>  <br><span class="hljs-comment"># 展示 PV 与 UV 统计  </span><br><span class="hljs-attr">footer:</span><br>  <span class="hljs-attr">statistics:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span>  <span class="hljs-comment"># 可选 leancloud | busuanzi  根据自己需求选择</span><br>    <span class="hljs-attr">pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span>  <span class="hljs-comment"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br>    <span class="hljs-attr">uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span>  <br><br><span class="hljs-comment"># 首页设置</span><br><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">slogan:</span> <span class="hljs-comment"># 首页打字机</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">text:</span> <span class="hljs-string">欢迎来到叶尘的技术升级小木屋</span>   <br>  <span class="hljs-attr">post_url_target:</span> <span class="hljs-string">_blank</span>  <span class="hljs-comment"># 文章跳转方式，_blank：新标签页打开，_self：当前标签页打开</span><br>  <span class="hljs-attr">post_meta:</span> <span class="hljs-comment"># 文章信息，可配置隐藏包括发布时间、分类、标签。</span><br>    <span class="hljs-attr">date:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">category:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">tag:</span> <span class="hljs-literal">true</span><br>    <br><span class="hljs-comment"># 日期/字数/阅读时长/阅读数    </span><br><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">meta:</span><br>    <span class="hljs-attr">author:</span>  <span class="hljs-comment"># 作者，优先根据 front-matter 里 author 字段，其次是 hexo 配置中 author 值</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">date:</span>  <span class="hljs-comment"># 文章日期，优先根据 front-matter 里 date 字段，其次是 md 文件日期</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;dddd, MMMM Do YYYY, h:mm a&quot;</span>  <span class="hljs-comment"># 格式参照 ISO-8601 日期格式化</span><br>    <span class="hljs-attr">wordcount:</span>  <span class="hljs-comment"># 字数统计</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 字&quot;</span>  <span class="hljs-comment"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br>    <span class="hljs-attr">min2read:</span>  <span class="hljs-comment"># 阅读时间</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 分钟&quot;</span><br>    <span class="hljs-attr">views:</span>  <span class="hljs-comment"># 阅读次数</span><br>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;leancloud&quot;</span>  <span class="hljs-comment"># 统计数据来源，可选：leancloud | busuanzi   注意不蒜子会间歇抽风</span><br>      <span class="hljs-attr">format:</span> <span class="hljs-string">&quot;&#123;&#125; 次&quot;</span>    <br>      <br><span class="hljs-comment"># 代码块  </span><br><span class="hljs-attr">code:</span><br>  <span class="hljs-attr">copy_btn:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">highlight:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">lib:</span> <span class="hljs-string">&quot;highlightjs&quot;</span><br>    <span class="hljs-attr">highlightjs:</span><br>      <span class="hljs-attr">style:</span> <span class="hljs-string">&#x27;Github Gist&#x27;</span><br>      <span class="hljs-attr">bg_color:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">prismjs:</span><br>      <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;default&quot;</span><br>      <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span>  <br></code></pre></td></tr></table></figure><p>更多配置可以参考<a href="https://hexo.fluid-dev.com/docs/guide/#%E5%85%A8%E5%B1%80">官方文档</a></p><h2 id="四、使用-GitHub-发布个人博客"><a href="#四、使用-GitHub-发布个人博客" class="headerlink" title="四、使用 GitHub 发布个人博客"></a>四、使用 GitHub 发布个人博客</h2><p><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">参考博客</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>22、注解（Annotation）</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E6%B3%A8%E8%A7%A3%EF%BC%88Annotation%EF%BC%89/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E6%B3%A8%E8%A7%A3%EF%BC%88Annotation%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="22-1-注解概述"><a href="#22-1-注解概述" class="headerlink" title="22.1 注解概述"></a>22.1 注解概述</h3><p>注解，或者叫做注释类型，英文单词是：Annotation</p><p>注解Annotation是一种引用数据类型。编译之后也是生成xxx.class文件。</p><p><strong>怎么自定义注解呢？语法格式？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符列表] <span class="hljs-meta">@interface</span> 注解类型名&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注解怎么使用，用在什么地方？</strong></p><ul><li><p>注解使用时的语法格式是：**@注解类型名**</p></li><li><p>注解可以出现在<strong>类上、属性上、方法上、变量上</strong>等….注解还可以出现在<strong>注解类型</strong>上。</p></li></ul><p><strong>java.lang包下的注释类型：</strong></p><p><code>Deprecated</code>：用 @Deprecated 注释的程序元素，不鼓励程序员使用这样的元素，通常是因为它很危险或存在更好的选择。 </p><p><code>Override</code> ：表示一个方法声明打算重写超类中的另一个方法声明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 标识性注解，给编译器做参考的。</span><br><span class="hljs-comment">// 编译器看到方法上有这个注解的时候，编译器会自动检查该方法是否重写了父类的方法。如果没有重写，报错。</span><br><span class="hljs-comment">// 这个注解只是在编译阶段起作用，和运行期无关！</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Override &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>元注解：</strong>用来标注“注解类型”的“注解”，称为元注解。</p><p><code>Target</code>：这是一个元注解，这个Target注解用来<strong>标注“被标注的注解”</strong>可以出现在<strong>哪些位置</strong>上。</p><ul><li><p><code>@Target(ElementType.METHOD)</code>：表示“被标注的注解”只能出现在方法上。</p></li><li><p><code>@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, MODULE, PARAMETER, TYPE&#125;)</code></p><p>表示该注解可以出现在：构造方法上、字段上、局部变量上、方法上、…、类上…。</p></li></ul><p><code>Retention</code>：这是一个元注解，这个Retention注解用来<strong>标注“被标注的注解”最终保存在哪里</strong>。</p><ul><li><p><code>@Retention(RetentionPolicy.SOURCE)</code>：表示该注解只被保留在<strong>java源文件</strong>中。</p></li><li><p><code>@Retention(RetentionPolicy.CLASS)</code>：表示该注解被保存在<strong>class文件</strong>中。</p></li><li><p><code>@Retention(RetentionPolicy.RUNTIME)</code>：表示该注解被保存在class文件中，并且<strong>可以被反射机制所读取</strong>。</p></li></ul><h3 id="22-2-注解的使用"><a href="#22-2-注解的使用" class="headerlink" title="22.2 注解的使用"></a>22.2 注解的使用</h3><p><strong>自定义注解：</strong></p><ul><li>注解当中的属性可以是哪一种类型？<ul><li><code>byte</code> <code>short</code> <code>int</code> <code>long</code> <code>float</code> <code>double</code> <code>boolean</code> <code>char</code> <code>String</code> <code>Class</code> <code>枚举类型</code>以及以上每一种的<strong>数组</strong>形式。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotation01 &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 我们通常在注解当中可以定义属性，以下这个是MyAnnotation的name属性。</span><br><span class="hljs-comment">     * 看着像1个方法，但实际上我们称之为属性name。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">String <span class="hljs-title">name</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    颜色属性</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">String <span class="hljs-title">color</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    年龄属性</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">age</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> 25</span>; <span class="hljs-comment">//属性指定默认值</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotation02 &#123;<br>    <br>    <span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>使用注解：</strong></p><ul><li>如果一个注解当中有属性，那么必须给属性赋值。（<strong>除非该属性使用default指定了默认值</strong>。）</li><li>格式为：<code>@MyAnnotation(属性名=属性值,属性名=属性值,属性名=属性值...)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MyAnnotation01(name = &quot;abc&quot;, color = &quot;红色&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 如果一个注解的属性的名字是value，并且只有一个属性的话，在使用的时候，该属性名可以省略。</span><br><span class="hljs-meta">@MyAnnotation02(“value”)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>通过反射机制获取类中方法的注解：（同样的方式也可以获得类上、属性上的注解）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class&lt;?&gt; myClass = Class.forName(<span class="hljs-string">&quot;cn.yechen.MyClass&quot;</span>);<br>            Method doSomeMethon = myClass.getDeclaredMethod(<span class="hljs-string">&quot;doSome&quot;</span>);<br>            <span class="hljs-keyword">if</span> (doSomeMethon.isAnnotationPresent(MyAnnotation.class)) &#123;<br>                MyAnnotation annotation = doSomeMethon.getAnnotation(MyAnnotation.class);<br>                System.out.println(annotation.username());<br>                System.out.println(annotation.passworld());<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException | NoSuchMethodException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> </span>&#123;<br>    <span class="hljs-meta">@MyAnnotation(username = &quot;root&quot;, passworld = &quot;122456&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@interface</span> MyAnnotation &#123;<br>    <span class="hljs-function">String <span class="hljs-title">username</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function">String <span class="hljs-title">passworld</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="22-3-使用注解实现一个业务要求，体会注解的作用"><a href="#22-3-使用注解实现一个业务要求，体会注解的作用" class="headerlink" title="22.3 使用注解实现一个业务要求，体会注解的作用"></a>22.3 使用注解实现一个业务要求，体会注解的作用</h3><p>业务要求：通过一个注解来判断一个类中是否有 <code>id</code> 属性，如果有就正常执行，没有就抛出异常。</p><ol><li>定义注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><span class="hljs-comment">// 该注解执行注解在类上</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-comment">//给注解可以被反射机制读取到</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MustHasIdPropertyAnnotation &#123;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>定义一个异常类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HasNotIdPropertyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HasNotIdPropertyException</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HasNotIdPropertyException</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>定义一个（被注解）被检查的类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MustHasIdPropertyAnnotation</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> id;<br>    String name;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class&lt;?&gt; userClass = Class.forName(<span class="hljs-string">&quot;cn.yechen.annotation.User&quot;</span>);<br>            <span class="hljs-keyword">boolean</span> isOK = <span class="hljs-keyword">false</span>;<span class="hljs-comment">// 是否合法的标记</span><br>            <span class="hljs-keyword">if</span> (userClass.isAnnotationPresent(MustHasIdPropertyAnnotation.class)) &#123;<br>                <span class="hljs-comment">// 获取 userClass 的全部属性，检查是否存在 int 类型的 id 属性</span><br>                Field[] declaredFields = userClass.getDeclaredFields();<br>                <span class="hljs-keyword">for</span> (Field field : declaredFields) &#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;id&quot;</span>.equals(field.getName()) &amp;&amp; <span class="hljs-string">&quot;int&quot;</span>.equals(field.getType().getSimpleName())) &#123;<br>                        <span class="hljs-comment">// 合法</span><br>                        isOK = <span class="hljs-keyword">true</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-keyword">if</span> (isOK) &#123;<br>                System.out.println(<span class="hljs-string">&quot;该类中存在 int 类型的 id 属性！&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 不合法就抛出异常</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> HasNotIdPropertyException(<span class="hljs-string">&quot;该类中一定要有一个 int 类型的 id 属性！&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当 User 类中存在 int 类型的 id 属性时，就会输出<code>该类中存在 int 类型的 id 属性！</code></p><p>当 User 类中不存在 int 类型的 id 属性时，就会输出异常信息。 </p>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>21、反射（Reflect）</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E5%8F%8D%E5%B0%84%EF%BC%88Reflect%EF%BC%89/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E5%8F%8D%E5%B0%84%EF%BC%88Reflect%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="21-1-反射的基本概念"><a href="#21-1-反射的基本概念" class="headerlink" title="21.1 反射的基本概念"></a>21.1 反射的基本概念</h3><p><strong>反射机制有什么用：</strong></p><ul><li>通过java语言中的反射机制可以<strong>操作字节码文件</strong>。</li><li>优点类似于黑客。（可以读和修改字节码文件。）</li><li>通过反射机制可以<strong>操作代码片段</strong>。（class文件。）</li></ul><p><strong>反射机制的相关类在哪个包下：</strong></p><ul><li><code>java.lang.reflect.*</code>;</li></ul><p><strong>反射机制相关的重要的类有哪些：</strong></p><ul><li><code>java.lang.Class</code>：代表整个字节码，代表一个类型，代表<strong>整个类</strong>。</li><li><code>java.lang.reflect.Method</code>：代表字节码中的方法字节码。代表<strong>类中的方法</strong>。</li><li><code>java.lang.reflect.Constructor</code>：代表字节码中的构造方法字节码。代表<strong>类中的构造方法</strong>。</li><li><code>java.lang.reflect.Field</code>：代表字节码中的属性字节码。代表类中的<strong>成员变量（静态变量+实例变量）</strong>。</li></ul><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.Class：<br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>        <br>        <span class="hljs-comment">// Field</span><br>        <span class="hljs-keyword">int</span> no;<br><br>        <span class="hljs-comment">// Constructor</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span></span>&#123;<br><br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br>            <span class="hljs-keyword">this</span>.no = no;<br>        &#125;<br><br>        <span class="hljs-comment">// Method</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> no)</span></span>&#123;<br>            <span class="hljs-keyword">this</span>.no = no;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNo</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">return</span> no;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="21-2-对-class-的反射"><a href="#21-2-对-class-的反射" class="headerlink" title="21.2 对 class 的反射"></a>21.2 对 class 的反射</h3><h4 id="21-2-1-获取-Class-的三种方式"><a href="#21-2-1-获取-Class-的三种方式" class="headerlink" title="21.2.1 获取 Class 的三种方式"></a>21.2.1 获取 Class 的三种方式</h4><p>第一种：<strong>Class c = Class.forName(“完整类名带包名”);</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Class c = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    c = Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>    e.printStackTrace();<br>&#125;<br>System.out.println(c);<span class="hljs-comment">// 输出：class java.lang.String</span><br></code></pre></td></tr></table></figure><p><strong>Class.forName() 方法的执行会进行类加载</strong>，</p><ul><li>所以当只想要执行类中的静态代码块，不想执行其他代码的时候，使用 Class.forName()  方法即可，这个方法的执行会导致类加载，类加载是静态代码块会执行 ，其他代码不执行即可，不需要获取字节码文件。 </li></ul><p>第二种：**Class c = 对象（引用）.getClass();**（java中任何一个对象都有一个方法：getClass()，获取当前对象的类型的 Class 对象）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// s 是一个引用指向 String 类型的对象</span><br>String s = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-comment">// c 代表 String.class 字节码文件，c 代表 String 类型。</span><br>Class c = s.getClass();<br>System.out.println(c);<span class="hljs-comment">// class java.lang.String</span><br></code></pre></td></tr></table></figure><p>第三种：**Class c = 任何类型.class;**（任何类型，包括基本数据类型，包括自定义的类，都有一个 class 属性）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Class c1 = Integer.class;<br>Class c2 = Date.class;<br>System.out.println(c1);<span class="hljs-comment">// class java.lang.Integer</span><br>System.out.println(c2);<span class="hljs-comment">// class java.util.Date</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Class c1 = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    c1 = Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>    e.printStackTrace();<br>&#125;<br>Class c2 = <span class="hljs-string">&quot;abc&quot;</span>.getClass();<br>System.out.println(c1 == c2);<span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><strong>c1 和 c2 两个变量中保存的内存地址是相同的，都执行方法区中的 String.class 字节码文件</strong></p><p><img src="https://img-blog.csdnimg.cn/20210226133802243.png" alt="001-字节码内存图"></p><h4 id="21-2-2-通过反射实例化对象"><a href="#21-2-2-通过反射实例化对象" class="headerlink" title="21.2.2 通过反射实例化对象"></a>21.2.2 通过反射实例化对象</h4><p><code>T    newInstance()</code> ： 创建由这个类对象表示的类的新实例。</p><p><strong>注意</strong>：newInstance()方法内部实际上调用了<strong>无参数构造方法</strong>，<strong>必须保证无参构造存在才可以</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>Class c = Class.forName(<span class="hljs-string">&quot;User&quot;</span>);<br>        <span class="hljs-comment">// 通过Class的newInstance()方法来实例化对象。</span><br>c.newInstance();<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;无参构造方法被调用！&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>通过反射来实例化对象的优点</strong></p><ul><li>java代码写一遍，再不改变java源代码的基础之上，<strong>可以做到不同对象的实例化</strong>。<br>非常之灵活。（<strong>符合OCP开闭原则：对扩展开放，对修改关闭。</strong>）</li></ul><p><strong>如：通过读取属性配置文件来实例化对象</strong>（可以通过修改配置文件来实例化不同的对象）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        <span class="hljs-comment">// 通过IO流读取classinfo.properties文件</span><br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-comment">// 创建字节输入</span><br>        FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src\\cn\\yechen\\student.properties&quot;</span>);<br>        <span class="hljs-comment">// 加载</span><br>        properties.load(fileInputStream);<br>        <span class="hljs-comment">// 关闭流</span><br>        fileInputStream.close();<br>        <span class="hljs-comment">// 通过 key 获取 value</span><br>        String className = properties.getProperty (<span class="hljs-string">&quot;className&quot;</span>);<br><br>        <span class="hljs-comment">// 动态获取 class</span><br>        Class c = Class.forName(className);<br>        <span class="hljs-comment">// 实例化对象</span><br>        Object o = c.newInstance();<br>        System.out.println(o);<span class="hljs-comment">// Fri Feb 26 14:23:25 CST 2021</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>properties 文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">className</span>=java.util.Date<br></code></pre></td></tr></table></figure><h4 id="21-2-3-Class-类中的方法"><a href="#21-2-3-Class-类中的方法" class="headerlink" title="21.2.3 Class 类中的方法"></a>21.2.3 Class 类中的方法</h4><ul><li><code>static Class&lt;?&gt; forName(String className)</code>：返回指定类名（className）的字节码文件（class文件）</li><li><code>String    getName()</code> ：获取完整类名</li><li><code>String    getSimpleName()</code>：获取简单类名</li><li><code>Field[] getFields()</code> ：以 Field 类型的数组返回当前类中的<strong>所有公共属性（public修饰的）</strong>封装成的 Field 对象</li><li><code>Field[] getDeclaredFields()</code> ：以 Field 类型的数组返回当前类中的<strong>所有属性</strong>封装成的 Field 对象</li><li><code>Field getDeclaredField(String name)</code> ：通过属性名 “name” 来获取属性对象。</li><li><code>Method[] getDeclaredMethods()</code> ：以数组的形式获得所有 方法对象。</li><li><code>Method    getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)</code> ：通过方法名 “name” 和 参数列表【0 - N个】获得方法对象。</li><li><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code>：以数组的形式获得所有 构造方法对象</li><li><code>Constructor&lt;T&gt;    getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</code>：通过 参数列表【0 - N个】获得构造方法对象。</li></ul><h3 id="21-3-获取文件的绝对路径（通用的）"><a href="#21-3-获取文件的绝对路径（通用的）" class="headerlink" title="21.3 获取文件的绝对路径（通用的）"></a>21.3 获取文件的绝对路径（通用的）</h3><p>之前可以在 IDEA 中使用相对路径来定位文件，但是当程序离开了 IDEA 环境，程序就不能执行了。</p><p>同时由于之后的项目会运行在不同的操作系统中，文件路径是不同是，所以直接写上绝对路径也是有局限性的。</p><p><strong>通过以下方式可以针对不同的系统动态获取去文件的绝对路径。</strong></p><p><strong>但有一个使用条件：文件需要在类路径（src目录是类路径的根路径）下。才能用这种方式。</strong></p><p>例如：<code>db.properties</code> 文件的路径为 <code>src/cn/yechen/db.properties</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String path = Thread.currentThread().getContextClassLoader()<br>    .getResource(<span class="hljs-string">&quot;cn/yechen/db.properties&quot;</span>).getPath();<br>System.out.println(path);<br><span class="hljs-comment">// 输出：/C:/Users/30117/Desktop/Demo/out/production/Demo/cn/yechen/db.properties</span><br></code></pre></td></tr></table></figure><p>其中：</p><p><code>Thread.currentThread()</code> ：返回当前<strong>线程对象</strong></p><p><code>getContextClassLoader()</code>： 是线程对象的方法，可以获取到当前线程的<strong>类加载器对象</strong>。</p><p><code>getResource()</code>：【获取资源】这是类加载器对象的方法，当前线程的类加载器默认从类的根路径下<strong>加载资源</strong>。</p><p><strong>作用举例：在 IO 流的使用中使路径更通用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String path = Thread.currentThread().getContextClassLoader()<br>    .getResource(<span class="hljs-string">&quot;cn/yechen/db.properties&quot;</span>).getPath();<br>FileReader fileReader = <span class="hljs-keyword">new</span> FileReader(path);<br></code></pre></td></tr></table></figure><p>还可以简化：直接以流的形式返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">InputStream inputStream = Thread.currentThread().getContextClassLoader()<br>    .getResourceAsStream(<span class="hljs-string">&quot;cn/yechen/db.properties&quot;</span>);<br></code></pre></td></tr></table></figure><p><code>Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;cn/yechen/db.properties&quot;);</code> 会返回一个 <code>InputStream</code></p><h3 id="21-4-资源绑定器（ResourceBundle）"><a href="#21-4-资源绑定器（ResourceBundle）" class="headerlink" title="21.4 资源绑定器（ResourceBundle）"></a>21.4 资源绑定器（ResourceBundle）</h3><p><strong>资源绑定器，只能绑定xxx.properties文件。并且这个文件必须在类路径下。文件扩展名也必须是properties</strong></p><p>并且在写路径的时候，<strong>路径后面的扩展名不能写</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">ResourceBundle resourceBundle = ResourceBundle.getBundle(<span class="hljs-string">&quot;cn/yechen/student&quot;</span>);<br>String className = resourceBundle.getString(<span class="hljs-string">&quot;className&quot;</span>);<br>System.out.println(className);<span class="hljs-comment">// 输出：java.util.Date</span><br></code></pre></td></tr></table></figure><p>properties 文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">className</span>=java.util.Date<br></code></pre></td></tr></table></figure><h3 id="21-5-JDK中自带的类加载器"><a href="#21-5-JDK中自带的类加载器" class="headerlink" title="21.5 JDK中自带的类加载器"></a>21.5 JDK中自带的类加载器</h3><p><strong>什么是类加载器？</strong></p><ul><li>专门负责加载类的命令/工具。（ClassLoader）</li></ul><p><strong>JDK中自带了3个类加载器：</strong></p><ul><li>==启动类加载器==（ rt.jar）</li><li>==扩展类加载器==（ext/*.jar）</li><li>==应用类加载器==（classpath）</li></ul><p><strong>类加载过程：</strong></p><p>例如代码：String string  = “abc”;</p><p>代码在开始执行之前，会将所需要类全部加载到 JVM 当中。通过类加载器加载，看到以上代码类加载器会找String.class文件，找到就加载，那么是怎么进行加载的呢？</p><ul><li><p><strong>首先通过“启动类加载器”加载</strong>。注意：启动类加载器专门加载：<code>D:\Environmental\JDK8.0\jre\lib\rt.jar</code> 下的 class 文件，这都是JDK最核心的类库。</p></li><li><p><strong>如果通过“启动类加载器”加载不到的时候，会通过”扩展类加载器”加载。</strong>注意：扩展类加载器专门加载：<code>D:\Environmental\JDK8.0\jre\lib\ext\*.jar</code> 中的 class 文件</p></li><li><p><strong>如果“扩展类加载器”没有加载到，那么会通过“应用类加载器”加载。</strong>注意：应用类加载器专门加载：classpath中的类。</p></li></ul><p><strong>双亲委派机制：</strong></p><p>java中为了保证类加载的安全，使用了双亲委派机制。</p><p><strong>优先从启动类加载器中加载</strong>，这个称为“父”，“父”无法加载到，</p><p><strong>再从扩展类加载器中加载</strong>，这个称为“母”。</p><p>双亲委派。如果都加载不到，<strong>才会考虑从应用类加载器中加载</strong>。直到加载到为止。</p><h3 id="21-6-通过反射机制访问对象的某个属性（Filed）"><a href="#21-6-通过反射机制访问对象的某个属性（Filed）" class="headerlink" title="21.6 通过反射机制访问对象的某个属性（Filed）"></a>21.6 通过反射机制访问对象的某个属性（Filed）</h3><p><strong>在反射中，一个类的每一个属性都会被封装成一个 Filed</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-comment">// Field翻译为字段，其实就是属性/成员</span><br>    <span class="hljs-comment">// 4个Field，分别采用了不同的访问控制权限修饰符</span><br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// Field对象</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> age; <span class="hljs-comment">// Field对象</span><br>    <span class="hljs-keyword">boolean</span> sex;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> no;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> MATH_PI = <span class="hljs-number">3.1415926</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="21-6-反射-Field"><a href="#21-6-反射-Field" class="headerlink" title="21.6 反射 Field"></a>21.6 反射 Field</h3><p><strong>在反射中，一个类的每一个属性都会被封装成一个 Field</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-comment">// Field翻译为字段，其实就是属性/成员</span><br>    <span class="hljs-comment">// 4个Field，分别采用了不同的访问控制权限修饰符</span><br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// Field对象</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> age; <span class="hljs-comment">// Field对象</span><br>    <span class="hljs-keyword">boolean</span> sex;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> no;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> MATH_PI = <span class="hljs-number">3.1415926</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Field对象的常用方法：</strong></p><ul><li><p><code>Object get(Object obj)</code> ：返回 obj 对象上的 当前属性（Field对象）的<strong>属性值</strong></p></li><li><p><code>void set(Object obj, Object value)</code>：给 obj 对象的当前属性（Field对象）赋值为 value</p></li><li><p><code>int getModifiers()</code> ：以整数形式返回当前属性（Field对象）的 Java 语言<strong>修饰符</strong>。这个返回值是不同修饰符组合的代号。</p><ul><li>可以通过 <code>Modifier</code> 类中的静态方法 <code>toString</code> 将 返回值转换成 字符串形式的修饰符。</li></ul></li><li><p><code>Class&lt;?&gt; getType()</code> ： 返回<strong>当前属性的类型</strong>，返回值类型是 Class，可以通过 Class 的 getSimpleName 方法获得类名（不带包名）</p></li><li><p><code>String getName()</code> ： 返回当前属性（Field对象）的<strong>属性名</strong>。</p></li><li><p><code>void setAccessible(boolean flag)</code> ：将这个反射对象的可访问标志设置为指定的布尔值。（<strong>设置为 true后可以给私有属性赋值和取值</strong>）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通过反射机制将 Student 类中的所有属性（包括修饰符列表、类型、属性名、属性值）获取到</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br>        Class c = Class.forName(<span class="hljs-string">&quot;cn.yechen.Student&quot;</span>);<br>        <span class="hljs-comment">// 实例化对象，调用 Student 类的无参构造方法</span><br>        Object obj = c.newInstance();<br>        <span class="hljs-comment">// 通过 StringBuilder 累加字符串</span><br>        StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-comment">/*// 获取所有public修饰的属性 Field</span><br><span class="hljs-comment">        Field[] fields = c.getFields();</span><br><span class="hljs-comment">        System.out.println(fields.length);// 2*/</span><br>        <span class="hljs-comment">// 获取所有属性</span><br>        Field[] declaredFields = c.getDeclaredFields();<br>        <span class="hljs-keyword">for</span> (Field field : declaredFields) &#123;<br>            <span class="hljs-comment">// 获取属性的修饰修饰符列表</span><br>            stringBuilder.append(Modifier.toString(field.getModifiers()));<br>            stringBuilder.append(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-comment">// 获取属性的类型名</span><br>            stringBuilder.append(field.getType().getSimpleName());<br>            stringBuilder.append(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-comment">// 获取属性的属性名</span><br>            stringBuilder.append(field.getName());<br>            stringBuilder.append(<span class="hljs-string">&quot; = &quot;</span>);<br>            <span class="hljs-comment">// 获取属性的属性值，一般情况下 private 修饰的属性是取不到的，会报异常，但是可以通过如下方法，打破封装</span><br>            field.setAccessible(<span class="hljs-keyword">true</span>);<br>            Object o = field.get(obj);<br>            stringBuilder.append(o);<br>            <span class="hljs-comment">// 换行</span><br>            stringBuilder.append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>        System.out.println(stringBuilder);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// Field对象</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> age; <span class="hljs-comment">// Field对象</span><br>    <span class="hljs-keyword">boolean</span> sex;<span class="hljs-comment">// Field对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> no;<span class="hljs-comment">// Field对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> MATH_PI = <span class="hljs-number">3.1415926</span>;<span class="hljs-comment">// Field对象</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="21-7-可变长度参数"><a href="#21-7-可变长度参数" class="headerlink" title="21.7 可变长度参数"></a>21.7 可变长度参数</h3><p><strong>int… args 这就是可变长度参数</strong></p><p>语法是：类型…  （注意：一定是3个点。）</p><p>注意：</p><ul><li>可变长度参数要求的<strong>参数个数是：0~N个</strong>。</li><li><strong>可变长度参数在参数列表中必须在最后一个位置上</strong>，而且可变长度参数<strong>只能有1个</strong>。</li><li>可变长度参数可以当做<strong>一个数组来看待</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        m1(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br>        m1(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;);<br>        m1();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m1</span><span class="hljs-params">(<span class="hljs-keyword">int</span>... args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : args) &#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="21-8-反射-Method"><a href="#21-8-反射-Method" class="headerlink" title="21.8 反射 Method"></a>21.8 反射 Method</h3><p><strong>Method 对象的常用方法：</strong></p><ul><li><p><code>int getModifiers()</code> ：以整数形式返回当前方法（Method 对象）的 Java 语言<strong>修饰符</strong>。这个返回值是不同修饰符组合的代号。</p><ul><li>可以通过 <code>Modifier</code> 类中的静态方法 <code>toString</code> 将 返回值转换成 字符串形式的修饰符。</li></ul></li><li><p><code>Class&lt;?&gt; getReturnType()</code> ： 获取方法的返回值类型。</p></li><li><p><code>String    getName()</code> ：获取方法名。</p></li><li><p><code>Class&lt;?&gt;[]    getParameterTypes()</code> ：获取方法的参数列表的类型。</p></li><li><p><code>Object    invoke(Object obj, Object... args)</code>：调用对象的方法，obj 为对象，args 为实际参数。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取方法的修饰符列表，返回值类型，方法名，形式参数列表</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Class c = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            c = Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-comment">// 获得所有方法对象</span><br>        Method[] declaredMethods = c.getDeclaredMethods();<br>        <span class="hljs-comment">// 编历方法</span><br>        <span class="hljs-keyword">for</span> (Method method : declaredMethods) &#123;<br>            <span class="hljs-comment">// 获取方法的修饰符列表</span><br>            stringBuilder.append(Modifier.toString(method.getModifiers()));<br>            stringBuilder.append(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-comment">// 获取返回值类型</span><br>            stringBuilder.append(method.getReturnType().getSimpleName());<br>            stringBuilder.append(<span class="hljs-string">&quot; &quot;</span>);<br>            <span class="hljs-comment">// 获取方法名</span><br>            stringBuilder.append(method.getName());<br>            stringBuilder.append(<span class="hljs-string">&quot; (&quot;</span>);<br>            <span class="hljs-comment">// 获取形式参数列表的类型</span><br>            Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; parameterTypes.length; i++) &#123;<br>                <span class="hljs-keyword">if</span> (i == parameterTypes.length - <span class="hljs-number">1</span>) &#123;<br>                    stringBuilder.append(parameterTypes[i].getSimpleName());<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                stringBuilder.append(parameterTypes[i].getSimpleName());<br>                stringBuilder.append(<span class="hljs-string">&quot;, &quot;</span>);<br>            &#125;<br>            stringBuilder.append(<span class="hljs-string">&quot;) &#123;&#125;&quot;</span>);<br>            stringBuilder.append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>        System.out.println(stringBuilder);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>通过反射机制怎么调用一个对象的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通过反射机制调用对象方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class&lt;?&gt; c = Class.forName(<span class="hljs-string">&quot;cn.yechen.MyClass&quot;</span>);<br>            <span class="hljs-comment">// 创建对象</span><br>            Object obj = c.newInstance();<br>            <span class="hljs-comment">// 获取方法对象</span><br>            Method method = c.getDeclaredMethod(<span class="hljs-string">&quot;login&quot;</span>, String.class, String.class);<br>            <span class="hljs-comment">// 调用方法</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            四要素：</span><br><span class="hljs-comment">            method 方法</span><br><span class="hljs-comment">            obj 对象</span><br><span class="hljs-comment">            &quot;admin&quot;,&quot;123&quot; 实参</span><br><span class="hljs-comment">            retrunValue 返回值</span><br><span class="hljs-comment">             */</span><br>            Object retrunValue = method.invoke(obj, <span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br>            System.out.println(retrunValue);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">login</span><span class="hljs-params">(String admin, String password)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span>.equals(admin) &amp;&amp; <span class="hljs-string">&quot;123456&quot;</span>.equals(password)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="21-9-反射-Constructors"><a href="#21-9-反射-Constructors" class="headerlink" title="21.9 反射 Constructors"></a>21.9 反射 Constructors</h3><ul><li><code>Class&lt;?&gt;[]    getParameterTypes()</code> ：获取构造方法方法的参数列表的类型。</li><li><code>T newInstance(Object... initargs)</code> ：执行有参构造方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通过反射机制调用有参数的构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class&lt;?&gt; c = Class.forName(<span class="hljs-string">&quot;cn.yechen.MyClass&quot;</span>);<br>            <span class="hljs-comment">// 调用无参构造方法</span><br>            Object obj = c.newInstance();<span class="hljs-comment">// 输出：执行了无参构造方法！</span><br>            <span class="hljs-comment">// 调用两个参数的方法创建对象</span><br>            Constructor&lt;?&gt; declaredConstructor = c.getDeclaredConstructor(<span class="hljs-keyword">int</span>.class, String.class);<br>            declaredConstructor.newInstance(<span class="hljs-number">123</span>, <span class="hljs-string">&quot;abc&quot;</span>);<span class="hljs-comment">// 输出：执行了两个参数的构造方法</span><br>            <span class="hljs-comment">// 调用四个参数的方法创建对象</span><br>            Constructor&lt;?&gt; declaredConstructor1 = c.getDeclaredConstructor(<span class="hljs-keyword">int</span>.class, String.class, <span class="hljs-keyword">double</span>.class, <span class="hljs-keyword">boolean</span>.class);<br>            declaredConstructor1.newInstance(<span class="hljs-number">123</span>, <span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-number">123</span>, <span class="hljs-keyword">true</span>);<span class="hljs-comment">// 输出：执行了四个参数的构造方法</span><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a;<br>    String b;<br>    <span class="hljs-keyword">double</span> c;<br>    <span class="hljs-keyword">boolean</span> d;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyClass</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了无参构造方法！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyClass</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了一个参数的构造方法！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyClass</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, String b)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了两个参数的构造方法！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyClass</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, String b, <span class="hljs-keyword">double</span> c, <span class="hljs-keyword">boolean</span> d)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了四个参数的构造方法！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="21-10-获取父类和实现的接口"><a href="#21-10-获取父类和实现的接口" class="headerlink" title="21.10 获取父类和实现的接口"></a>21.10 获取父类和实现的接口</h3><p>获取父类：<code>Class&lt;? super T&gt;    getSuperclass()</code></p><p>获取实现的接口：<code>Class&lt;?&gt;[]    getInterfaces()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class&lt;?&gt; c = Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br>            <span class="hljs-comment">// 获取父类</span><br>            Class&lt;?&gt; superClass = c.getSuperclass();<br>            System.out.println(c.getName() + <span class="hljs-string">&quot;的父类是：&quot;</span> + superClass.getName());<br>            <span class="hljs-comment">// 获取实现的接口</span><br>            Class&lt;?&gt;[] interfaces = c.getInterfaces();<br>            System.out.println(c.getName() + <span class="hljs-string">&quot;实现的接口有：&quot;</span>);<br>            <span class="hljs-keyword">for</span> (Class inter : interfaces) &#123;<br>                System.out.println(inter.getName());<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">java.lang.String的父类是：java.lang.Object</span><br><span class="hljs-comment">java.lang.String实现的接口有：</span><br><span class="hljs-comment">java.io.Serializable</span><br><span class="hljs-comment">java.lang.Comparable</span><br><span class="hljs-comment">java.lang.CharSequence</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20、多线程</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="20-1-多线程概述"><a href="#20-1-多线程概述" class="headerlink" title="20.1 多线程概述"></a>20.1 多线程概述</h3><p><strong>什么是进程？什么是线程？</strong></p><ul><li><p>进程是一个<strong>应用程序</strong>（1个进程是一个软件）</p></li><li><p>线程是一个进程中的<strong>执行场景/执行单元</strong>。</p></li><li><p>一个进程可以启动多个线程。</p></li><li><p>对于java程序来说，当在DOS命令窗口中输入：java HelloWorld 回车之后，会先启动JVM，<strong>而JVM就是一个进程</strong>。JVM再启动一个主线程调用main方法。</p><p>同时再启动一个垃圾回收线程负责看护，回收垃圾。最起码，<strong>现在的java程序中至少有两个线程并发，一个是垃圾回收线程，一个是执行main方法的主线程。</strong></p></li></ul><p><strong>==进程A和进程B的内存独立不共享==。</strong></p><p><strong>==线程A和线程B，堆内存和方法区内存共享。但是栈内存独立，一个线程一个栈==。</strong></p><ul><li>假设启动10个线程，会有10个栈空间，每个栈和每个栈之间，互不干扰，各自执行各自的，这就是多线程并发。</li><li>java中之所以有多线程机制，目的就是为了<strong>提高程序的处理效率。</strong></li></ul><h3 id="20-2-线程的创建和启动"><a href="#20-2-线程的创建和启动" class="headerlink" title="20.2 线程的创建和启动"></a>20.2 线程的创建和启动</h3><p><strong>有两种方法创建线程对象</strong></p><h4 id="20-2-1-编写一个类，直接继承java-lang-Thread，重写run方法"><a href="#20-2-1-编写一个类，直接继承java-lang-Thread，重写run方法" class="headerlink" title="20.2.1 编写一个类，直接继承java.lang.Thread，重写run方法"></a>20.2.1 编写一个类，直接继承java.lang.Thread，重写run方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;分支线程---&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>==注意：==</strong>  run 方法中的方法不能 throws，只能 try … catch</p><p><strong>因为 run() 方法在父类中没有抛出任何异常，子类不能比父类抛出更多的异常。</strong></p><p><strong>使用时</strong></p><p>怎么创建线程对象？ new就行了。</p><p>怎么启动线程呢？ 调用线程对象的start()方法。</p><ul><li>start()方法的作用是：<strong>启动一个分支线程，在JVM中开辟一个新的栈空间，这段代码任务完成之后，瞬间就结束了。</strong></li><li>这段代码的任务只是为了开启一个新的栈空间，只要新的栈空间开出来，start()方法就结束了。<strong>线程就启动成功了。</strong></li><li><strong>启动成功的线程会自动调用run方法</strong>，并且run方法在分支栈的栈底部（压栈）。（<strong>类似于一个程序的main函数，是一个入口</strong>）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyThread myThread = <span class="hljs-keyword">new</span> MyThread();<br>        <span class="hljs-comment">// 启动线程</span><br>        myThread.start();<br>        <span class="hljs-comment">// 这是在主线程中运行的</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程---&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>直接使用 <code>myThread.run()</code> 和 使用 <code>myThread.start()</code> 的区别：</strong></p><p>使用 <code>myThread.run()</code> 后不会开辟一个新的栈空间，即 run 方法中的内容还是运行在主线程中的</p><p><img src="https://img-blog.csdnimg.cn/20210224210144175.png" alt="002-线程的run"></p><p>使用 <code>myThread.start()</code> 后会开辟一个新的栈空间，开启一个线程，之后这个线程会自动调用 run 方法，主线程和分支线程并发执行。、</p><p><img src="https://img-blog.csdnimg.cn/20210224210637630.png" alt="003-线程的start"></p><h4 id="20-2-2-编写一个类，实现java-lang-Runnable接口，实现run方法"><a href="#20-2-2-编写一个类，实现java-lang-Runnable接口，实现run方法" class="headerlink" title="20.2.2 编写一个类，实现java.lang.Runnable接口，实现run方法"></a>20.2.2 编写一个类，实现java.lang.Runnable接口，实现run方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这并不是一个线程类，是一个可运行的类。它还不是一个线程。</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;分支线程---&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建一个可运行的对象</span><br>        MyThread myThread = <span class="hljs-keyword">new</span> MyThread();<br>        <span class="hljs-comment">// 将可运行的对象封装成线程对象</span><br>        Thread thread01 = <span class="hljs-keyword">new</span> Thread(myThread);<br><br>        <span class="hljs-comment">// 使用匿名内部类的方式创建线程对象</span><br>        Thread thread02 = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;分支线程02---&gt;&quot;</span> + i);<br>                &#125;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//启动线程</span><br>        thread01.start();<br>        thread02.start();<br><br>        <span class="hljs-comment">// 这是在主线程中运行的</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;主线程---&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>第二种方式实现接口比较常用，因为一个类实现了接口，它还可以去继承其它的类，更灵活。</strong></p><h3 id="20-3-线程的生命周期"><a href="#20-3-线程的生命周期" class="headerlink" title="20.3 线程的生命周期"></a>20.3 线程的生命周期</h3><p><img src="https://img-blog.csdnimg.cn/20210224225353959.png" alt="image-20210224225338862"></p><ul><li><p><strong>新建状态</strong>：刚 new 出来的线程对象，可以通过调用 start 方法进入就绪状态。</p></li><li><p><strong>就绪状态</strong>：调用 start 方法之后，此时的线程状态又可称为<strong>可运行状态</strong>，当前状态下该线程具有<strong>抢夺 CPU 时间片的权利</strong>，如果抢到了 CPU 时间片，就会进入运行状态。</p></li><li><p><strong>运行状态</strong>：抢占到 CPU 时间片的线程会进入运行状态，<strong>此时会开始执行 run 方法</strong>，当抢夺到的 CPU 时间片用完之后，通过 JVM 的调度，该线程会再次进入就绪状态抢夺 CPU 时间片，如果抢到了，就会再进入运行状态，<strong>接着上一次的代码继续执行 run 方法</strong>，<strong>线程会在就绪状态和运行状态之间来回循环</strong>，直到 run 方法执行完毕，进入死亡状态。</p></li><li><p><strong>阻塞状态</strong>：<strong>当一个线程在运行状态下遇到了阻塞事件</strong>，例如接受用户的键盘输入，或者 sleep 方法等，都会使该线程进入阻塞状态，<strong>进入阻塞状态的线程会放弃之前占有的 CPU 时间片</strong>。当阻塞解除之后，该线程会<strong>回到就绪状态继续抢夺 CPU 时间片</strong>。</p></li><li><p><strong>死亡状态</strong>：<strong>线程 run 方法执行结束</strong>标志着这个线程进入死亡状态。</p></li></ul><h3 id="20-4-获取线程的名称"><a href="#20-4-获取线程的名称" class="headerlink" title="20.4 获取线程的名称"></a>20.4 获取线程的名称</h3><p>获取线程对象的名字：<code>String name = 线程对象.getName();</code></p><p>修改线程对象的名字：<code>线程对象.setName();</code></p><p>怎么获取当前线程对象：<code>Thread thread = Thread.currentThread();</code></p><p>当线程没有设置名字的时候，默认的名字有什么规律：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">Thread</span><span class="hljs-number">-0</span><br><span class="hljs-keyword">Thread</span><span class="hljs-number">-1</span><br><span class="hljs-keyword">Thread</span><span class="hljs-number">-2</span><br><span class="hljs-keyword">Thread</span><span class="hljs-number">-3</span><br><span class="hljs-params">...</span>..<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    Thread thread01 = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                doSome(i);<br>            &#125;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">// 更改线程名称</span><br>    thread01.setName(<span class="hljs-string">&quot;线程1&quot;</span>);<br><br>    Thread thread02 = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                doSome(i);<br>            &#125;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-comment">// 更改线程名称</span><br>    thread02.setName(<span class="hljs-string">&quot;线程2&quot;</span>);<br><br>    <span class="hljs-comment">// 启动线程</span><br>    thread01.start();<br>    thread02.start();<br><br>    <span class="hljs-comment">// 主线程调用方法</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        doSome(i);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    Thread thread = Thread.currentThread();<br>    <span class="hljs-comment">// 打印当前调用该方法的线程名称</span><br>    System.out.println(<span class="hljs-string">&quot;【&quot;</span> + thread.getName() + <span class="hljs-string">&quot;】正在调用 doSome 方法，输出：&quot;</span> + i);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="20-5-线程的调度与控制"><a href="#20-5-线程的调度与控制" class="headerlink" title="20.5 线程的调度与控制"></a>20.5 线程的调度与控制</h3><h4 id="20-5-1-Thread-sleep"><a href="#20-5-1-Thread-sleep" class="headerlink" title="20.5.1 Thread.sleep()"></a>20.5.1 Thread.sleep()</h4><p><strong>关于线程的sleep方法：</strong><code>static void sleep(long millis)</code></p><ul><li>静态方法，通过类名 Thread 来调用。</li><li>参数是  ==毫秒==：使当前线程休眠 1 秒：<code>Thread.sleep(1000);</code></li><li>作用：<strong>让==当前线程==进入休眠，进入“阻塞状态”，放弃占有CPU时间片，让给其它线程使用。</strong></li><li>Thread.sleep()方法，可以做到这种效果：<strong>间隔特定的时间，去执行一段特定的代码，每隔多久执行一次。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">// 每间隔 1 秒输出</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt;&quot;</span> + i);<br>        <span class="hljs-comment">// 休眠 1 秒</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>面试题</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建线程对象</span><br>        Thread t = <span class="hljs-keyword">new</span> MyThread3();<br>        t.setName(<span class="hljs-string">&quot;t&quot;</span>);<br>        t.start();<br><br>        <span class="hljs-comment">// 调用sleep方法</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 问题：这行代码会让线程t进入休眠状态吗？</span><br>            t.sleep(<span class="hljs-number">1000</span> * <span class="hljs-number">5</span>); <span class="hljs-comment">// 在执行的时候还是会转换成：Thread.sleep(1000 * 5);</span><br>                                     <span class="hljs-comment">// 这行代码的作用是：让当前线程进入休眠，也就是说main线程进入休眠。</span><br>                                     <span class="hljs-comment">// 这样代码出现在main方法中，main线程睡眠。</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-comment">// 5秒之后这里才会执行。</span><br>        System.out.println(<span class="hljs-string">&quot;hello World!&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++)&#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt;&quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="20-5-2-终止线程的睡眠"><a href="#20-5-2-终止线程的睡眠" class="headerlink" title="20.5.2 终止线程的睡眠"></a>20.5.2 终止线程的睡眠</h4><p><code>void interrupt()</code> : 中断线程睡眠</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建线程对象</span><br>        Thread t = <span class="hljs-keyword">new</span> MyThread3();<br>        t.setName(<span class="hljs-string">&quot;t&quot;</span>);<br>        t.start();<br><br>        <span class="hljs-comment">// 使主线程睡眠 5 秒，模拟一段时间</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            MyThread3.sleep(<span class="hljs-number">1000</span> * <span class="hljs-number">5</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-comment">// 5秒之后这里才会执行。</span><br>        <span class="hljs-comment">// 终断t线程的睡眠（这种终断睡眠的方式依靠了java的异常处理机制。）</span><br>        t.interrupt();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt; begin&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 睡眠1年</span><br>            Thread.sleep(<span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">365</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-comment">// 打印异常信息</span><br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//没有干预的话要 1 年之后才会执行这里</span><br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt; end&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 输出：</span><br>t---&gt; begin<br>java.lang.InterruptedException: sleep interrupted<br>at java.lang.Thread.sleep(Native Method)<br>at cn.yechen.MyThread3.run(Test.java:<span class="hljs-number">30</span>)<br>t---&gt; end（这是 <span class="hljs-number">5</span> 秒后输出的）<br></code></pre></td></tr></table></figure><h4 id="20-5-3-终止一个线程的执行"><a href="#20-5-3-终止一个线程的执行" class="headerlink" title="20.5.3 终止一个线程的执行"></a>20.5.3 终止一个线程的执行</h4><p><strong>第一种方法</strong>：使用 <code>stop</code> 方法（这种方式存在很大的缺点：<strong>容易丢失数据</strong>。因为这种方式是直接将线程杀死了，线程没有保存的数据将会丢失。不建议使用。）</p><p><strong>第二种方法</strong>：<strong>在线程类中打一个布尔标记</strong>，使用这个布尔标记来决定线程的运行和终止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyThread3 myThread3 = <span class="hljs-keyword">new</span> MyThread3();<br>        myThread3.setName(<span class="hljs-string">&quot;t&quot;</span>);<br>        myThread3.start();<br><br>        <span class="hljs-comment">// 模拟 5 秒</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span> * <span class="hljs-number">5</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-comment">// 终止 t 线程</span><br>        myThread3.run = <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    <span class="hljs-keyword">boolean</span> run = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (run) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt;&quot;</span> + i);<br>                <span class="hljs-comment">// 睡 1 秒</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 可以在线程结束前在这里执行数据保存</span><br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="20-5-4-线程的调度"><a href="#20-5-4-线程的调度" class="headerlink" title="20.5.4 线程的调度"></a>20.5.4 线程的调度</h4><h5 id="常见的线程调度模型有哪些："><a href="#常见的线程调度模型有哪些：" class="headerlink" title="常见的线程调度模型有哪些："></a>常见的线程调度模型有哪些：</h5><ol><li><p>抢占式调度模型：那个线程的<strong>优先级比较高</strong>，抢到的<strong>CPU时间片的概率就高一些/多一些</strong>。java采用的就是抢占式调度模型。</p></li><li><p>均分式调度模型：<strong>平均分配CPU时间片</strong>。每个线程占有的CPU时间片时间长度一样。平均分配，一切平等。有一些编程语言，线程调度模型采用的是这种方式。</p></li></ol><h5 id="java中提供了哪些方法是和线程调度有关系的呢："><a href="#java中提供了哪些方法是和线程调度有关系的呢：" class="headerlink" title="java中提供了哪些方法是和线程调度有关系的呢："></a>java中提供了哪些方法是和线程调度有关系的呢：</h5><ol><li><p>关于线程的优先级：</p><ul><li><p><code>void setPriority(int newPriority)</code>   设置线程的优先级</p></li><li><p><code>int getPriority()</code>   获取线程优先级</p></li><li><p>优先级比较高的获取CPU时间片可能会多一些。（但也不完全是，大概率是多的。）</p></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;最高优先级：&quot;</span> + Thread.MAX_PRIORITY);<span class="hljs-comment">// 最高优先级：10</span><br>System.out.println(<span class="hljs-string">&quot;默认优先级：&quot;</span> + Thread.NORM_PRIORITY);<span class="hljs-comment">// 最高优先级：5</span><br>System.out.println(<span class="hljs-string">&quot;最小优先级：&quot;</span> + Thread.MIN_PRIORITY);<span class="hljs-comment">// 最高优先级：1</span><br></code></pre></td></tr></table></figure><ol start="2"><li>让位方法<ul><li><code>static void yield()</code>  让位方法</li><li><strong>暂停当前正在执行的线程对象，回到就绪状态，让给其它线程。</strong></li><li>yield()方法不是阻塞方法。让当前线程让位，让给其它线程使用。</li><li>yield()方法的执行会<strong>让当前线程从“运行状态”回到“就绪状态”</strong>。（注意：在回到就绪之后，有可能还会再次抢到。）</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    Thread thread = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1000</span>; i++) &#123;<br>                <span class="hljs-comment">// 当 i 是 10 的倍数的时候，t 线程让位给其他线程</span><br>                <span class="hljs-keyword">if</span> (i % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>) &#123;<br>                    Thread.yield();<br>                &#125;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt;&quot;</span> + i);<br>            &#125;<br>        &#125;<br>    &#125;);<br>    thread.setName(<span class="hljs-string">&quot;t&quot;</span>);<br>    thread.start();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1000</span>; i++) &#123;<br>        <span class="hljs-comment">// 当 i 是 100 的倍数的时候，main 线程让位给其他线程</span><br>        <span class="hljs-keyword">if</span> (i % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>) &#123;<br>            Thread.yield();<br>        &#125;<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt;&quot;</span> + i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>合并线程<ul><li><code>void join()</code>   合并线程</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-comment">// main begin 最先输出</span><br>    System.out.println(<span class="hljs-string">&quot;main begin&quot;</span>);<br>    Thread thread = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Runnable() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">1000</span>; i++) &#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt;&quot;</span> + i);<br>            &#125;<br>        &#125;<br>    &#125;);<br>    thread.setName(<span class="hljs-string">&quot;t&quot;</span>);<br>    thread.start();<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// t 线程合并到 当前（main）线程中，当前线程受阻塞，直到 t 线程执行完成，当前线程才会继续执行</span><br>        <span class="hljs-comment">// 相当于 t 线程插了一个队，走到了当前线程前面，还死活不让当前线程执行，要自己执行完后才让当前线程继续执行</span><br>        thread.join();<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br><br>    <span class="hljs-comment">// main over 最后输出</span><br>    System.out.println(<span class="hljs-string">&quot;main over&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="20-6-线程安全"><a href="#20-6-线程安全" class="headerlink" title="20.6 线程安全"></a>20.6 线程安全</h3><p>以后在开发中，我们的项目都是运行在服务器当中，而服务器已经将线程的定义，线程对象的创建，线程的启动等，都已经实现完了。这些代码我们都不需要</p><p>编写。</p><p><strong>最重要的是：你要知道，你编写的程序需要放到一个多线程的环境下运行，你更需要关注的是这些数据在多线程并发的环境下是否是安全的。</strong></p><p><strong>什么时候数据在多线程并发的环境下会存在安全问题呢？</strong></p><ul><li>条件1：多线程并发</li><li>条件2：有共享数据</li><li>条件3：共享数据有修改的行为</li></ul><p><strong>怎么解决线程安全问题呢？</strong></p><ul><li><p>用排队执行解决线程安全问题。</p></li><li><p>这种机制被称为：**==线程同步机制==**。</p></li><li><p>专业术语叫做：线程同步，<strong>实际上就是线程不能并发了，线程必须排队执行。线程排队了，==就会牺牲一部分的效率==，但是没有办法，数据安全最重要。</strong></p><ul><li><p><strong>异步编程模型</strong>：线程 t1 和线程 t2，各自执行各自的，t1 不管 t2，t2 不管 t1，谁也不需要等谁，这种编程模型叫做：异步编程模型。其实就是：<strong>多线程并发（效率较高。）</strong></p></li><li><p><strong>同步编程模型</strong>：线程t1和线程t2，在线程t1执行的时候，必须等待t2线程执行结束，或者说在t2线程执行的时候，必须等待t1线程执行结束，两个线程之间发生了等待关系，这就是同步编程模型。<strong>效率较低。线程排队执行。</strong></p></li></ul></li></ul><h4 id="20-6-1-使用银行账户取钱的例子模拟多线程并发下的数据安全问题："><a href="#20-6-1-使用银行账户取钱的例子模拟多线程并发下的数据安全问题：" class="headerlink" title="20.6.1 使用银行账户取钱的例子模拟多线程并发下的数据安全问题："></a>20.6.1 使用银行账户取钱的例子模拟多线程并发下的数据安全问题：</h4><ol><li>定义一个银行账户类 Account，有账户名和余额属性，还有一个取钱的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String accountName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> balance;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span><span class="hljs-params">(String accountName, <span class="hljs-keyword">double</span> balance)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.accountName = accountName;<br>        <span class="hljs-keyword">this</span>.balance = balance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAccountName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> accountName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAccountName</span><span class="hljs-params">(String accountName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.accountName = accountName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBalance</span><span class="hljs-params">(<span class="hljs-keyword">double</span> balance)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.balance = balance;<br>    &#125;<br><br>    <span class="hljs-comment">// 取钱方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">double</span> money)</span> </span>&#123;<br>        <span class="hljs-comment">// 取之前的余额</span><br>        <span class="hljs-keyword">double</span> before = getBalance();<br>        <span class="hljs-comment">// 取之后的余额</span><br>        <span class="hljs-keyword">double</span> after = before - money;<br>        <span class="hljs-comment">// 模拟网路延迟</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">// 更新余额</span><br>        setBalance(after);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>定义一个线程类，是一个 Account 类型的属性，使用构造方法是两个线程访问同一个账户对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    Account account;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyThread</span><span class="hljs-params">(Account account)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.account = account;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 执行取款方法</span><br>        <span class="hljs-keyword">double</span> money = <span class="hljs-number">5000</span>;<br>        account.withdraw(money);<br>        System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;对账户[&quot;</span> + account.getAccountName() + <span class="hljs-string">&quot;]取款成功，余额为：&quot;</span> + account.getBalance());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>编写测试类模拟两个人同时对一个账户取钱</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Account account = <span class="hljs-keyword">new</span> Account(<span class="hljs-string">&quot;act-001&quot;</span>, <span class="hljs-number">10000</span>);<br>        MyThread myThread01 = <span class="hljs-keyword">new</span> MyThread(account);<br>        MyThread myThread02 = <span class="hljs-keyword">new</span> MyThread(account);<br>        myThread01.setName(<span class="hljs-string">&quot;t1&quot;</span>);<br>        myThread02.setName(<span class="hljs-string">&quot;t2&quot;</span>);<br>        myThread01.start();<br>        myThread02.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">t2对账户[act-001]取款成功，余额为：5000.0</span><br><span class="hljs-comment">t1对账户[act-001]取款成功，余额为：5000.0</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>这样线程并发就造成了数据的不安全。</strong></p><h4 id="20-6-2-synchronized-关键字"><a href="#20-6-2-synchronized-关键字" class="headerlink" title="20.6.2 synchronized 关键字"></a>20.6.2 synchronized 关键字</h4><p>Java中有三大变量？【重要的内容。】</p><ul><li><p><strong>实例变量：在堆中。</strong></p></li><li><p><strong>静态变量：在方法区。</strong></p></li><li><p><strong>局部变量：在栈中。</strong></p></li></ul><p>以上三大变量中：</p><ul><li><p><strong>局部变量永远都不会存在线程安全问题。</strong>因为局部变量不共享。（一个线程一个栈。）局部变量在栈中。所以局部变量永远都不会共享。</p></li><li><p>实例变量在堆中，堆只有1个。静态变量在方法区中，方法区只有1个。<strong>堆和方法区都是多线程共享的，所以可能存在线程安全问题。</strong></p></li></ul><p> 结论：</p><ul><li><p>局部变量+常量：不会有线程安全问题。 </p></li><li><p>成员变量：可能会有线程安全问题。</p></li></ul><p><strong>有三种写法：</strong></p><p><strong>==同步代码块==</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(线程共享对象) &#123;<br>    同步代码块<br>&#125;<br></code></pre></td></tr></table></figure><p>synchronized 后面小括号中传的这个“数据”是相当关键的。<strong>这个数据必须是多线程共享的数据</strong>。才能达到多线程排队。</p><p>在java语言中，**==任何一个对象都有“一把锁==**，其实这把锁就是标记。（只是把它叫做锁。） 100个对象，100把锁。1个对象1把锁。</p><p>当 t1 线程执行过程中遇到了 sychronized 关键字，就会自动找括号内这个对象的 “ 对象锁 ” ，找到之后，就会占有这把锁，然后执行同步代码块中的语句，执行过程中如果另一个线程 t2 也要也遇到了 sychronized 关键字，也会找对象的 “ 对象锁 ” ，但是此时 “ 对象锁 “ 还被 t1 占有，t2 只能在同步代码块之外等待 t1 执行完成归还 “ 对象锁 ”，t1 执行完同步代码块后归还 “ 对象锁 ”，然后 t2 占有这把锁之后，进入同步代码块执行程序。</p><p><strong>修改银行账户取钱例子中的取钱方法：</strong>此时线程在执行是会排队，保障数据安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">withdraw</span><span class="hljs-params">(<span class="hljs-keyword">double</span> money)</span> </span>&#123;<br><span class="hljs-comment">// 当前对象是线程的共享对象，所以括号内添 this</span><br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) &#123;<br>        <span class="hljs-comment">// 取之前的余额</span><br>        <span class="hljs-keyword">double</span> before = getBalance();<br>        <span class="hljs-comment">// 取之后的余额</span><br>        <span class="hljs-keyword">double</span> after = before - money;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">// 更新余额</span><br>        setBalance(after);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>==在实例方法上使用 synchronized==</strong></p><p><strong>表示共享对象一定是this并且同步代码块是整个方法体。对象锁，一个对象一把。</strong></p><p>修饰了整个实例方法，表示整个方法体都需要同步，<strong>可能会无故扩大同步的范围，导致程序的执行效率降低</strong>。所以这种方式不常用。</p><p>如果共享的对象就是this，并且需要同步的代码块是整个方法体，建议使用这种方式。</p><p><strong>==在静态方法上使用 synchronized==</strong></p><p>表示找<strong>类锁</strong>。<strong>一个类的类锁永远只有1把</strong>。就算创建了100个对象，那类锁也只有一把。</p><p><a href=".%5Csychronized%E9%9D%A2%E8%AF%95%E9%A2%98%5C%E9%9D%A2%E8%AF%95%E9%A2%9801">面试题01</a></p><p><a href=".%5Csychronized%E9%9D%A2%E8%AF%95%E9%A2%98%5C%E9%9D%A2%E8%AF%95%E9%A2%9802">面试题02</a></p><p><a href=".%5Csychronized%E9%9D%A2%E8%AF%95%E9%A2%98%5C%E9%9D%A2%E8%AF%95%E9%A2%9803">面试题03</a></p><p><a href=".%5Csychronized%E9%9D%A2%E8%AF%95%E9%A2%98%5C%E9%9D%A2%E8%AF%95%E9%A2%9804">面试题04</a></p><h4 id="20-6-3-死锁"><a href="#20-6-3-死锁" class="headerlink" title="20.6.3 死锁"></a>20.6.3 死锁</h4><p><img src="https://img-blog.csdnimg.cn/20210225204416480.png" alt="image-20210225204323069"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 程序不会执行完成，也不会出现异常，也不会出现错误</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Object o1 = <span class="hljs-keyword">new</span> Object();<br>        Object o2 = <span class="hljs-keyword">new</span> Object();<br>        MyThread01 myThread01 = <span class="hljs-keyword">new</span> MyThread01(o1, o2);<br>        MyThread02 myThread02 = <span class="hljs-keyword">new</span> MyThread02(o1, o2);<br>        myThread01.start();<br>        myThread02.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    Object o1;<br>    Object o2;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyThread01</span><span class="hljs-params">(Object o1, Object o2)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.o1 = o1;<br>        <span class="hljs-keyword">this</span>.o2 = o2;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (o1) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (o2)&#123;<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>    Object o1;<br>    Object o2;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyThread02</span><span class="hljs-params">(Object o1, Object o2)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.o1 = o1;<br>        <span class="hljs-keyword">this</span>.o2 = o2;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">synchronized</span> (o2) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (o1)&#123;<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="20-6-4-开发过程中如何解决线程安全问题"><a href="#20-6-4-开发过程中如何解决线程安全问题" class="headerlink" title="20.6.4 开发过程中如何解决线程安全问题"></a>20.6.4 开发过程中如何解决线程安全问题</h4><p><strong>第一种方案</strong>：尽量使用<strong>局部变量</strong>代替“实例变量和静态变量”。</p><p><strong>第二种方案</strong>：如果必须是实例变量，那么可以考虑<strong>创建多个对象</strong>，这样实例变量的内存就不共享了。（一个线程对应1个对象，100个线程对应100个对象，</p><p>对象不共享，就没有数据安全问题了。）</p><p><strong>第三种方案</strong>：如果不能使用局部变量，对象也不能创建多个，这个时候就只能<strong>选择synchronized了。线程同步机制。</strong></p><h3 id="20-7-守护线程"><a href="#20-7-守护线程" class="headerlink" title="20.7 守护线程"></a>20.7 守护线程</h3><p><strong>java语言中线程分为两大类：</strong></p><ul><li>一类是：<strong>用户线程</strong><ul><li>主线程main方法是一个用户线程。</li></ul></li><li>一类是：<strong>守护线程</strong>（后台线程）<ul><li>其中具有代表性的就是：垃圾回收线程（守护线程）。</li></ul></li></ul><p><strong>守护线程的特点</strong>：</p><ul><li>一般守护线程是一个<strong>死循环</strong>，但当所有的用户线程结束，守护线程就会自动结束。</li></ul><p><strong>守护线程用在什么地方呢？</strong></p><p>例如：</p><blockquote><p>每天00:00的时候系统数据自动备份。</p><p>这个需要使用到定时器，并且我们可以将定时器设置为守护线程。</p><p>一直在那里看着，每到00:00的时候就备份一次。</p><p>所有的用户线程如果结束了，守护线程自动退出，没有必要进行数据备份了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyThread myThread = <span class="hljs-keyword">new</span> MyThread();<br>        myThread.setName(<span class="hljs-string">&quot;t&quot;</span>);<br>        <span class="hljs-comment">// 将 t 线程设置为守护线程</span><br>        myThread.setDaemon(<span class="hljs-keyword">true</span>);<br>        myThread.start();<br><br>        <span class="hljs-comment">// 主线程是一个用户线程</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt;&quot;</span> + i);<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 由于该线程是一个守护线程，即使是死循环，当时当用户线程结束的时候，守护线程也要结束</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt;&quot;</span> + (i++));<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="20-8-定时器"><a href="#20-8-定时器" class="headerlink" title="20.8 定时器"></a>20.8 定时器</h3><p>定时器的作用：</p><ul><li><strong>间隔特定的时间，执行特定的程序。</strong></li></ul><p>那么在java中其实可以采用多种方式实现：</p><ul><li><p><strong>可以使用sleep方法</strong>，睡眠，设置睡眠时间，没到这个时间点醒来，执行任务。这种方式是最原始的定时器。（比较low）</p></li><li><p>在java的类库中已经写好了一个<strong>定时器</strong>：<code>java.util.Timer</code>，可以直接拿来用。不过，这种方式在目前的开发中也很少用，因为现在有很多高级框架都是支持</p><p>定时任务的。</p></li><li><p>在实际的开发中，目前使用较多的是<strong>Spring框架中提供的SpringTask框架</strong>，这个框架只要进行简单的配置，就可以完成定时器的任务。（但是底层还是 Timer）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Timer timer = <span class="hljs-keyword">new</span> Timer();<br>        SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);<br>        Date date = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            date = simpleDateFormat.parse(<span class="hljs-string">&quot;2021-02-25 21:30:00 000&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">// timer.schedule(定时任务, 第一次执行时间, 间隔多久执行一次);</span><br>        <span class="hljs-comment">// 从 2021-02-25 21:30:00 000 这个时间开始，每 5 秒执行一次 MyTimer 中的定时任务</span><br>        timer.schedule(<span class="hljs-keyword">new</span> MyTimer(), date, <span class="hljs-number">1000</span> * <span class="hljs-number">5</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTimer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TimerTask</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 编写你需要执行的任务就行了。</span><br>        SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);<br>        String time = simpleDateFormat.format(<span class="hljs-keyword">new</span> Date());<br>        System.out.println(time + <span class="hljs-string">&quot;执行了一次数据备份！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="20-9-创建线程的第三种方法（JDK8-新特性）"><a href="#20-9-创建线程的第三种方法（JDK8-新特性）" class="headerlink" title="20.9 创建线程的第三种方法（JDK8 新特性）"></a>20.9 创建线程的第三种方法（JDK8 新特性）</h3><p>实现线程的第三种方式：<strong>实现Callable接口</strong>。（JDK8新特性。）</p><p>这种方式实现的线程<strong>可以获取线程的返回值</strong>。</p><ul><li>这种方式的优点：可以获取到线程的执行结果。</li><li>这种方式的缺点：<strong>效率比较低，在获取t线程执行结果的时候，当前线程受阻塞，效率较低</strong>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 匿名内部类方式</span><br>        FutureTask futureTask = <span class="hljs-keyword">new</span> FutureTask(<span class="hljs-keyword">new</span> Callable() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                <span class="hljs-comment">// 线程执行一个任务，执行之后可能会有一个执行结果</span><br>                <span class="hljs-comment">// 模拟执行</span><br>                System.out.println(<span class="hljs-string">&quot;call method begin&quot;</span>);<br>                Thread.sleep(<span class="hljs-number">1000</span> * <span class="hljs-number">10</span>);<br>                System.out.println(<span class="hljs-string">&quot;call method end!&quot;</span>);<br>                <span class="hljs-keyword">int</span> a = <span class="hljs-number">100</span>;<br>                <span class="hljs-keyword">int</span> b = <span class="hljs-number">200</span>;<br>                <span class="hljs-keyword">return</span> a + b; <span class="hljs-comment">//自动装箱(300结果变成Integer)</span><br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">// 创建线程对象</span><br>        Thread thread = <span class="hljs-keyword">new</span> Thread(futureTask);<br>        <span class="hljs-comment">// 启动线程</span><br>        thread.start();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 这里是main方法，这是在主线程中。</span><br>            <span class="hljs-comment">// 在主线程中，怎么获取t线程的返回结果？</span><br>            <span class="hljs-comment">// get()方法的执行会导致 “当前线程阻塞”</span><br>            Object o = futureTask.get();<br>            System.out.println(<span class="hljs-string">&quot;线程执行结果：&quot;</span> + o);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException | ExecutionException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="20-10-关于Object类中的wait和notify方法。（生产者和消费者模式）"><a href="#20-10-关于Object类中的wait和notify方法。（生产者和消费者模式）" class="headerlink" title="20.10 关于Object类中的wait和notify方法。（生产者和消费者模式）"></a>20.10 关于Object类中的wait和notify方法。（生产者和消费者模式）</h3><p>wait 和 notify 方法不是线程对象的方法，是java中任何一个java对象都有的方法，因为这两个方式是Object类中自带的。</p><p>wait方法和notify方法不是通过线程对象调用，是通过对象调用的。</p><p><strong>wait()方法作用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Object o = <span class="hljs-keyword">new</span> Object();<br>o.wait();<br></code></pre></td></tr></table></figure><p>表示：</p><ul><li><p><strong>让正在 o 对象上活动的线程进入等待状态</strong>，无期限等待，直到被唤醒为止。</p></li><li><p>o.wait();方法的调用，会让 “当前线程（正在o对象上活动的线程）” 进入等待状态。</p></li><li><p><em>notify()方法作用：</em>*</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Object o = <span class="hljs-keyword">new</span> Object();<br>o.notify();<br></code></pre></td></tr></table></figure><p>表示：</p><ul><li><p>唤醒正在o对象上等待的线程。</p></li><li><p>还有一个notifyAll()方法：这个方法是唤醒o对象上处于等待的所有线程。</p></li><li><p><em>生产者和消费者模式：</em>*</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20210225223605145.png" alt="007-生产者和消费者模式"></p><p>程序实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建1个仓库对象，共享的。</span><br>        List list = <span class="hljs-keyword">new</span> ArrayList();<br>        <span class="hljs-comment">// 创建两个线程对象</span><br>        <span class="hljs-comment">// 生产者线程</span><br>        Thread t1 = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Producer(list));<br>        <span class="hljs-comment">// 消费者线程</span><br>        Thread t2 = <span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Consumer(list));<br><br>        t1.setName(<span class="hljs-string">&quot;生产者线程&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;消费者线程&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 生产线程</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-comment">// 仓库</span><br>    <span class="hljs-keyword">private</span> List list;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Producer</span><span class="hljs-params">(List list)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.list = list;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 一直生产（使用死循环来模拟一直生产）</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">// 给仓库对象list加锁。</span><br>            <span class="hljs-keyword">synchronized</span> (list)&#123;<br>                <span class="hljs-keyword">if</span>(list.size() &gt; <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">// 大于0，说明仓库中已经有1个元素了。</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">// 当前线程进入等待状态，并且释放Producer之前占有的list集合的锁。</span><br>                        list.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 程序能够执行到这里说明仓库是空的，可以生产</span><br>                Object obj = <span class="hljs-keyword">new</span> Object();<br>                list.add(obj);<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt;&quot;</span> + obj);<br>                <span class="hljs-comment">// 唤醒消费者进行消费</span><br>                list.notifyAll();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 消费线程</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>    <span class="hljs-comment">// 仓库</span><br>    <span class="hljs-keyword">private</span> List list;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Consumer</span><span class="hljs-params">(List list)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.list = list;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 一直消费</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (list) &#123;<br>                <span class="hljs-keyword">if</span>(list.size() == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">// 仓库已经空了。</span><br>                        <span class="hljs-comment">// 消费者线程等待，释放掉list集合的锁</span><br>                        list.wait();<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">// 程序能够执行到此处说明仓库中有数据，进行消费。</span><br>                Object obj = list.remove(<span class="hljs-number">0</span>);<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;---&gt;&quot;</span> + obj);<br>                <span class="hljs-comment">// 唤醒生产者生产。</span><br>                list.notifyAll();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>19、IO 流</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-IO-%E6%B5%81/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-IO-%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="19-1-IO流概述"><a href="#19-1-IO流概述" class="headerlink" title="19.1 IO流概述"></a>19.1 IO流概述</h3><h4 id="19-1-1-什么是-IO-流"><a href="#19-1-1-什么是-IO-流" class="headerlink" title="19.1.1 什么是 IO 流"></a>19.1.1 什么是 IO 流</h4><p>I : Input</p><p>O : Output</p><p>==<strong>通过IO可以完成硬盘文件的读和写。</strong>==</p><p><img src="https://img-blog.csdnimg.cn/20210222222354471.png" alt="001-什么是IO"></p><h4 id="19-1-2-IO流的分类"><a href="#19-1-2-IO流的分类" class="headerlink" title="19.1.2 IO流的分类"></a>19.1.2 IO流的分类</h4><p><strong>一种方式是按照流的方向进行分类：</strong></p><p>以内存作为参照物</p><ul><li>往内存中去，叫做==输入(Input)==。或者叫做==读(Read)==</li><li>从内存中出来，叫做==输出(Output)==。或者叫做==写(Write)==</li></ul><p><strong>另一种方式是按照读取数据方式不同进行分类：</strong></p><ul><li><p>有的流是按照  <strong>==字节==</strong>  的方式读取数据，<strong>一次读取1个字节byte</strong>，等同于一次读取8个二进制位。</p><p><strong>这种流是万能的，什么类型的文件都可以读取</strong>。包括：文本文件，图片，声音文件，视频文件等….</p><p>假设文件file1.txt，采用字节流的话是这样读的：</p><p>​    <strong>a中国bc张三fe</strong></p><p>​    第一次读：一个字节，正好读到’a’</p><p>​    第二次读：一个字节，正好读到’中’字符的一半。（’a’字符在windows系统中占用1个字节。）</p><p>​    第三次读：一个字节，正好读到’中’字符的另外一半。（’中’字符在windows系统中占用2个字节。）</p></li><li><p>有的流是按照  ==<strong>字符</strong>==  的方式读取数据的，<strong>一次读取一个字符</strong>，这种流是为了<strong>方便读取普通文本文件</strong>而存在的，这种流不能读取：图片、声音、视频等文件。只能读取纯文本文件（不能读取 word 文件）</p><p>假设文件file1.txt，采用字符流的话是这样读的：</p><p>​    <strong>a中国bc张三fe</strong></p><p>​    第一次读：’a’字符（’a’字符在windows系统中占用1个字节。）</p><p>​    第二次读：’中’字符（’中’字符在windows系统中占用2个字节。）</p></li></ul><h4 id="19-1-3-java-IO流四大家族"><a href="#19-1-3-java-IO流四大家族" class="headerlink" title="19.1.3 java IO流四大家族"></a>19.1.3 java IO流四大家族</h4><p><strong>四大家族的首领（都是抽象类）：</strong></p><ul><li>java.io.InputStream（字节输入流）</li><li>java.io.OutputStream（字节输出流）</li><li>java.io.Reader（字符输入流）</li><li>java.io.Writer（字符输出流）</li></ul><p><strong>==所有的流==都实现了:</strong></p><ul><li><p><code>java.io.Closeable</code> 接口：都是可关闭的，都有<code>close() </code>方法。</p><p>流毕竟是一个管道，这个是内存和硬盘之间的通道，<strong>用完之后一定要关闭，不然会耗费(占用)很多资源</strong>。养成好习惯，用完流一定要关闭。</p></li></ul><p><strong>所有的==输出流==都实现了：</strong></p><ul><li><p><code>java.io.Flushable</code> 接口，都是可刷新的，都有<code>flush()</code> 方法。</p><p>养成一个好习惯，输出流在最终输出之后，一定要记得 flush() 刷新一下。这个<strong>刷新表示将通道/管道当中剩余未输出的数据强行输出完</strong>（清空管道！）刷新的作用就是清空管道。</p><p><strong>注意：如果没有flush()可能会导致丢失数据</strong>。</p></li></ul><p><strong>==注意：在java中只要“类名”以Stream结尾的都是字节流。以“Reader/Writer”结尾的都是字符流。==</strong></p><h4 id="19-1-4-java-io包下需要掌握的流有16个"><a href="#19-1-4-java-io包下需要掌握的流有16个" class="headerlink" title="19.1.4 java.io包下需要掌握的流有16个"></a>19.1.4 java.io包下需要掌握的流有16个</h4><p><strong>文件专属：</strong></p><ul><li><code>java.io.FileInputStream</code>（掌握）</li><li><code>java.io.FileOutputStream</code>（掌握）</li><li><code>java.io.FileReader</code></li><li><code>java.io.FileWriter</code></li></ul><p><strong>转换流：（将字节流转换成字符流）:</strong></p><ul><li><code>java.io.InputStreamReader</code></li><li><code>java.io.OutputStreamWriter</code></li></ul><p><strong>缓冲流专属：</strong></p><ul><li><p><code>java.io.BufferedReader</code></p></li><li><p><code>java.io.BufferedWriter</code></p></li><li><p><code>java.io.BufferedInputStream</code></p></li><li><p><code>java.io.BufferedOutputStream</code></p></li></ul><p><strong>数据流专属：</strong> </p><ul><li><p><code>java.io.DataInputStream</code></p></li><li><p><code>java.io.DataOutputStream</code></p></li></ul><p><strong>标准输出流：</strong></p><ul><li><p><code>java.io.PrintWriter</code></p></li><li><p><code>java.io.PrintStream</code>（掌握）</p></li></ul><p><strong>对象专属流：</strong></p><ul><li><p><code>java.io.ObjectInputStream（掌握）</code></p></li><li><p><code>java.io.ObjectOutputStream（掌握）</code></p></li></ul><h3 id="19-2-FileInputStream"><a href="#19-2-FileInputStream" class="headerlink" title="19.2 FileInputStream"></a>19.2 FileInputStream</h3><h4 id="19-2-1-概述"><a href="#19-2-1-概述" class="headerlink" title="19.2.1 概述"></a>19.2.1 概述</h4><ul><li><strong>文件字节输入流，万能的，任何类型的文件都可以采用这个流来读。</strong></li><li>字节的方式，完成输入的操作，完成读的操作（==硬盘—&gt; 内存==）</li></ul><h4 id="19-2-2-简单使用"><a href="#19-2-2-简单使用" class="headerlink" title="19.2.2 简单使用"></a>19.2.2 简单使用</h4><ul><li>构造方法中可以放文件的路径</li><li>当文件不在 IDEA 项目文件下时，要使用<strong>绝对路径</strong></li><li>当文件在 IDEA 项目下是，可以使用相对路径，<strong>默认路径是当前项目的根目录</strong></li><li><strong>流使用完一定要在 finally 语句块中关闭</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span><span class="hljs-title">read</span><span class="hljs-params">()</span><span class="hljs-comment">// 从输入流中读取一个字节的数据，返回值是读取到的字符的 ASCII 码，当数据被读完的时候会返回 -1</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span><span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] b)</span><span class="hljs-comment">// 从输入流中读取最多b.length字节的数据到字节数组中，返回值是此次往 byte 数组中存放的字节个数，当数据读完的时候会返回 -1</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span><span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">byte</span>[] b, <span class="hljs-keyword">int</span> off, <span class="hljs-keyword">int</span> len)</span><span class="hljs-comment">// 从输入流中读取多达len字节的数据到一个字节数组中。</span></span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">FileInputStream fileInputStream = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 构造方法中可以放文件的路径</span><br>    <span class="hljs-comment">// 当文件不在 IDEA 项目文件下时，要使用绝对路径</span><br>    <span class="hljs-comment">// 当文件在 IDEA 项目下是，可以使用相对路径，默认路径是当前项目的根目录</span><br>    fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src//cn//yechen//myfile.txt&quot;</span>);<br><br>    <span class="hljs-comment">// 读文件，一次读取一个字节byte，这样内存和硬盘交互太频繁，基本上 时间/资源 都耗费在交互上面了</span><br>    <span class="hljs-keyword">int</span> read = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> ((read = fileInputStream.read()) != -<span class="hljs-number">1</span>) &#123;<br>        System.out.println(read);<span class="hljs-comment">// 这里输出的都是字符的 ASCII 码</span><br>    &#125;<br><br>    <span class="hljs-comment">// 一次读 byte.length 个字节</span><br>    <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">int</span> readCount = <span class="hljs-number">0</span>;<br>    StringBuffer buffer = <span class="hljs-keyword">new</span> StringBuffer();<br>    <span class="hljs-keyword">while</span> ((readCount = fileInputStream.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 使用 String 类的构造方法，将 byte 数组转变为字符串（起始下标为 0， 长度为 reedCount）</span><br>        String string = <span class="hljs-keyword">new</span> String(bytes, <span class="hljs-number">0</span>, readCount);<br>        buffer.append(string);<br>    &#125;<br>    System.out.println(buffer);<br><br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">// 流使用完一定要记得关闭</span><br>    <span class="hljs-comment">// 关闭流的前提是流不是空的，避免空指针异常</span><br>    <span class="hljs-keyword">if</span> (fileInputStream != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="19-2-3-其他方法"><a href="#19-2-3-其他方法" class="headerlink" title="19.2.3 其他方法"></a>19.2.3 其他方法</h4><p><code>int available()</code> ：返回流当中剩余的没有读到的字节数量</p><p><strong>可以在读取小文件的时候将此方法的返回值作为 byte 数组的长度，一次直接读完方放到 byte 数组中。</strong></p><p>但是不适用于读取大文件，因为数组的内存空间是连续的，找不到一块很大的连续内存空间来存放 byte 数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src//cn//yechen//myfile.txt&quot;</span>);<br><br><span class="hljs-keyword">int</span> available = fileInputStream.available();<br>System.out.println(<span class="hljs-string">&quot;还剩多少字节可以读：&quot;</span> + available);<span class="hljs-comment">// 输出：还剩多少字节可以读：119</span><br><br><span class="hljs-keyword">int</span> read = fileInputStream.read();<span class="hljs-comment">// 读了一个字节</span><br>System.out.println(<span class="hljs-string">&quot;还剩多少字节可以读：&quot;</span> + fileInputStream.available());<span class="hljs-comment">// 输出：还剩多少字节可以读：118</span><br><br>myfile.txt -&gt;<br>    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>long skip(long n)</code>： 跳过 n 个字节不读</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src//cn//yechen//myfile02.txt&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;第一次读到：&quot;</span> + fileInputStream.read());<span class="hljs-comment">// 输出：第一次读到：97（a）</span><br><br><span class="hljs-comment">// 跳过三个字节（bcd）</span><br>fileInputStream.skip(<span class="hljs-number">3</span>);<br><br>System.out.println(<span class="hljs-string">&quot;第二次读到：&quot;</span> + fileInputStream.read());<span class="hljs-comment">// 输出：第二次读到：101（e）</span><br><br>myfile02.txt -&gt; <br>    abcdefg<br></code></pre></td></tr></table></figure><h3 id="19-3-FileOutputStream"><a href="#19-3-FileOutputStream" class="headerlink" title="19.3 FileOutputStream"></a>19.3 FileOutputStream</h3><p>文件字节输出流，负责写。</p><p><strong>从内存到硬盘。</strong></p><p><strong>输出流在写完之后一定要记得刷新。</strong></p><p><strong>简单使用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">FileOutputStream fileOutputStream = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 这种方式谨慎使用，这种方式会先将原文件清空，然后重新写入。</span><br>    <span class="hljs-comment">// fileOutputStream = new FileOutputStream(&quot;src//cn//yechen//myfile03.txt&quot;);</span><br>    <span class="hljs-comment">// 以追加的方式在文件末尾写入。不会清空原文件内容。</span><br>    <span class="hljs-comment">// 文件不存在的时候会自动创建</span><br>    fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;src//cn//yechen//myfile03.txt&quot;</span>, <span class="hljs-keyword">true</span>);<br><br>    <span class="hljs-keyword">byte</span>[] bytes = &#123;<span class="hljs-number">97</span>,<span class="hljs-number">98</span>,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>,<span class="hljs-number">101</span>,<span class="hljs-number">102</span>&#125;;<br>    <span class="hljs-comment">// 将 byte 数组写入文件</span><br>    fileOutputStream.write(bytes);<br><br>    String string = <span class="hljs-string">&quot;我是中国人&quot;</span>;<br>    <span class="hljs-comment">// 将 string 字符串先转变为 byte 数组在写入文件</span><br>    <span class="hljs-keyword">byte</span>[] bytes1 = string.getBytes();<br>    fileOutputStream.write(bytes1);<br><br>    <span class="hljs-comment">// 使用完流记得刷新一下</span><br>    fileOutputStream.flush();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">if</span> (fileOutputStream != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileOutputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br><br>myfile03 -&gt;<br>    abcdef我是中国人<br></code></pre></td></tr></table></figure><h3 id="19-4-FileReader-FileWriter"><a href="#19-4-FileReader-FileWriter" class="headerlink" title="19.4 FileReader / FileWriter"></a>19.4 FileReader / FileWriter</h3><p><strong>文件字符输入流，只能读取普通文本。</strong></p><p>读取文本内容时，比较方便，快捷。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">FileReader reader = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 创建字符输入流</span><br>    reader = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;src//cn//yechen//myfile.txt&quot;</span>);<br><br>    <span class="hljs-keyword">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">512</span>];<span class="hljs-comment">// 一次读取 1 MB</span><br>    <span class="hljs-keyword">int</span> readCount = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 开始读</span><br>    <span class="hljs-keyword">while</span> ((readCount = reader.read(chars)) != -<span class="hljs-number">1</span>) &#123;<br>        System.out.println(<span class="hljs-keyword">new</span> String(chars, <span class="hljs-number">0</span>, readCount));<br>    &#125;<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">if</span> (reader != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            reader.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>文件字符输出流。只能输出普通文本。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">FileWriter fileWriter = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 创建字符输出流对象</span><br>    fileWriter = <span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;src//cn//yechen//myfile02.txt&quot;</span>);<br>    <span class="hljs-comment">// 开始写</span><br>    <span class="hljs-keyword">char</span>[] chars = &#123;<span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;是&#x27;</span>, <span class="hljs-string">&#x27;中&#x27;</span>, <span class="hljs-string">&#x27;国&#x27;</span>, <span class="hljs-string">&#x27;人&#x27;</span>, <span class="hljs-string">&#x27;！&#x27;</span>&#125;;<br>    <span class="hljs-comment">// 可以传进char数组</span><br>    fileWriter.write(chars);<br>    <span class="hljs-comment">// 可以传进字符串</span><br>    fileWriter.write(<span class="hljs-string">&quot;我是中国人！&quot;</span>);<br>    <span class="hljs-comment">// 刷新流</span><br>    fileWriter.flush();<br><br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">if</span> (fileWriter != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileWriter.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="19-5-BufferedReader-BufferWriter"><a href="#19-5-BufferedReader-BufferWriter" class="headerlink" title="19.5 BufferedReader / BufferWriter"></a>19.5 BufferedReader / BufferWriter</h3><p><strong>BufferedReader:</strong></p><ul><li>带有缓冲区的字符输入流。</li><li>使用这个流的时候不需要自定义char数组，或者说不需要自定义byte数组。自带缓冲。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">FileReader fileReader = <span class="hljs-keyword">null</span>;<br>BufferedReader bufferedReader = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    fileReader = <span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;src\\io\\copy\\CopyTest01.java&quot;</span>);<br>    <span class="hljs-comment">// 当一个流的构造方法中需要一个流的时候，这个被传进来的流叫做：节点流。</span><br>    <span class="hljs-comment">// 外部负责包装的这个流，叫做：包装流，还有一个名字叫做：处理流。</span><br>    <span class="hljs-comment">// 像当前这个程序来说：FileReader就是一个节点流。BufferedReader就是包装流/处理流。</span><br>    bufferedReader = <span class="hljs-keyword">new</span> BufferedReader(fileReader);<br>    String s;<br>    <span class="hljs-comment">// bufferedReader.readLine()方法读取一个文本行，但不带换行符。</span><br>    <span class="hljs-keyword">while</span> ((s = bufferedReader.readLine()) != <span class="hljs-keyword">null</span>) &#123;<br>        System.out.println(s);<br>    &#125;<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">// 只需要关闭最外层的包装流就行了</span><br>    <span class="hljs-keyword">if</span> (bufferedReader != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            bufferedReader.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>BufferWriter：</strong></p><ul><li>带有缓冲的字符输出流</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">BufferedWriter bufferedWriter = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    bufferedWriter = <span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;src//cn//yechen//myfile02.txt&quot;</span>));<br>    <span class="hljs-comment">// 可以写入一个字符串</span><br>    bufferedWriter.write(<span class="hljs-string">&quot;我是中国人&quot;</span>);<span class="hljs-comment">// 写入：“我是中国人”</span><br><br>    <span class="hljs-comment">// 可以写入一个 char 数组的一部分</span><br>    <span class="hljs-keyword">char</span>[] chars = &#123;<span class="hljs-string">&#x27;我&#x27;</span>,<span class="hljs-string">&#x27;是&#x27;</span>,<span class="hljs-string">&#x27;中&#x27;</span>,<span class="hljs-string">&#x27;国&#x27;</span>,<span class="hljs-string">&#x27;人&#x27;</span>&#125;;<br>    bufferedWriter.write(chars, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<span class="hljs-comment">// 写入：“中国人”</span><br><br>    <span class="hljs-comment">// 刷新输出流</span><br>    bufferWriter.flush();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">if</span> (bufferedWriter != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            bufferedWriter.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>节点流和包装流：</strong></p><p>当一个流的构造方法中需要一个流的时候，这个被传进来的流叫做：节点流。</p><p> 外部负责包装的这个流，叫做：包装流，还有一个名字叫做：处理流。</p><p><strong>关闭流的时候只需要关闭最外层的包装流即可。</strong></p><p>节点流和包装流是相对的。</p><h3 id="19-6-InputStreamReader-OutputStreamWriter"><a href="#19-6-InputStreamReader-OutputStreamWriter" class="headerlink" title="19.6 InputStreamReader / OutputStreamWriter"></a>19.6 InputStreamReader / OutputStreamWriter</h3><p><strong>转换流</strong></p><p><code>InputStreamReader</code> ： 将字节输入流转换为字符输入流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;&quot;</span>);<br>InputStreamReader inputStreamReader = <span class="hljs-keyword">new</span> InputStreamReader(fileInputStream);<br></code></pre></td></tr></table></figure><p><code>OutputStreamWriter</code> ： 将字节输出流转换为字符输出流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">FileOutputStream fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;&quot;</span>);<br>OutputStreamWriter outputStreamWriter = <span class="hljs-keyword">new</span> OutputStreamWriter(fileOutputStream);<br></code></pre></td></tr></table></figure><h3 id="19-7-DataOutputStream-DataInputStream"><a href="#19-7-DataOutputStream-DataInputStream" class="headerlink" title="19.7 DataOutputStream / DataInputStream"></a>19.7 DataOutputStream / DataInputStream</h3><p><strong>DataOutputStream：</strong>数据专属的流</p><p>这个流可以将数据连同数据的类型一并写入文件。</p><p>注意：这个文件不是普通文本文档。（这个文件使用记事本打不开。）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">DataOutputStream dataOutputStream = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    dataOutputStream = <span class="hljs-keyword">new</span> DataOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;data&quot;</span>));<br>    <span class="hljs-comment">// 写数据</span><br>    <span class="hljs-keyword">byte</span> b = <span class="hljs-number">13</span>;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">1000</span>;<br>    <span class="hljs-keyword">double</span> d = <span class="hljs-number">222</span>;<br>    <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>;<br><br>    <span class="hljs-comment">// 写</span><br>    dataOutputStream.writeByte(b);<br>    dataOutputStream.writeInt(i);<br>    dataOutputStream.writeDouble(d);<br>    dataOutputStream.writeBoolean(flag);<br>    dataOutputStream.writeChar(c);<br><br>    <span class="hljs-comment">// 刷新数据流</span><br>    dataOutputStream.flush();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">if</span> (dataOutputStream != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            dataOutputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>DataInputStream：</strong> 数据字节输入流</p><p>DataOutputStream 写的文件，只能使用 DataInputStream 去读。并且读的时候你需要提前知道写入的顺序。</p><p>读的顺序需要和写的顺序一致。才可以正常取出数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">DataInputStream dataInputStream = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    dataInputStream = <span class="hljs-keyword">new</span> DataInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;data&quot;</span>));<br>    <span class="hljs-comment">// 开始读</span><br>    <span class="hljs-keyword">byte</span> b = dataInputStream.readByte();<br>    <span class="hljs-keyword">int</span> i = dataInputStream.readInt();<br>    <span class="hljs-keyword">double</span> v = dataInputStream.readDouble();<br>    <span class="hljs-keyword">boolean</span> b1 = dataInputStream.readBoolean();<br>    <span class="hljs-keyword">char</span> c = dataInputStream.readChar();<br><br>    <span class="hljs-comment">// 输出</span><br>    System.out.println(b);<br>    System.out.println(i);<br>    System.out.println(v);<br>    System.out.println(b1);<br>    System.out.println(c);<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">if</span> (dataInputStream != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            dataInputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="19-8-PrintStream"><a href="#19-8-PrintStream" class="headerlink" title="19.8 PrintStream"></a>19.8 PrintStream</h3><p>标准的字节输出流。<strong>默认输出到控制台</strong>。</p><p>标准输出流<strong>不需要手动close()关闭</strong>。</p><p>可以改变标准输出流的输出方向。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 记录标准输出流的默认输出方向（到控制台）</span><br>PrintStream printStream = System.out;<br><span class="hljs-comment">// 改变输出方向</span><br>System.setOut(<span class="hljs-keyword">new</span> PrintStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;log&quot;</span>, <span class="hljs-keyword">true</span>)));<span class="hljs-comment">// 为了方便已经抛出异常</span><br><span class="hljs-comment">// 输出到指定路径</span><br>System.out.println(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;lisi&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;wangwu&quot;</span>);<br><span class="hljs-comment">// 输出到控制台</span><br>printStream.println(<span class="hljs-number">1</span>);<br>printStream.println(<span class="hljs-number">2</span>);<br>printStream.println(<span class="hljs-number">3</span>);<br><br><span class="hljs-comment">// log文件输出</span><br>zhangsan<br>lisi<br>wangwu<br>    <br><span class="hljs-comment">// 控制台输出</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><strong>可以写一个类来打印日志信息，日志信息存放在一个文件中</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLog</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printLog</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 改变标准输出流的输出方向</span><br>            System.setOut(<span class="hljs-keyword">new</span> PrintStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;log&quot;</span>, <span class="hljs-keyword">true</span>)));<br>            <span class="hljs-comment">// 获取当前时间</span><br>            <span class="hljs-keyword">long</span> nowTimeMillis = System.currentTimeMillis();<br>            Date date = <span class="hljs-keyword">new</span> Date(nowTimeMillis);<br>            SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);<br>            String nowTimeStr = simpleDateFormat.format(date);<br>            <span class="hljs-comment">// 输出日志信息</span><br>            System.out.println(nowTimeStr + <span class="hljs-string">&quot;：&quot;</span> + msg);<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="19-9-File"><a href="#19-9-File" class="headerlink" title="19.9 File"></a>19.9 File</h3><p><strong>File类和四大家族没有关系</strong>，所以File类不能完成文件的读和写。</p><p>File对象代表：<strong>文件和目录路径名的抽象表示形式。</strong></p><ul><li>一个目录是一个 File 对象</li><li>一个文件也是一个 File 对象</li></ul><p><strong>一个File对象有可能对应的是目录，也可能是文件。File只是一个路径名的抽象表示形式。</strong></p><h4 id="File类中常用的方法："><a href="#File类中常用的方法：" class="headerlink" title="File类中常用的方法："></a>File类中常用的方法：</h4><ol><li>创建一个 File 对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\Code\\Java&quot;</span>);<span class="hljs-comment">// 构造方法中跟目录路径或是文件路径，可以存在，也可以不存在</span><br></code></pre></td></tr></table></figure><ol start="2"><li><code>boolean exists()</code> ：判断当前目录或文件<strong>是否存在</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">boolean</span> isExists = file.exists();<br></code></pre></td></tr></table></figure><ol start="3"><li><code>boolean createNewFile()</code>：<strong>当且仅当具有此名称的文件还不存在时</strong>，才会自动创建一个以该抽象路径名命名的<strong>新空文件</strong>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 如果当前路径 目录或文件不存在</span><br><span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>    <span class="hljs-comment">// 以文件的形式创建出来</span><br>    file.createNewFile();<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li><code>boolean mkdir()</code>：创建以这个抽象路径名命名的<strong>目录</strong>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 如果当前路径 目录或文件不存在</span><br><span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>    <span class="hljs-comment">// 以目录的形式创建出来</span><br>    file.mkdir();<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li><code>boolean mkdirs()</code> ： 创建以这个抽象路径名命名的目录，<strong>包括任何必要但不存在的父目录</strong>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">File file02 = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\a\\b\\c&quot;</span>);<br><span class="hljs-keyword">if</span> (!file02.exists()) &#123;<br>    file02.mkdirs();<br>&#125;<br></code></pre></td></tr></table></figure><ol start="6"><li><code>String    getParent()</code> : <strong>返回这个抽象路径名的父路径名字符串</strong>，如果这个路径名没有指定父目录，则返回null。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\Code\\Java\\JavaLearning&quot;</span>);<br>String parent = file.getParent();<br>System.out.println(parent);<span class="hljs-comment">// D:\Code\Java</span><br></code></pre></td></tr></table></figure><ol start="7"><li><code>File getParentFile()</code> ： <strong>返回这个抽象路径名的父目录的抽象路径名</strong>，如果这个路径名没有指定父目录，则返回null。</li><li><code>String getPath()</code> ：将这个抽象的路径名转换为<strong>一个路径名字符串</strong>。</li><li><code>String    getAbsolutePath()</code> ：返回这个抽象路径名的<strong>绝对路径名字符串。</strong></li><li><code>File getAbsoluteFile()</code> ：返回这个抽象路径名的<strong>绝对形式</strong>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;src//cn//yechen&quot;</span>);<span class="hljs-comment">// 以 IDEA 根目录为默认路径的 目录</span><br>File parentFile = file.getParentFile();<br>System.out.println(parentFile.getPath());<span class="hljs-comment">// src\cn</span><br>System.out.println(parentFile.getAbsolutePath());<span class="hljs-comment">// C:\Users\30117\Desktop\Demo\src\cn</span><br>File absoluteFile = file.getAbsoluteFile();<br>System.out.println(absoluteFile.getPath());<span class="hljs-comment">// C:\Users\30117\Desktop\Demo\src\cn\yechen</span><br></code></pre></td></tr></table></figure><ol start="11"><li><code>String    getName()</code> ：返回由这个抽象路径名表示的<strong>文件或目录的名称</strong>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;src//cn//yechen&quot;</span>);<span class="hljs-comment">// 以 IDEA 根目录为默认路径的 目录</span><br>System.out.println(file.getName());<span class="hljs-comment">// Yechen</span><br></code></pre></td></tr></table></figure><ol start="12"><li><p><code>boolean isDirectory()</code> ： 测试此抽象路径名表示的文件<strong>是否为目录</strong>。</p></li><li><p><code>boolean isFile()</code> ：测试此抽象路径名表示的文件<strong>是否为普通文件</strong>。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;src//cn//yechen&quot;</span>);<span class="hljs-comment">// 以 IDEA 根目录为默认路径的 目录</span><br>System.out.println(file.isFile());<span class="hljs-comment">// false</span><br>System.out.println(file.isDirectory());<span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ol start="14"><li><code>long lastModified()</code> ：返回这个抽象路径名所表示的文件<strong>最后一次修改的时间。</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\Java基础知识篇.pdf&quot;</span>);<br><span class="hljs-keyword">long</span> lastModified = file.lastModified();<span class="hljs-comment">// 这个毫秒是从1970年到现在的总毫秒数。</span><br>Date date = <span class="hljs-keyword">new</span> Date(lastModified);<br>SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);<br>String timeStr = simpleDateFormat.format(date);<br>System.out.println(timeStr);<span class="hljs-comment">// 2020-05-25 09:05:53 000</span><br></code></pre></td></tr></table></figure><ol start="15"><li><code>long length()</code> ：返回由这个抽象路径名表示的<strong>文件的长度（字节）</strong>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\Java基础知识篇.pdf&quot;</span>);<br>System.out.println(file.length());<span class="hljs-comment">// 2416894 </span><br></code></pre></td></tr></table></figure><ol start="16"><li><code>File[]    listFiles()</code> ：返回一个<strong>抽象路径名数组</strong>，它表示由这个抽象路径名指定的<strong>目录中的文件</strong>。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">File file = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;src//cn//yechen&quot;</span>);<br>File[] files = file.listFiles();<br><span class="hljs-comment">// 编历 files</span><br><span class="hljs-keyword">for</span> (File file1 : files) &#123;<br>    System.out.println(file1.getAbsolutePath());<span class="hljs-comment">// 输出目录中文件的绝对路径</span><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">C:\Users\30117\Desktop\Demo\src\cn\yechen\collection</span><br><span class="hljs-comment">        C:\Users\30117\Desktop\Demo\src\cn\yechen\Link</span><br><span class="hljs-comment">        C:\Users\30117\Desktop\Demo\src\cn\yechen\myfile.txt</span><br><span class="hljs-comment">        C:\Users\30117\Desktop\Demo\src\cn\yechen\myfile02.txt</span><br><span class="hljs-comment">        C:\Users\30117\Desktop\Demo\src\cn\yechen\myfile03.txt</span><br><span class="hljs-comment">        C:\Users\30117\Desktop\Demo\src\cn\yechen\MyLog.java</span><br><span class="hljs-comment">        C:\Users\30117\Desktop\Demo\src\cn\yechen\Test.java</span><br><span class="hljs-comment">        C:\Users\30117\Desktop\Demo\src\cn\yechen\Test01</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="19-10-ObjectInputStream-ObjectOutputStream"><a href="#19-10-ObjectInputStream-ObjectOutputStream" class="headerlink" title="19.10 ObjectInputStream / ObjectOutputStream"></a>19.10 ObjectInputStream / ObjectOutputStream</h3><h4 id="19-10-1-序列化和反序列化"><a href="#19-10-1-序列化和反序列化" class="headerlink" title="19.10.1 序列化和反序列化"></a>19.10.1 序列化和反序列化</h4><ul><li>序列化（Serialize）：将 java 对象从内存中存储到文件中，将 java 对象的状态保存下来的过程。</li><li>反序列化（DeSerialize）：将硬盘上的数据重新恢复到内存中，恢复成 java 对象。</li></ul><p><img src="https://img-blog.csdnimg.cn/20210224160626327.png" alt="003-对象的序列化和反序列化"></p><p>**==参与序列化的类型必须实现 <code>java.io.Serilizable</code> 接口（只是一个标志，不用重写方法==**）</p><p>起到标识的作用，标志的作用，java虚拟机看到这个类实现了这个接口，可能会对这个类进行特殊待遇。Serializable这个标志接口是给java虚拟机参考的，<strong>java虚</strong></p><p><strong>拟机看到这个接口之后，会为该类自动生成一个序列化版本号。</strong></p><p><strong>序列化版本号有什么用呢：</strong></p><p>java虚拟机识别一个类的时候先通过类名，<strong>如果类名一致，再通过序列化版本号</strong>。不同的人编写了同一个类，但“这两个类确实不是同一个类”。这个时候序列化版本就起上区分的作用了。</p><p>但是对于一个类来说，使用自动序列化版本号之后如果要再次改动代码，重新编译后就会生成不同的序列化版本号，虚拟机就会认为是一个全新的类，就会出现问题。</p><p><strong>所以，凡是一个类实现了Serializable接口，建议给该类==提供一个固定不变的序列化版本号==。这样，以后这个类即使代码修改了，但是版本号不变，java虚拟机会认为是同一个类。</strong></p><p><strong>IDEA自动生成固定不变的序列化版本号：</strong></p><p><img src="https://img-blog.csdnimg.cn/2021022417081334.png" alt="image-20210224170751366"></p><p><img src="https://img-blog.csdnimg.cn/20210224171046816.png" alt="image-20210224171032375"></p><p><code>transient</code> <strong>修饰符修饰的属性不参与序列化，该类对象序列化后取出来属性赋类型默认值。</strong></p><h4 id="19-10-2-使用"><a href="#19-10-2-使用" class="headerlink" title="19.10.2 使用"></a>19.10.2 使用</h4><p><strong>序列化 / 反序列化单个对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 先不管异常，直接抛出</span><br><span class="hljs-comment">// 使用自动序列化版本号</span><br><br><span class="hljs-comment">// 序列化</span><br>ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;student&quot;</span>));<br>objectOutputStream.writeObject(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">20</span>));<br>objectOutputStream.flush();<br>objectOutputStream.close();<br><br><span class="hljs-comment">// 反序列化</span><br>ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;student&quot;</span>));<br>Object o = objectInputStream.readObject();<br>System.out.println(o);<span class="hljs-comment">// 输出：Student&#123;name=&#x27;zhangsan&#x27;, age=20&#125;</span><br>objectInputStream.close();<br></code></pre></td></tr></table></figure><p><strong>序列化 / 反序列化多个对象（将对象放在集合中）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 先不管异常，直接抛出</span><br><span class="hljs-comment">// 使用自动序列化版本号</span><br><br><span class="hljs-comment">// 序列化</span><br>ObjectOutputStream objectOutputStream = <span class="hljs-keyword">new</span> ObjectOutputStream(<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;student&quot;</span>));<br>List&lt;Student&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">20</span>));<br>list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;lisi&quot;</span>, <span class="hljs-number">21</span>));<br>list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;wangwu&quot;</span>, <span class="hljs-number">22</span>));<br>objectOutputStream.writeObject(list);<br>objectOutputStream.flush();<br>objectOutputStream.close();<br><br><span class="hljs-comment">// 反序列化</span><br>ObjectInputStream objectInputStream = <span class="hljs-keyword">new</span> ObjectInputStream(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;student&quot;</span>));<br>Object o = objectInputStream.readObject();<br><span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> List) &#123;<br>    List&lt;Student&gt; list = (List&lt;Student&gt;) o;<br>    <span class="hljs-keyword">for</span> (Student student : list) &#123;<br>        System.out.println(student);<br>    &#125;<br>&#125;<br>objectInputStream.close();<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">Student&#123;name=&#x27;zhangsan&#x27;, age=20&#125;</span><br><span class="hljs-comment">        Student&#123;name=&#x27;lisi&#x27;, age=21&#125;</span><br><span class="hljs-comment">        Student&#123;name=&#x27;wangwu&#x27;, age=22&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="19-10-3-对序列化版本号的理解"><a href="#19-10-3-对序列化版本号的理解" class="headerlink" title="19.10.3 对序列化版本号的理解"></a>19.10.3 对序列化版本号的理解</h4><p>当一个类实现了 Serializable 接口后，java 虚拟机会自动给这个类加上一个序列化版本号。</p><p>当该类对象进行序列化之后，之后如果要修改该类中的代码，然后直接对之前的文件进行反序列化，会出现异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.io.InvalidClassException: （无效的类异常）<br>cn.yechen.test.Student; <br>local <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">incompatible</span>: <span class="hljs-title">stream</span> <span class="hljs-title">classdesc</span> <span class="hljs-title">serialVersionUID</span> </span>= -<span class="hljs-number">8149392996694432981</span>, <br>local <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">serialVersionUID</span> </span>= <span class="hljs-number">2278957827885088367</span><br></code></pre></td></tr></table></figure><p><strong>这是由于类修改了之后，该类在重新编译之后，序列化版本号与文件中保存的版本号不同了，因此出现异常，不能反序列化。</strong></p><p>因此推荐自己给该类提供一个固定不变的序列化版本号，之后类发生改变，版本号还是一样的。</p><p><strong>反序列化得到的信息是与==当前类==中的特征是一样的，不是之前存了多少现在就拿出来多少，例如：如果属性多了，就会给多是属性赋上默认值，如果属性少了，就不会在出现了。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 改动前</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">68497944707546340L</span>;<br>    String name;<br>    <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 序列化 / 反序列化之后输出：</span><br>Student&#123;name=<span class="hljs-string">&#x27;zhangsan&#x27;</span>, age=<span class="hljs-number">20</span>&#125;<br><br><span class="hljs-comment">// 修改后，并且不在序列化</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">68497944707546340L</span>;<br>    String name;<br>    <span class="hljs-keyword">int</span> age;<br>    String address;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age, String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.address = address;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, address=&#x27;&quot;</span> + address + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 反序列化之后，输出</span><br>Student&#123;name=<span class="hljs-string">&#x27;zhangsan&#x27;</span>, age=<span class="hljs-number">20</span>, address=<span class="hljs-string">&#x27;null&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="19-11-文件复制"><a href="#19-11-文件复制" class="headerlink" title="19.11 文件复制"></a>19.11 <strong>文件复制</strong></h3><h4 id="19-11-1-单个文件的复制粘贴"><a href="#19-11-1-单个文件的复制粘贴" class="headerlink" title="19.11.1 单个文件的复制粘贴"></a>19.11.1 单个文件的复制粘贴</h4><p><strong>使用 FileInputStream 和 FileOutputStream 一边读一边写</strong>（先要将文件读到内存中，再从内从中将文件写到指定路径下）</p><p>如果程序没问题，但是复制不成功，出现异常</p><p><code>java.io.FileNotFoundException: C:\Java基础知识篇.pdf (拒绝访问。)</code></p><p>可以将 IDEA 或命令行工具使用<strong>管理员身份</strong>打开。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将文件 D:\Java基础知识篇.pdf 拷贝到 C盘下</span><br><span class="hljs-comment">// 创建输入流</span><br>FileInputStream fileInputStream = <span class="hljs-keyword">null</span>;<br><span class="hljs-comment">// 创建输出流</span><br>FileOutputStream fileOutputStream = <span class="hljs-keyword">null</span>;<br><br><span class="hljs-keyword">try</span> &#123;<br>    fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;D:\\Java基础知识篇.pdf&quot;</span>);<br>    fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;C:\\Java基础知识篇.pdf&quot;</span> );<br><br>    <span class="hljs-comment">// 记录开始时间</span><br>    <span class="hljs-keyword">long</span> begin = System.currentTimeMillis();<br><br>    <span class="hljs-comment">// 核心部分：一边读，一边写</span><br>    <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<span class="hljs-comment">// 一次读 1 MB</span><br>    <span class="hljs-keyword">int</span> readCount = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 一边读</span><br>    <span class="hljs-keyword">while</span> ((readCount = fileInputStream.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 一边写</span><br>        fileOutputStream.write(bytes, <span class="hljs-number">0</span>, readCount);<br>    &#125;<br><br>    <span class="hljs-comment">// 输出流刷新</span><br>    fileOutputStream.flush();<br><br>    <span class="hljs-comment">// 记录结束时间</span><br>    <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>    System.out.println(<span class="hljs-string">&quot;复制总共花费：&quot;</span> + (end - begin) + <span class="hljs-string">&quot; 毫秒&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">// 两个异常要分开解决，如果一起 try 的话，一个流出现异常，另一个流就关闭不了了</span><br>    <span class="hljs-keyword">if</span> (fileInputStream != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (fileOutputStream != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileOutputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="19-11-2-目录-文件的复制粘贴"><a href="#19-11-2-目录-文件的复制粘贴" class="headerlink" title="19.11.2 目录 + 文件的复制粘贴"></a>19.11.2 目录 + 文件的复制粘贴</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">// 拷贝目录 + 文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 复制源</span><br>        File srcFile = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\temp&quot;</span>);<br>        <span class="hljs-comment">// 复制目标</span><br>        File destFile = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\temp02&quot;</span>);<br>        <span class="hljs-comment">// 复制方法</span><br>        copy(srcFile, destFile);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 复制目录方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> srcFile 复制源</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> destFile 复制目标</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copy</span><span class="hljs-params">(File srcFile, File destFile)</span> </span>&#123;<br>        <span class="hljs-comment">// 如果源文件是一个文件（不是目录），就进行文件的复制粘贴</span><br>        <span class="hljs-keyword">if</span> (srcFile.isFile()) &#123;<br>            <span class="hljs-comment">// 拼接目标路径（目标路径 + &quot;\\&quot; + 当前文件路径减掉前面 3 个字符（即盘符 D:\））</span><br>            String newFilePath = destFile.getAbsolutePath() + <span class="hljs-string">&quot;\\&quot;</span> + srcFile.getAbsolutePath().substring(<span class="hljs-number">3</span>);<br>            <span class="hljs-comment">// 将目标路径封装成 file 对象，传入文件拷贝方法</span><br>            File file = <span class="hljs-keyword">new</span> File(newFilePath);<br>            copyFile(srcFile, file);<br>            <span class="hljs-comment">// 直接退出当前方法</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 程序走到了代表当前文件是一个目录</span><br>        <span class="hljs-comment">// 获取子目录</span><br>        File[] files = srcFile.listFiles();<br>        <span class="hljs-keyword">for</span> (File file : files) &#123;<br>            <span class="hljs-comment">// 如果字目录是一个目录</span><br>            <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>                <span class="hljs-comment">// 拼接目标路径（目标路径 + &quot;\\&quot; + 当前文件路径减掉前面 3 个字符（即盘符 D:\））</span><br>                String newFilePath = destFile.getAbsolutePath() + <span class="hljs-string">&quot;\\&quot;</span> + file.getAbsolutePath().substring(<span class="hljs-number">3</span>);<br>                <span class="hljs-comment">// 将目标路径封装成 file 对象</span><br>                File file1 = <span class="hljs-keyword">new</span> File(newFilePath);<br>                <span class="hljs-comment">// 以目录形式创建</span><br>                <span class="hljs-keyword">if</span> (!file1.exists()) &#123;<br>                    file1.mkdirs();<span class="hljs-comment">// 这里一定啊要注意，是创建多层目录！！！！！！</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 进行递归，将当前目录和目标目录传进去</span><br>            copy(file, destFile);<br>        &#125;<br>     &#125;<br>     <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 文件拷贝方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> srcFile 复制源</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> destFile 复制目标</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">copyFile</span><span class="hljs-params">(File srcFile, File destFile)</span> </span>&#123;<br>        FileInputStream fileInputStream = <span class="hljs-keyword">null</span>;<br>        FileOutputStream fileOutputStream = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(srcFile);<br>            fileOutputStream = <span class="hljs-keyword">new</span> FileOutputStream(destFile);<br>            <span class="hljs-comment">// 一边写一边读</span><br>            <span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>];<span class="hljs-comment">// 一次读 1 MB</span><br>            <span class="hljs-keyword">int</span> readCount = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> ((readCount = fileInputStream.read(bytes)) != -<span class="hljs-number">1</span>) &#123;<br>                fileOutputStream.write(bytes, <span class="hljs-number">0</span>, readCount);<br>            &#125;<br>            <span class="hljs-comment">// 刷新输出流</span><br>            fileOutputStream.flush();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (fileInputStream != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fileInputStream.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (fileOutputStream != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    fileOutputStream.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="19-12-IO-Properties的联合应用"><a href="#19-12-IO-Properties的联合应用" class="headerlink" title="19.12 IO+Properties的联合应用"></a>19.12 IO+Properties的联合应用</h3><p>IO流：文件的读和写。</p><p>Properties:是一个Map集合，key和value都是String类型。</p><p><strong>以后经常改变的数据，可以单独写到一个文件中，使用程序动态读取</strong>。 将来只需要修改这个文件的内容，java代码不需要改动，不需要重新编译，服务器也不需要重启。就可以拿到动态的信息。<strong>类似于以上机制的这种文件被称为==配置文件==。</strong></p><p>当配置文件中的内容格式是：</p><p>key1=value1</p><p>key2=value2</p><p>…</p><p>时，我们把这种配置文件叫做**==属性配置文件==**。</p><p>java规范中有要求：<strong>属性配置文件建议以 <code>.properties</code> 结尾</strong>，但这不是必须的。</p><p><code>Properties</code>  类就是专门存放属性配置文件内容的一个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">FileInputStream fileInputStream = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 新建一个输入流对象</span><br>    fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src\\userinfo.properties&quot;</span>);<br>    <span class="hljs-comment">// 新建一个 Map 集合</span><br>    Properties properties = <span class="hljs-keyword">new</span> Properties();<br>    <span class="hljs-comment">// 调用 Properties 对象的 load 方法将文件中的数据加载到 Map 集合中。</span><br>    <span class="hljs-comment">// 文件中的数据顺着管道加载到Map集合中，其中等号左边做 key，右边做 value</span><br>    properties.load(fileInputStream);<br><br>    <span class="hljs-comment">// 通过 key 获取 value</span><br>    System.out.println(properties.getProperty(<span class="hljs-string">&quot;username&quot;</span>));<br>    System.out.println(properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>));<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>    e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">if</span> (fileInputStream != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileInputStream.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>18、集合</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E9%9B%86%E5%90%88/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="18-1-集合概述"><a href="#18-1-集合概述" class="headerlink" title="18.1 集合概述"></a>18.1 集合概述</h3><h4 id="18-1-1-什么是集合"><a href="#18-1-1-什么是集合" class="headerlink" title="18.1.1 什么是集合"></a>18.1.1 什么是集合</h4><ul><li><p>集合实际上就是一个**==容器==**。可以来容纳其它类型的数据。</p></li><li><p>集合不能直接存储基本数据类型，另外集合也不能直接存储java对象，</p><p>**==集合当中存储的都是java对象的内存地址==**。（或者说集合中存储的是引用。）</p></li><li><p>集合在java中本身是一个容器，是一个**==对象==**</p></li></ul><p><img src="https://img-blog.csdnimg.cn/20210218120728216.png" alt="001-集合中存储的是对象的内存地址"></p><h4 id="18-1-2-在java中每一个不同的集合，底层会对应不同的数据结构"><a href="#18-1-2-在java中每一个不同的集合，底层会对应不同的数据结构" class="headerlink" title="18.1.2 在java中每一个不同的集合，底层会对应不同的数据结构"></a>18.1.2 在java中每一个不同的集合，底层会对应不同的数据结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> ArratList(); <span class="hljs-comment">// 创建一个集合对象，底层是数组</span><br><span class="hljs-keyword">new</span> LinkList();<span class="hljs-comment">// 创建一个集合对象，底层是链表</span><br><span class="hljs-keyword">new</span> TreeSet();<span class="hljs-comment">// 创建一个集合对象，底层是二叉树</span><br></code></pre></td></tr></table></figure><h4 id="18-1-3-集合继承结构"><a href="#18-1-3-集合继承结构" class="headerlink" title="18.1.3 集合继承结构"></a>18.1.3 集合继承结构</h4><p><strong>java 中集合分为两类：</strong></p><ul><li>一类是==单个方式==存储元素： </li></ul><p>单个方式存储元素，这一类集合中<strong>超级父接口：java.util.Collection</strong>;</p><p> <img src="https://img-blog.csdnimg.cn/20210218131441367.png" alt="Collection集合继承结构图"></p><ul><li><p>一类是以==键值对儿的方式==存储元素 </p><p>以键值对的方式存储元素，这一类集合中<strong>超级父接口：java.util.Map</strong>;</p></li></ul><p> <img src="https://img-blog.csdnimg.cn/2021021813340813.png" alt="Map集合的继承结构图"></p><p><strong>总结：</strong></p><p><strong>实现类：</strong></p><blockquote><p><strong>[ArrayList](####18.3.1 ArrayList)：底层是数组；</strong></p><p><strong>[LinkedList](####18.3.2 LinkList )：底层是双向链表；</strong></p><p><strong>[Vector](####18.3.3 Vector（不常用）)：底层是数组，是线程安全的，效率较低，使用较少；</strong></p><p><strong>[HashSet](####18.6.2 HashSet / HashMap )：底层使用的是 HashMap，放到 HashSet 中的元素等同于放到 HashMap 集合中的 key 部分了；</strong></p><p><strong>[TreeSet](####18.6.5 TreeSet / TreeMap)：底层是 TreeMap，放到 TreeSet 集合中的元素等同于放到 TreeMap 集合中的 key 部分了；</strong></p><p><strong>[HashMap](####18.6.2 HashSet / HashMap )：底层是哈希表；</strong></p><p><strong>[HashTable](####18.6.3 HashTable)：底层是哈希表，只不过是线程安全的，效率较低，使用较少；</strong></p><p><strong>[Properties](####18.6.4 Properties)：是 HashTable 的子类，是线程安全的，并且 key 和 value 只能存储字符串 String 类型；</strong></p><p><strong>[TreeMap](####18.6.5 TreeSet / TreeMap)：底层是二叉树，TreeMap 集合的 key 可以自动按照大小顺序排序。</strong></p></blockquote><p><strong>[List](####18.3.1 List 接口) 集合存储元素的特点：有序可重复</strong></p><blockquote><p>有序：存进去的顺序和取出来的顺序相同，每一个元素都有下标。</p><p>可重复：可以存进去两个相同的元素，例如：存进去 1，可以再存进去 1。</p></blockquote><p><strong>[Set（Map）](####18.6.1 Map 接口)集合存储元素的特点：无序不可重复</strong></p><blockquote><p>无序：存进去的顺序和取出来的顺序不一定相同，另外 Set 集合中的元素没有下标。</p><p>不可重复：不可以存进去两个相同的元素。</p></blockquote><p><strong>SortedSet（SortedMap）集合存储元素的特点：无序不可重复，元素可排序</strong></p><blockquote><p>无序：存进去的顺序和取出来的顺序不一定相同，另外 Set 集合中的元素没有下标。</p><p>不可重复：不可以存进去两个相同的元素。</p><p>可排序：可以按照 Key 的大小顺序排序。</p></blockquote><p><strong>Map集合中的Key，就是一个Set集合。</strong></p><p><strong>往Set集合中放数据，实际上放到了Map集合的Key部分。</strong></p><h3 id="18-2-Collection-和-Iterator"><a href="#18-2-Collection-和-Iterator" class="headerlink" title="18.2 Collection 和 Iterator"></a>18.2 Collection 和 Iterator</h3><h4 id="18-2-1-Collection集合"><a href="#18-2-1-Collection集合" class="headerlink" title="18.2.1 Collection集合"></a>18.2.1 Collection集合</h4><p><strong>Collection 中可以存放什么元素：</strong></p><blockquote><p>没有使用“泛型”之前，Collection中可以存储Object的所有子类型。</p><p>使用了“泛型”之后，Collection中只能存储某个具体的类型。</p><p>集合中不能直接存储基本数据类型，也不能存 java 对象，只是存储 java 对象的内存地址。</p></blockquote><p><strong>Collection 中的常用方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(Object e)</span> <span class="hljs-comment">// 向集合中 末尾 添加元素</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span>  <span class="hljs-comment">// 获取集合中元素的个数</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> <span class="hljs-comment">// 清空集合</span></span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(Object o)</span> <span class="hljs-comment">// 判断当前集合中是否包含元素o，包含返回true，不包含返回false</span></span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">remove</span><span class="hljs-params">(Object o)</span> <span class="hljs-comment">// 删除集合中的某个元素。</span></span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span>  <span class="hljs-comment">// 判断该集合中元素的个数是否为0</span></span><br><span class="hljs-function">Object[] <span class="hljs-title">toArray</span><span class="hljs-params">()</span>  <span class="hljs-comment">// 调用这个方法可以把集合转换成数组。【作为了解，使用不多。】</span></span><br></code></pre></td></tr></table></figure><p><strong>contains源码分析</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试程序</span><br>Collection collection = <span class="hljs-keyword">new</span> ArrayList();<br><br>String s1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;abc&quot;</span>);<br>String s2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;def&quot;</span>);<br>String s3 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;abc&quot;</span>);<br><br>collection.add(s1);<br>collection.add(s2);<br><br><span class="hljs-keyword">boolean</span> result = collection.contains(s3);<br>System.out.println(result);<span class="hljs-comment">// 输出：true</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021021815361690.png" alt="image-20210218153600561"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 源码</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">contains</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>    <span class="hljs-comment">// 如果indexOf方法返回的值大于等于 0，就返回 true，表示包含</span><br>    <span class="hljs-keyword">return</span> indexOf(o) &gt;= <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">indexOf</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>    <span class="hljs-comment">// 如果传进来的元素是 null</span><br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-comment">// 编历数组，存在 null值就返回下标</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>            <span class="hljs-keyword">if</span> (elementData[i]==<span class="hljs-keyword">null</span>)<br>                <span class="hljs-keyword">return</span> i;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 编历数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++)<br>            <span class="hljs-comment">// 使用 equals() 来判断对象中的内容是否相同，不以内存地址为判断标准</span><br>            <span class="hljs-comment">// 当然前提条件是当前类重写了 equals() 方法，否则比较的还是内存地址</span><br>            <span class="hljs-keyword">if</span> (o.equals(elementData[i]))<br>                <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>结论：contains方法中是使用 equals()  方法来判断两个对象是否相等的，所有存放在 集合中的对象一定要重写 equals() 方法。</strong></p><p>​            <strong>remove方法底层也是调用 equals() 方法来判断两个对象是否相等的。</strong></p><h4 id="18-2-2-Iterator迭代器"><a href="#18-2-2-Iterator迭代器" class="headerlink" title="18.2.2 Iterator迭代器"></a><strong>18.2.2 Iterator迭代器</strong></h4><p>==Collection 接口继承 Iterable 接口，继承了 Iterator() 方法，会返回一个 Iterator 类型的迭代器，用于 Collection 的编历。（在 Map 中不能用）==</p><p><strong>迭代器 Iterator 中的方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span><span class="hljs-comment">// 如果仍有元素可以迭代，则返回 true。</span></span><br><span class="hljs-function">Object <span class="hljs-title">next</span><span class="hljs-params">()</span><span class="hljs-comment">// 返回迭代的下一个元素。</span></span><br></code></pre></td></tr></table></figure><p><strong>迭代器执行过程：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建集合</span><br>Collection collection = <span class="hljs-keyword">new</span> ArrayList();<br><span class="hljs-comment">// 添加元素</span><br>collection.add(<span class="hljs-number">100</span>);<br>collection.add(<span class="hljs-number">3.14</span>);<br>collection.add(<span class="hljs-string">&quot;abc&quot;</span>);<br>collection.add(<span class="hljs-keyword">new</span> Object());<br><span class="hljs-comment">// 使用Iterator迭代器对集合编历</span><br><span class="hljs-comment">// 第一步：获取集合迭代器对象</span><br>Iterator iterator = collection.iterator();<br><span class="hljs-comment">// 第二步：通过迭代器对象开始编历集合</span><br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>    Object obj = iterator.next();<br>    System.out.println(obj);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210218143913522.png" alt="image-20210218143857008"></p><ul><li><p><strong>迭代集合过程中用 remove() 方法会出现异常，要使用迭代器的 remove 方法</strong></p><p>在迭代集合元素的过程中，不能调用集合对象的 remove 方法，删除元素：<code>collection.remove(o)</code>; 迭代过程中不能这样。否则会出现：<code>java.util.ConcurrentModificationException</code> (<strong>当集合的结构发生改变时，迭代器必须重新获取</strong>)</p><p><strong>在迭代元素的过程当中，一定要使用迭代器 Iterator 的 remove 方法，删除元素，不要使用集合自带的remove方法删除元素。</strong></p><p><a href="https://www.bilibili.com/video/BV1Rx411876f?p=677">视频讲解</a></p></li></ul><h3 id="18-3-List-接口及其实现类"><a href="#18-3-List-接口及其实现类" class="headerlink" title="18.3 List 接口及其实现类"></a>18.3 List 接口及其实现类</h3><h4 id="18-3-1-List-接口"><a href="#18-3-1-List-接口" class="headerlink" title="18.3.1 List 接口"></a>18.3.1 List 接口</h4><p><strong>List 集合存储元素特点：有序可重复</strong></p><p><strong>List 接口特有的方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, Object element)</span><span class="hljs-comment">// 在列表指定位置（index）处插入元素（element），效率较低，使用较少</span></span><br><span class="hljs-function">Object <span class="hljs-title">set</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, Object element)</span><span class="hljs-comment">// 修改指定位置（index）处元素为（element），返回被替换的元素</span></span><br><span class="hljs-function">Object <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span><span class="hljs-comment">// 根据下标（index）获取指定元素</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">indexOf</span><span class="hljs-params">(Object o)</span><span class="hljs-comment">// 获取指定对象（o）第一次出现处的索引</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">lastIndexOf</span><span class="hljs-params">(Object o)</span><span class="hljs-comment">// 获取指定对象（o）最后一次出现处的索引</span></span><br><span class="hljs-function">Object <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span><span class="hljs-comment">// 删除指定位置（index）处的元素，返回删除的元素</span></span><br></code></pre></td></tr></table></figure><p><strong>由于有下标，所以 List 集合有自己特有的编历方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">List list = <span class="hljs-keyword">new</span> ArrayList();<br>list.add(<span class="hljs-number">100</span>);<br>list.add(<span class="hljs-number">110</span>);<br>list.add(<span class="hljs-number">120</span>);<br><br><span class="hljs-comment">// 编历</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>    System.out.println(list.get(i));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="18-3-1-ArrayList"><a href="#18-3-1-ArrayList" class="headerlink" title="18.3.1 ArrayList"></a>18.3.1 ArrayList</h4><p>==默认初始化容量为 10（底层先创建了一个长度为 0 的数组，当添加第一个元素的时候，初始哈容量 10）。==</p><p>ArrayList 底层是一个 <strong>Object[] 数组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">transient</span> Object[] elementData;<br></code></pre></td></tr></table></figure><p><strong>ArrayList 的无参构造方法会初始化一个长度为0的数组，在添加元素的时候会初始化容量。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = <br><span class="hljs-comment">//     </span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>ArrayList 的有参构造需要传进去一个 int 类型的初始化容量（ininialCapacity）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ArrayList</span><span class="hljs-params">(<span class="hljs-keyword">int</span> initialCapacity)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (initialCapacity &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">this</span>.elementData = <span class="hljs-keyword">new</span> Object[initialCapacity];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (initialCapacity == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">this</span>.elementData = EMPTY_ELEMENTDATA;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Illegal Capacity: &quot;</span>+<br>                                           initialCapacity);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>数组每次扩容会扩大之前容量的 1.5 倍</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">grow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> minCapacity)</span> </span>&#123;<br>    <span class="hljs-comment">// overflow-conscious code</span><br>    <span class="hljs-keyword">int</span> oldCapacity = elementData.length;<br>    <span class="hljs-keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<span class="hljs-comment">// 新容量是老容量的 1.5 倍</span><br>    <span class="hljs-keyword">if</span> (newCapacity - minCapacity &lt; <span class="hljs-number">0</span>)<br>        newCapacity = minCapacity;<br>    <span class="hljs-keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="hljs-number">0</span>)<br>        newCapacity = hugeCapacity(minCapacity);<br>    <span class="hljs-comment">// minCapacity is usually close to size, so this is a win:</span><br>    elementData = Arrays.copyOf(elementData, newCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><p>==二进制位运算：==</p><p>&gt;&gt; n ： ==表示二进制向右移动 n 位，计算成十进制就是 缩小为原来的  $ \frac{1}{2^n}$ 倍==</p><p>&lt;&lt; n ： ==表示二进制向左移动 n 位，计算成十进制就是 扩大为原来的  2^n^ 倍==</p><h4 id="18-3-2-LinkList"><a href="#18-3-2-LinkList" class="headerlink" title="18.3.2 LinkList"></a>18.3.2 LinkList</h4><p><strong>链表的优点</strong></p><blockquote><p>由于链表上的元素在空间存储上内存地址不连续。</p><p>所以随机增删元素的时候不会有大量元素位移，因此随机增删效率较高。</p><p>在以后的开发中，如果遇到随机增删集合中元素的业务比较多时，建议使用LinkedList。</p></blockquote><p><strong>链表的缺点</strong></p><blockquote><p>不能通过数学表达式计算被查找元素的内存地址，每一次查找都是从头</p><p>节点开始遍历，直到找到为止。所以LinkedList集合检索/查找的效率较低。</p></blockquote><p><strong>单链表</strong> </p><blockquote><p>节点（Node）是单链表中基本的单元，每一个节点都有两个属性</p><p>一个属性是存储数据的</p><p>一个属性是存储下一个节点的内存地址的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 节点</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-comment">// 存储数据</span><br>    Object data;<br>    <span class="hljs-comment">// 下一个节点</span><br>    Node next;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object data, Node next)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.data = data;<br>        <span class="hljs-keyword">this</span>.next = next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Link</span> </span>&#123;<br>    <span class="hljs-comment">// 头节点</span><br>    Node node;<br>    <br>    <span class="hljs-comment">// 向链表末尾添加节点的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object data)</span> </span>&#123;<br>        <span class="hljs-comment">// 如果头节点为 null</span><br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 新建一个头节点</span><br>            node = <span class="hljs-keyword">new</span> Node(data, <span class="hljs-keyword">null</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">// 头节点不是 null</span><br>            <span class="hljs-comment">// 找到最后一个节点</span><br>            Node lastNode = findList(node);<br>            <span class="hljs-comment">// 让尾节点的next执行新节点</span><br>            lastNode.next = <span class="hljs-keyword">new</span> Node(data, <span class="hljs-keyword">null</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Node <span class="hljs-title">findList</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>        <span class="hljs-comment">// 如果这个节点的next是null，表明这个节点就是尾结点了</span><br>        <span class="hljs-keyword">if</span> (node.next == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>        <span class="hljs-comment">// 使用递归</span><br>        <span class="hljs-keyword">return</span> findList(node.next);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>LinkedList（==双向链表==）</strong></p><p>add方法源码阅读</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LinkedList</span><span class="hljs-params">()</span> </span>&#123;<br>Node&lt;E&gt; first = <span class="hljs-keyword">null</span>;<span class="hljs-comment">// 指向当前链表的第一个节点</span><br>    Node&lt;E&gt; last = <span class="hljs-keyword">null</span>;<span class="hljs-comment">// 指向当前链表的最后一个节点</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">add</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    linkLast(e);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">linkLast</span><span class="hljs-params">(E e)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; l = last;<span class="hljs-comment">// 使 l 执行当前链表中的最后一个节点</span><br>    <span class="hljs-keyword">final</span> Node&lt;E&gt; newNode = <span class="hljs-keyword">new</span> Node&lt;&gt;(l, e, <span class="hljs-keyword">null</span>);<span class="hljs-comment">// 创建一个新的节点对象，prev 指向最后一个节点，next 指向 null</span><br>    last = newNode;<span class="hljs-comment">// 使 last 指向新创建的节点（此时新节点就是链表中最后的一个节点了）</span><br>    <span class="hljs-keyword">if</span> (l == <span class="hljs-keyword">null</span>)<span class="hljs-comment">// 这个 if 分支只会执行在当前链表中没有节点的时候</span><br>        first = newNode;<span class="hljs-comment">// 使 first 指向新创建的第一个节点</span><br>    <span class="hljs-keyword">else</span><br>        l.next = newNode;<span class="hljs-comment">// 使之前最后一个节点的 next 指向新建的节点</span><br>    size++;<br>    modCount++;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="18-3-3-Vector（不常用）"><a href="#18-3-3-Vector（不常用）" class="headerlink" title="18.3.3 Vector（不常用）"></a>18.3.3 Vector（不常用）</h4><p>底层也是一个数组</p><p>初始化容量为 10</p><p>扩容后的容量是之前的 2 倍</p><p>Vector 中的所有方法都是线程同步的，都带有 syschronized 关键字，是线程安全的，效率比较低，使用较少了</p><p>怎样将一个线程不安全的 ArrayList 集合装换为线程安全的呢？</p><ul><li>使用工具类 <code>java.util.Collections;</code></li><li><code>Collections.synchronizedList(List&lt;T&gt; list)</code></li></ul><h3 id="18-4-泛型机制"><a href="#18-4-泛型机制" class="headerlink" title="18.4 泛型机制"></a>18.4 泛型机制</h3><p><strong>JDK5.0之后推出的新特性：泛型</strong></p><p>泛型这种语法机制，只在程序编译阶段起作用，只是给编译器参考的。（运行阶段泛型没用！）</p><p>泛型好处：</p><ol><li>集合中存储的元素类型统一了。</li><li>从集合中取出的元素类型是泛型指定的类型，不需要进行大量的“向下转型”！</li></ol><p>泛型缺点：</p><ol><li>导致集合中存储的元素缺乏多样性；</li><li>大多数业务中，集合中元素的类型还是统一的。所以这种泛型特性被大家所认可。</li></ol><p>泛型实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 使用泛型</span><br>        <span class="hljs-comment">// 使用泛型List&lt;Animal&gt;之后，表示List集合中只能存储Animal类型的数据</span><br>        <span class="hljs-comment">// 用泛型来指定集合中存储的数据类型</span><br>        <span class="hljs-comment">// 指定List集合中只能存储Animal类型数据，存储String类型数据编译就报错了</span><br>        <span class="hljs-comment">// 这样使用了泛型后，集合中的元素的数据类型更加统一了</span><br>        List&lt;Animal&gt; myList = <span class="hljs-keyword">new</span> ArrayList&lt;Animal&gt;();<br><br>        <span class="hljs-comment">// 准备对象</span><br>        Cat cat = <span class="hljs-keyword">new</span> Cat();<br>        Bird bird = <span class="hljs-keyword">new</span> Bird();<br><br>        <span class="hljs-comment">// 将对象添加到集合中去</span><br>        myList.add(cat);<br>        myList.add(bird);<br><br>        <span class="hljs-comment">// 编历集合，取出Cat让它抓老鼠，取出Bird让它飞翔</span><br>        <span class="hljs-comment">// 获取迭代器,表示迭代器迭代的是Animal类型</span><br>        Iterator&lt;Animal&gt; iterator = myList.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-comment">// 使用泛型后，每一次迭代返回的数据都是Animal类型</span><br>            Animal animal = iterator.next();<br>            <span class="hljs-comment">// 这里就不需要进行强制类型转换了</span><br>            animal.move();<br>            <span class="hljs-comment">// 但是如果要调用子类特有的方法，就需要向下转型（是一定要向下转型的）</span><br>            <span class="hljs-keyword">if</span> (animal <span class="hljs-keyword">instanceof</span> Cat) &#123;<br>                ((Cat) animal).catchMouse();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (animal <span class="hljs-keyword">instanceof</span> Bird) &#123;<br>                ((Bird) animal).catchChicken();<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-comment">// 父类特有方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;动物在移动&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫在走猫步&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 子类特有方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">catchMouse</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫在捉老鼠&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bird</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;鸟儿在飞翔&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 子类特有方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">catchChicken</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;鸟儿在捉小鸡&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义泛型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>       <span class="hljs-comment">// 这是钻石表达式，前面指定了类型，后面就可以不指定了</span><br>       MyClass&lt;String&gt; MyClass01 = <span class="hljs-keyword">new</span> MyClass&lt;&gt;();<br>        MyClass01.doSome(<span class="hljs-string">&quot;e&quot;</span>);<br>        <span class="hljs-comment">// 以下会报错</span><br>        <span class="hljs-comment">// stringMyClass.doSome(123);</span><br><br>        MyClass&lt;Integer&gt; myClass02 = <span class="hljs-keyword">new</span> MyClass&lt;&gt;();<br>        myClass02.doSome(<span class="hljs-number">123</span>);<span class="hljs-comment">// 自动装箱</span><br>        <span class="hljs-comment">// 以下会报错</span><br>        <span class="hljs-comment">// myClass.doSome(true);</span><br><br>        <span class="hljs-comment">// 不使用泛型，默认类型为 Object</span><br>        MyClass myClass03 = <span class="hljs-keyword">new</span> MyClass();<br>        myClass03.doSome(<span class="hljs-keyword">new</span> Object());<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 当前类使用了泛型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span>&lt;<span class="hljs-title">E</span>&gt; </span>&#123;<br>    <span class="hljs-comment">// 方法内传进去的参数类型为 E，在 new 对象的时候可以规定下来，不使用泛型，就默认为 Object</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">(E e)</span> </span>&#123;<br>        System.out.println(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="18-5-增强-for-循环（foreach）"><a href="#18-5-增强-for-循环（foreach）" class="headerlink" title="18.5 增强 for 循环（foreach）"></a>18.5 增强 for 循环（foreach）</h3><p><strong>JDK5.0后推出了一个新特性：叫做增强for循环，或者叫做foreach</strong></p><p>**foreach有一个缺点：==没有下标。在需要使用下标的循环中，不建议使用增强for循环==**。</p><p>增强 for 循环编历数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] array = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">54</span>,<span class="hljs-number">5657</span>,<span class="hljs-number">34</span>,<span class="hljs-number">4664</span>,<span class="hljs-number">43</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i : array) &#123;<br>    System.out.println(i);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">1</span><br><span class="hljs-comment">        3</span><br><span class="hljs-comment">        54</span><br><span class="hljs-comment">        5657</span><br><span class="hljs-comment">        34</span><br><span class="hljs-comment">        4664</span><br><span class="hljs-comment">        43</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>增强 for 循环编历集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 三种方式编历集合</span><br><span class="hljs-comment">// 创建集合</span><br>List&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>list.add(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>list.add(<span class="hljs-string">&quot;lisi&quot;</span>);<br>list.add(<span class="hljs-string">&quot;wangwu&quot;</span>);<br>list.add(<span class="hljs-string">&quot;zhaoliu&quot;</span>);<br><br><span class="hljs-comment">// 使用迭代器方式</span><br>Iterator&lt;String&gt; iterator = list.iterator();<br><span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>    String next = iterator.next();<br>    System.out.println(next);<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;============&quot;</span>);<br><br><span class="hljs-comment">// 使用普通 for 循环，通过下标方式</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>    String string = list.get(i);<br>    System.out.println(string);<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;============&quot;</span>);<br><br><span class="hljs-comment">// 使用增强 for 循环</span><br><span class="hljs-keyword">for</span> (String s : list) &#123;<br>    System.out.println(s);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="18-6-Map-接口及其实现类"><a href="#18-6-Map-接口及其实现类" class="headerlink" title="18.6 Map 接口及其实现类"></a>18.6 Map 接口及其实现类</h3><h4 id="18-6-1-Map-接口"><a href="#18-6-1-Map-接口" class="headerlink" title="18.6.1 Map 接口"></a>18.6.1 Map 接口</h4><p>Map和Collection没有继承关系</p><p>Map集合以==key 和 value==的方式存储数据：==键值对==</p><ul><li>key和value都是引用数据类型。</li><li>key和value都是存储对象的内存地址。</li><li>key起到主导的地位，value是key的一个附属品。</li></ul><p><strong>Map接口中常用方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">V <span class="hljs-title">put</span><span class="hljs-params">(K key, V value)</span> <span class="hljs-comment">// 向Map集合中添加键值对</span></span><br><span class="hljs-function">V <span class="hljs-title">get</span><span class="hljs-params">(Object key)</span> <span class="hljs-comment">// 通过key获取value</span></span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span>    <span class="hljs-comment">// 清空Map集合</span></span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">containsKey</span><span class="hljs-params">(Object key)</span> <span class="hljs-comment">// 判断Map中是否包含某个key</span></span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">containsValue</span><span class="hljs-params">(Object value)</span> <span class="hljs-comment">// 判断Map中是否包含某个value</span></span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span>   <span class="hljs-comment">// 判断Map集合中元素个数是否为0</span></span><br><span class="hljs-function">V <span class="hljs-title">remove</span><span class="hljs-params">(Object key)</span> <span class="hljs-comment">// 通过key删除键值对</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-comment">// 获取Map集合中键值对的个数。</span></span><br><span class="hljs-function">Collection&lt;V&gt; <span class="hljs-title">values</span><span class="hljs-params">()</span> <span class="hljs-comment">// 获取Map集合中所有的value，返回一个Collection</span></span><br><span class="hljs-function">Set&lt;K&gt; <span class="hljs-title">keySet</span><span class="hljs-params">()</span> <span class="hljs-comment">// 获取Map集合所有的key（所有的键是一个set集合）</span></span><br><span class="hljs-function">Set&lt;Map.Entry&lt;K,V&gt;&gt; <span class="hljs-title">entrySet</span><span class="hljs-params">()</span> <span class="hljs-comment">// 将Map集合转换成Set集合</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"> 假设现在有一个Map集合，如下所示：</span><br><span class="hljs-function">    map1集合对象</span><br><span class="hljs-function">    key             value</span><br><span class="hljs-function">    ----------------------------</span><br><span class="hljs-function">    1               zhangsan</span><br><span class="hljs-function">    2               lisi</span><br><span class="hljs-function">    3               wangwu</span><br><span class="hljs-function">    4               zhaoliu</span><br><span class="hljs-function">    </span><br><span class="hljs-function">    Set set </span>= map1.entrySet();<br>set集合对象：<br>    <span class="hljs-number">1</span>=zhangsan 【Set集合中元素的类型是 Map.Entry&lt;K,V&gt;】<br>    <span class="hljs-number">2</span>=lisi     【Map.Entry是静态内部类，是Map中的静态内部类】<br>    <span class="hljs-number">3</span>=wangwu<br>    <span class="hljs-number">4</span>=zhaoliu ---&gt; 这个东西是个什么？Map.Entry<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建 Map 集合</span><br>Map&lt;Integer, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br><br><span class="hljs-comment">// V put(K key, V value)</span><br>map.put(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;zhangsan&quot;</span>);<br>map.put(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;lisi&quot;</span>);<br>map.put(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;wangwu&quot;</span>);<br>map.put(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;zhaoliu&quot;</span>);<br><br><span class="hljs-comment">// V get(Object key)</span><br>String value02 = map.get(<span class="hljs-number">2</span>);<br>System.out.println(<span class="hljs-string">&quot;key为2的value是&quot;</span> + value02 );<span class="hljs-comment">// key为2的value是lisi</span><br><br><span class="hljs-comment">// boolean containsKey(Object key)</span><br><span class="hljs-comment">// boolean containsValue(Object value)</span><br><span class="hljs-comment">// 底层都是使用 equals() 方法来进行判断的</span><br>System.out.println(<span class="hljs-string">&quot;map中是否包含key = 3，&quot;</span> + map.containsKey(<span class="hljs-number">3</span>));<span class="hljs-comment">// map中是否包含key = 3，true</span><br>System.out.println(<span class="hljs-string">&quot;map中是否包含key = 5，&quot;</span> + map.containsKey(<span class="hljs-number">5</span>));<span class="hljs-comment">// map中是否包含key = 5，false</span><br>System.out.println(<span class="hljs-string">&quot;map中是否包含value = zhangsan，&quot;</span> + map.containsValue(<span class="hljs-string">&quot;zhangsan&quot;</span>));<span class="hljs-comment">// map中是否包含value = zhangsan，true</span><br><br><span class="hljs-comment">// V remove(Object key)</span><br>String remove = map.remove(<span class="hljs-number">1</span>);<br>System.out.println(<span class="hljs-string">&quot;移除掉的value是：&quot;</span> + remove);<span class="hljs-comment">// 移除掉的value是：zhangsan</span><br><br><span class="hljs-comment">// Collection&lt;V&gt; values()</span><br>Collection&lt;String&gt; values = map.values();<br><span class="hljs-keyword">for</span> (String s : values) &#123;<br>    System.out.println(s);<br>&#125;<br><br><span class="hljs-comment">// Set&lt;K&gt; keySet()</span><br>Set&lt;Integer&gt; keys = map.keySet();<br><span class="hljs-keyword">for</span> (Integer i : keys) &#123;<br>    System.out.println(i);<br>&#125;<br><br><span class="hljs-comment">// Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</span><br>Set&lt;Map.Entry&lt;Integer, String&gt;&gt; set = map.entrySet();<br>System.out.println(set);<span class="hljs-comment">// [2=lisi, 3=wangwu, 4=zhaoliu]</span><br><br><span class="hljs-comment">// void clear()</span><br>map.clear();<br><br><span class="hljs-comment">// int size()</span><br>System.out.println(map.size());<span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><p><strong>Map集合的编历：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 第一种：获取所有的Key，通过编历Key，来编历Value</span><br><span class="hljs-comment">// 效率较低，因为每次都要从 Map 集合中通过 key 去找 value</span><br>Set&lt;Integer&gt; keys = map.keySet();<br><span class="hljs-keyword">for</span> (Integer key : keys) &#123;<br>    System.out.println(key + <span class="hljs-string">&quot;=&quot;</span> + map.get(key));<br>&#125;<br><br><span class="hljs-comment">// 第二种：Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</span><br><span class="hljs-comment">// 将 Map 转换为 Set，Set 中存储的数据的数据类型是 Map.Entry</span><br>Set&lt;Map.Entry&lt;Integer, String&gt;&gt; set = map.entrySet();<br><span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, String&gt; node : set) &#123;<br>    System.out.println(node.getKey() + <span class="hljs-string">&quot;=&quot;</span> + node.getValue());<br>&#125;<br><br><span class="hljs-comment">// 第三种：JDK8新特性</span><br>map.forEach((key, value) -&gt;&#123;<br>    System.out.println(key + <span class="hljs-string">&quot;=&quot;</span> + value);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="18-6-2-HashSet-HashMap"><a href="#18-6-2-HashSet-HashMap" class="headerlink" title="18.6.2 HashSet / HashMap"></a>18.6.2 HashSet / HashMap</h4><p><strong>HashMap集合底层是==哈希表/散列表==的数据结构</strong>。</p><p><strong>哈希表是一个怎样的数据结构呢：</strong></p><ul><li>哈希表是一个数组和单向链表的结合体。</li><li>数组：在查询方面效率很高，随机增删方面效率很低。</li><li>单向链表：在随机增删方面效率较高，在查询方面效率很低。</li><li>哈希表将以上的两种数据结构融合在一起，充分发挥它们各自的优点。(一维数组，这个数组中每一个元素是一个单向链表)</li></ul><p><img src="https://img-blog.csdnimg.cn/20210222185835378.png" alt="008-哈希表或者散列表数据结构"></p><p><strong>HashMap集合底层的源代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap集合底层的源代码：<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HashMap</span></span>&#123;<br>    <span class="hljs-comment">// HashMap底层实际上就是一个数组。（一维数组）</span><br>    Node&lt;K,V&gt;[] table;<br>    <span class="hljs-comment">// 静态的内部类HashMap.Node</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>&lt;<span class="hljs-title">K</span>,<span class="hljs-title">V</span>&gt; </span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> hash; <span class="hljs-comment">// 哈希值（哈希值是key的hashCode()方法的执行结果。hash值通过哈希函数/算法，可以转换存储成数组的下标。）</span><br>        <span class="hljs-keyword">final</span> K key; <span class="hljs-comment">// 存储到Map集合中的那个key</span><br>        V value; <span class="hljs-comment">// 存储到Map集合中的那个value</span><br>        Node&lt;K,V&gt; next; <span class="hljs-comment">// 下一个节点的内存地址。</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>两个方法的实现原理：</strong></p><p><code>map.put(k, v);</code></p><p>第一步：<strong>先将 k, v 封装到 Node 对象当中</strong></p><p>第二步：<strong>底层会调用 k 的 hashCode() 方法得出 hash 值</strong></p><p>第三步：通过哈希函数 / 哈希算法将 hash 值转换为数组的下标，如果该下标位置上没有元素，那么就直接将 Node 对象放到这个位置上了，如果该下标上有元素，就会那着 <strong>Node 节点上的 k 和链表中每个节点的 k 进行 equals</strong> ，如果所有 equals 方法返回的都是 false，那么这个新节点将会被添加到链表的最后，如果其中有一个返回 true，<strong>那么这个节点的 vlaue 值会被 Node 节点的 v 覆盖。</strong></p><p><code>v = map.get(k);</code></p><p>先调用 k 的 <strong>hashCode 方法取得 hash 值</strong>，然后通过<strong>哈希算法将 hash 值转换为 数组的下标</strong>，通过数组下标快速定位到某个位置，<strong>如果这个位置上什么也没有，就返回 null</strong>，如果这个位置上有单向链表，就拿着参数 k 和链表上各个节点的 k 进行 equals ，<strong>如果 equals 方法返回的都是 false，那么方法返回 null</strong>，只要其中有一个节点 equals <strong>后返回 true，此时这个节点上的 value 就是我们要找的 value</strong>，get 方法最终返回这个 value。</p><p><strong>HashMap集合的key部分特点：==无序，不可重复==</strong></p><ul><li>无序：因为不一定挂到哪个单向链表上；</li><li>不可重复：equals 方法保证  HashMap 集合的 key 不可重复，如果 key 重复了，value 就会覆盖。</li></ul><p><strong>==重点：放在HashMap集合key部分的元素，以及放在HashSet集合中的元素，需要同时重写hashCode和equals方法。==</strong></p><p><img src="C:/Users/30117/AppData/Roaming/Typora/typora-user-images/image-20210222191852249.png" alt="image-20210222191852249"></p><p>**HashMap 集合的==默认初始化容量是16，默认加载因子是0.75==**（这个默认加载因子是当HashMap集合底层数组的容量达到75%的时候，数组开始扩容。）</p><p>重点，<strong>记住：HashMap集合初始化容量必须是2的倍数</strong>，这也是官方推荐的，这是因为达到散列均匀，为了提高HashMap集合的存取效率，所必须的。</p><p><strong>对于哈希表数据结构来说：</strong></p><ul><li><pre><code>如果o1和o2的hash值相同，一定是放到同一个单向链表上。</code></pre></li><li><pre><code>当然如果o1和o2的hash值不同，但由于哈希算法执行结束之后转换的数组下标可能相同，此时会发生 **==“哈希碰撞”==**。</code></pre></li></ul><p><strong>HashMap集合key部分允许null吗：允许</strong></p><ul><li>但是要注意：HashMap集合的key null值只能有一个。</li></ul><h4 id="18-6-3-HashTable"><a href="#18-6-3-HashTable" class="headerlink" title="18.6.3 HashTable"></a>18.6.3 HashTable</h4><p>Hashtable方法都带有synchronized：线程安全的。</p><p>Hashtable和HashMap一样，底层都是哈希表数据结构。</p><p>Hashtable的<strong>初始化容量是11，默认加载因子是：0.75f</strong></p><p><strong>Hashtable的扩容是：原容量 * 2 + 1</strong></p><p>Hashtable的key和value都是不能为null的。（HashMap集合的key和value都是可以为null的。）</p><h4 id="18-6-4-Properties"><a href="#18-6-4-Properties" class="headerlink" title="18.6.4 Properties"></a>18.6.4 Properties</h4><p><strong>Properties是一个Map集合，继承Hashtable，Properties的==key和value都是String类型==。</strong></p><p>Properties被称为属性类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建一个Properties对象</span><br>Properties pro = <span class="hljs-keyword">new</span> Properties();<br><br><span class="hljs-comment">// 两个方法，一个存，一个取</span><br>pro.setProperty(<span class="hljs-string">&quot;11&quot;</span>, <span class="hljs-string">&quot;AA&quot;</span>);<br>pro.setProperty(<span class="hljs-string">&quot;22&quot;</span>, <span class="hljs-string">&quot;BB&quot;</span>);<br>pro.setProperty(<span class="hljs-string">&quot;33&quot;</span>, <span class="hljs-string">&quot;CC&quot;</span>);<br>pro.setProperty(<span class="hljs-string">&quot;44&quot;</span>, <span class="hljs-string">&quot;DD&quot;</span>);<br>pro.setProperty(<span class="hljs-string">&quot;55&quot;</span>, <span class="hljs-string">&quot;EE&quot;</span>);<br><br><span class="hljs-comment">// 通过key获取value</span><br>System.out.println(pro.getProperty(<span class="hljs-string">&quot;11&quot;</span>));<br>System.out.println(pro.getProperty(<span class="hljs-string">&quot;22&quot;</span>));<br>System.out.println(pro.getProperty(<span class="hljs-string">&quot;33&quot;</span>));<br>System.out.println(pro.getProperty(<span class="hljs-string">&quot;44&quot;</span>));<br>System.out.println(pro.getProperty(<span class="hljs-string">&quot;55&quot;</span>));<br></code></pre></td></tr></table></figure><h4 id="18-6-5-TreeSet-TreeMap"><a href="#18-6-5-TreeSet-TreeMap" class="headerlink" title="18.6.5 TreeSet / TreeMap"></a>18.6.5 TreeSet / TreeMap</h4><p><strong>TreeSet集合存储元素特点：</strong></p><ul><li>无序不可重复的，但是存储的元素可以自动按照大小顺序排序！</li><li>无序：这里的无序指的是存进去的顺序和取出来的顺序不同。并且没有下标。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeSet&lt;String&gt; treeSet = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();<br>treeSet.add(<span class="hljs-string">&quot;abd&quot;</span>);<br>treeSet.add(<span class="hljs-string">&quot;aba&quot;</span>);<br>treeSet.add(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-keyword">for</span> (String s : treeSet) &#123;<br>    System.out.println(s);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">aba</span><br><span class="hljs-comment">        abc</span><br><span class="hljs-comment">        abd</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>TreeSet集合底层实际上是一个TreeMap，TreeMap集合底层是一个二叉树。</strong></p><p><img src="https://img-blog.csdnimg.cn/20210222213937898.png" alt="010-自平衡二叉树"></p><p><strong>放到TreeSet集合中的元素，等同于放到TreeMap集合key部分了。</strong></p><p><strong>对自定义的类型来说，TreeSet可以排序吗？</strong></p><ul><li><p>以下程序中对于Person类型来说，无法排序。因为没有指定Person对象之间的比较规则。</p></li><li><p>谁大谁小并没有说明啊。</p></li><li><p>以下程序运行的时候出现了这个异常：</p></li><li><p><code>java.lang.ClassCastException:class com.bjpowernode.javase.collection.Personcannot be cast to class java.lang.Comparable</code></p></li><li><p>出现这个异常的原因是：Person类没有实现 <code>java.lang.Comparable </code>接口。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TreeSet&lt;Person&gt; set = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();<br>        set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">20</span>));<br>        set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">12</span>));<br>        set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">8</span>));<br>        <span class="hljs-keyword">for</span> (Person person : set) &#123;<br>            System.out.println(person);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>TreeSet集合中元素可排序的第一种方式：实现 <code>java.lang.Comparable</code> 接口，重写 <code>compareTo()</code> 方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TreeSet&lt;Person&gt; set = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;();<br>        set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">20</span>, <span class="hljs-string">&quot;zhangsan&quot;</span>));<br>        set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">20</span>, <span class="hljs-string">&quot;zhangsi&quot;</span>));<br>        set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">12</span>, <span class="hljs-string">&quot;lisi&quot;</span>));<br>        <span class="hljs-keyword">for</span> (Person person : set) &#123;<br>            System.out.println(person);<br>        &#125;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        输出：</span><br><span class="hljs-comment">        Person&#123;age=12, name=&#x27;lisi&#x27;&#125;</span><br><span class="hljs-comment">                Person&#123;age=20, name=&#x27;zhangsan&#x27;&#125;</span><br><span class="hljs-comment">                Person&#123;age=20, name=&#x27;zhangsi&#x27;&#125;</span><br><span class="hljs-comment">        */</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 要比较的类实现 Comparable 接口</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Person</span>&gt;</span>&#123;<br>    <span class="hljs-keyword">int</span> age;<br>    String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 先按照年龄升序，如果年龄一样的再按照姓名升序。</span><br>    <span class="hljs-comment">// compareTo方法的返回值很重要：</span><br>    <span class="hljs-comment">// 返回0表示相同，value会覆盖。</span><br>    <span class="hljs-comment">// 返回&gt;0，会继续在右子树上找。</span><br>    <span class="hljs-comment">// 返回&lt;0，会继续在左子树上找。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Person o)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.age &gt; o.age ? (Integer.compare(<span class="hljs-keyword">this</span>.age, o.age)) : (<span class="hljs-keyword">this</span>.name.compareTo(o.name));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>TreeSet集合中元素可排序的第二种方式：使用比较器的方式</strong>。</p><ul><li>可以写一个类实现比较器接口 <code>java.util.Comparator</code> ，重写 <code>compare()</code> 方法，将比较器作为参数放入 TreeSet 的构造方法中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        TreeSet&lt;Person&gt; set = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;(<span class="hljs-keyword">new</span> PersonComparator());<br>        set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">20</span>, <span class="hljs-string">&quot;zhangsan&quot;</span>));<br>        set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">20</span>, <span class="hljs-string">&quot;zhangsi&quot;</span>));<br>        set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">12</span>, <span class="hljs-string">&quot;lisi&quot;</span>));<br>        <span class="hljs-keyword">for</span> (Person person : set) &#123;<br>            System.out.println(person);<br>        &#125;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        输出：</span><br><span class="hljs-comment">        Person&#123;age=12, name=&#x27;lisi&#x27;&#125;</span><br><span class="hljs-comment">                Person&#123;age=20, name=&#x27;zhangsan&#x27;&#125;</span><br><span class="hljs-comment">                Person&#123;age=20, name=&#x27;zhangsi&#x27;&#125;</span><br><span class="hljs-comment">        */</span><br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">Person</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Person o1, Person o2)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> o1.age &gt; o2.age ? (Integer.compare(o1.age, o2.age)) : (o1.name.compareTo(o2.name));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>可以使用匿名内部类写一个比较器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">TreeSet&lt;Person&gt; set = <span class="hljs-keyword">new</span> TreeSet&lt;&gt;(<span class="hljs-keyword">new</span> Comparator&lt;Person&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Person o1, Person o2)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> o1.age &gt; o2.age ? (Integer.compare(o1.age, o2.age)) : (o1.name.compareTo(o2.name));<br>    &#125;<br>&#125;);<br>set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">20</span>, <span class="hljs-string">&quot;zhangsan&quot;</span>));<br>set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">20</span>, <span class="hljs-string">&quot;zhangsi&quot;</span>));<br>set.add(<span class="hljs-keyword">new</span> Person(<span class="hljs-number">12</span>, <span class="hljs-string">&quot;lisi&quot;</span>));<br><span class="hljs-keyword">for</span> (Person person : set) &#123;<br>    System.out.println(person);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">Person&#123;age=12, name=&#x27;lisi&#x27;&#125;</span><br><span class="hljs-comment">    Person&#123;age=20, name=&#x27;zhangsan&#x27;&#125;</span><br><span class="hljs-comment">    Person&#123;age=20, name=&#x27;zhangsi&#x27;&#125;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p><strong>Comparable 和 Comparator 怎么选择呢？</strong></p><ul><li><strong>当比较规则不会发生改变的时候</strong>，或者说当比较规则只有1个的时候，建议实现Comparable接口。</li><li><strong>如果比较规则有多个，并且需要多个比较规则之间频繁切换</strong>，建议使用Comparator接口。（<strong>Comparator接口的设计符合OCP原则。</strong>）</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>17、异常（Exception）</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E5%BC%82%E5%B8%B8%EF%BC%88Exception%EF%BC%89/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E5%BC%82%E5%B8%B8%EF%BC%88Exception%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="17-1-异常的基本概念"><a href="#17-1-异常的基本概念" class="headerlink" title="17.1 异常的基本概念"></a>17.1 异常的基本概念</h3><h4 id="17-1-1-异常信息"><a href="#17-1-1-异常信息" class="headerlink" title="17.1.1 异常信息"></a>17.1.1 异常信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> r = <span class="hljs-number">10</span> / <span class="hljs-number">0</span>;<br>        System.out.println(r);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上程序运行后已出现异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span> java.lang.ArithmeticException: / by zero<br>at Test01.main(Test01.java:<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>**java 是一门很完善的语言，提供了异常的处理方式，当程序出现了不正常的情况，JVM 虚拟机就会把异常信息打印在控制台，供程序员参考，==增加程序的健壮性==**。</p><h4 id="17-1-2-异常以什么形式存在"><a href="#17-1-2-异常以什么形式存在" class="headerlink" title="17.1.2 异常以什么形式存在"></a>17.1.2 异常以什么形式存在</h4><p><strong>==异常在 java 中以类的形式存在，每一个异常类都可以创建异常对象。==</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">NumberFormatException numberFormatException = <span class="hljs-keyword">new</span> NumberFormatException(<span class="hljs-string">&quot;数字格式化异常&quot;</span>);<br>System.out.println(numberFormatException);<span class="hljs-comment">// 输出：java.lang.NumberFormatException: 数字格式化异常</span><br><br>ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException = <span class="hljs-keyword">new</span> ArrayIndexOutOfBoundsException(<span class="hljs-string">&quot;数组下标越界异常&quot;</span>);<br>System.out.println(arrayIndexOutOfBoundsException);<span class="hljs-comment">// 输出：java.lang.ArrayIndexOutOfBoundsException: 数组下标越界异常</span><br></code></pre></td></tr></table></figure><p>异常类对应现实生活：</p><p><strong>丢失钱包（是一个异常类）</strong></p><p><strong>2008年，8月8日，小明的钱包丢了（是一个异常对象）</strong></p><h3 id="17-2-异常的分类"><a href="#17-2-异常的分类" class="headerlink" title="17.2 异常的分类"></a>17.2 异常的分类</h3><h4 id="17-2-1-异常的层次结构"><a href="#17-2-1-异常的层次结构" class="headerlink" title="17.2.1 异常的层次结构"></a>17.2.1 异常的层次结构</h4><p><img src="https://img-blog.csdnimg.cn/20210217153729367.png" alt="image-20210217153631429"></p><p><strong>编译时异常（受检异常）：异常必须要在编译（编写）阶段预先处理，如果不处理，编译器会报错，发生的概率较高。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 运行出错</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// main方法中调用doSome()方法</span><br>        <span class="hljs-comment">// 因为doSome()方法声明位置上有：throws ClassNotFoundException</span><br>        <span class="hljs-comment">// 我们在调用doSome()方法的时候必须对这种异常进行预先的处理。</span><br>        <span class="hljs-comment">// 如果不处理，编译器就报错。</span><br>        doSome();<span class="hljs-comment">//编译器报错信息： Unhandled exception: java.lang.ClassNotFoundException</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * doSome方法在方法声明的位置上使用了：throws ClassNotFoundException</span><br><span class="hljs-comment">     * 这个代码表示doSome()方法在执行过程中，有可能会出现ClassNotFoundException异常。</span><br><span class="hljs-comment">     * 叫做类没找到异常。这个异常直接父类是：Exception，所以ClassNotFoundException属于编译时异常。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ClassNotFoundException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;doSome!!!!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>运行时异常（未受检异常）：在编译阶段可以不处理，发生的概率较低。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 运行出错</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>         <span class="hljs-comment">/*</span><br><span class="hljs-comment">        程序执行到此处发生了ArithmeticException异常，底层new了一个ArithmeticException异常对象，</span><br><span class="hljs-comment">        然后抛出了，由于是main方法调用了100 / 0，所以这个异常ArithmeticException抛给了main方法，</span><br><span class="hljs-comment">        main方法没有处理，将这个异常自动抛给了JVM，JVM最终终止程序的执行。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        ArithmeticException 继承 RuntimeException，属于运行时异常。</span><br><span class="hljs-comment">        在编写程序阶段不需要对这种异常进行预先的处理。</span><br><span class="hljs-comment">         */</span><br>        System.out.println(<span class="hljs-number">100</span> / <span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">// 这里的HelloWorld没有输出，没有执行。</span><br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="17-2-1-处理异常的两种方式"><a href="#17-2-1-处理异常的两种方式" class="headerlink" title="17.2.1 处理异常的两种方式"></a>17.2.1 处理异常的两种方式</h4><p>==对于编译时异常，一定要在编译阶段就处理掉。==</p><p><strong>第一种方式：在方法声明的位置上，使用 <code>throws</code> 关键字，将异常抛给上一级。</strong>（<strong>谁调用我，我就抛给谁</strong>）</p><blockquote><p>但是异常上抛之后，方法调用者还是需要对这个异常进行处理，可以选择上抛或直接处理。</p></blockquote><blockquote><p>当异常一直上抛，最后抛给了 mian 方法，main 方法继续上抛，抛给了 jvm 虚拟机，jvm 知道这个异常发生，最后只能终止 java 程序的运行。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>&#123;<br>    <span class="hljs-comment">// 一般不建议在main方法上上抛异常，因为如果异常真正发生了，一定会抛给jvm虚拟机，jvm只有终止程序</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException </span>&#123;<br>        <span class="hljs-comment">// 将异常上抛，如果没有出现异常，程序正常执行，出现问题，jvm 直接终止程序运行</span><br>        doSome();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;doSome!!!!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第二种方式：在方法体内，使用 <code>try...catch</code> 语句进行异常的捕捉。</strong>（<strong>这件事情发生了，但我自己解决了，谁也不知道</strong>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 使用 try...catch 语句进行异常捕捉</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 尝试调用方法，如果没有出现异常，不会进入 catch 语句块</span><br>            doSome();<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<span class="hljs-comment">// 这里的引用 e 中保存的是之前 new 出来的异常对象的内存地址</span><br>            <span class="hljs-comment">// 如果出现异常，进入 catch 语句块</span><br>            <span class="hljs-comment">// 捕捉异常</span><br>            <span class="hljs-comment">// 以下程序是打印异常堆栈追踪信息</span><br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果出现异常，会在底层 new 一个 ClassNotFoundException 异常对象，并且上抛</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;doSome!!!!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="17-3-异常的上抛和捕捉"><a href="#17-3-异常的上抛和捕捉" class="headerlink" title="17.3 异常的上抛和捕捉"></a>17.3 异常的上抛和捕捉</h3><h4 id="17-3-1-上抛"><a href="#17-3-1-上抛" class="headerlink" title="17.3.1 上抛"></a>17.3.1 上抛</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>&#123;<br>    <span class="hljs-comment">// 一般不建议在main方法上上抛异常，因为如果异常真正发生了，一定会抛给jvm虚拟机，jvm只有终止程序</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;main begin&quot;</span>);<br>        <span class="hljs-comment">// 不建议在main方法上上抛异常，所以在这里捕捉异常</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            m1();<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;文件不存在！&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;main over&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 继续上抛</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;m1 begin&quot;</span>);<br>        m2();<br>        System.out.println(<span class="hljs-string">&quot;m1 over&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 异常上抛，可以上抛具体异常，也可以上抛父类异常，如 FileNotFoundException 的父类就是 IOException</span><br>    <span class="hljs-comment">// private static void m2() throws IOException &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;m2 begin&quot;</span>);<br>        <span class="hljs-comment">// 会出现异常，选择上抛</span><br>        <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;D:\\Code\\Kotlin\\Day01\\Kotlin01\\src\\com\\Person.kt&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;m2 over&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>如果异常没有发生：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 输出：</span><br>main begin<br>    m1 begin<br>    m2 begin<br>    m2 over<br>    m1 over <br>    main over<br></code></pre></td></tr></table></figure><ul><li>如果发生了异常：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 输出：</span><br>main begin<br>    m1 begin<br>    m2 begin<br>    文件不存在！<br>    main over<br></code></pre></td></tr></table></figure><h4 id="17-3-2-捕捉"><a href="#17-3-2-捕捉" class="headerlink" title="17.3.2 捕捉"></a>17.3.2 捕捉</h4><blockquote><p>catch后面的小括号中的类型可以是具体的异常类型，也可以是该异常类型的父类型。</p><p>catch可以写多个。建议catch的时候，精确的一个一个处理。这样有利于程序的调试。</p><p>catch写多个的时候，从上到下，必须遵守从小到大。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 使用 try...catch 语句来进行异常的捕捉</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//  会出现文件未发现异常</span><br>            FileInputStream fileInputStream = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;D:\\Code\\Kotlin\\Day01\\Kotlin01\\src\\com\\Person.kt&quot;</span>);<br>            <span class="hljs-comment">// 会出现计算异常</span><br>            System.out.println(<span class="hljs-number">100</span> / <span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException | ArithmeticException e) &#123;<span class="hljs-comment">// 这里可以捕捉具体的异常，也可以捕捉父类异常</span><br>            <span class="hljs-comment">// FileNotFoundException | ArithmeticException e 是 JDK8 新特性</span><br>            <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> FileNotFoundException) &#123;<br>                System.out.println(<span class="hljs-string">&quot;文件没有找到&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;除数不能为 0&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="17-3-3-上抛和捕捉的选择"><a href="#17-3-3-上抛和捕捉的选择" class="headerlink" title="17.3.3 上抛和捕捉的选择"></a>17.3.3 上抛和捕捉的选择</h4><p><strong>==如果希望调用者来处理异常，就 throws 上报==，其他情况使用 try … catch 捕捉</strong></p><h3 id="17-4-异常对象的常用方法"><a href="#17-4-异常对象的常用方法" class="headerlink" title="17.4 异常对象的常用方法"></a>17.4 异常对象的常用方法</h3><ol><li><strong>获取异常的简单描述信息：</strong><code>String msg = exception.getMessage();</code> </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">NullPointerException nullPointerException = <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">&quot;空指针异常！&quot;</span>);<br><span class="hljs-comment">// 获取异常的简单描述信息</span><br>String msg = nullPointerException.getMessage();<br>System.out.println(msg);<span class="hljs-comment">// 输出：空指针异常！</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>打印异常追踪的堆栈信息</strong>：<code>exception.printStackTrace();</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">NullPointerException nullPointerException = <span class="hljs-keyword">new</span> NullPointerException(<span class="hljs-string">&quot;空指针异常！&quot;</span>);<br><span class="hljs-comment">// java 后台打印异常追踪信息的时候，采用了异步线程的方式打印</span><br>nullPointerException.printStackTrace();<br></code></pre></td></tr></table></figure><p><strong>异常追踪信息怎么看：</strong></p><p>​    从上往下一行一行看，但是要注意的是，sun 公司写好的代码就不用看了，只要的问题是在自己编写的代码上。</p><h3 id="17-5-关于try-catch中的finally子句"><a href="#17-5-关于try-catch中的finally子句" class="headerlink" title="17.5 关于try..catch中的finally子句"></a>17.5 关于try..catch中的finally子句</h3><ul><li><p><strong>在finally子句中的代码是最后执行的，并且是一定会执行的</strong>，即使try语句块中的代码出现了异常。</p></li><li><p>finally子句必须和try一起出现，不能单独编写。</p></li><li><p>finally语句通常使用在哪些情况下呢？</p><ul><li><strong>通常在finally语句块中完成资源的释放/关闭</strong>。（保证代码一定执行）</li></ul></li><li><p>try…finally （没有 catch）可以连用</p></li><li><p><strong>finally 语句块中的代码会在 return 前执行</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;try...&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">// finally中的语句会执行。能执行到。</span><br>    System.out.println(<span class="hljs-string">&quot;finally...&quot;</span>);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">try...</span><br><span class="hljs-comment">        finally...</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li><strong>如果退出 JVM，finally语句块中的代码不执行</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;try...&quot;</span>);<br>    <span class="hljs-comment">// 退出 JVM</span><br>    System.exit(<span class="hljs-number">0</span>);<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;finally...&quot;</span>);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">try...</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>==面试题== : 最后的结果输出为 100</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> result = m();<br>        System.out.println(result);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">m</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 这行代码出现在 i = 100 之后，所以最终的返回值必须是 100</span><br>            <span class="hljs-comment">// 但是return 语句还必须保证是最后执行的，一旦执行，整个方法结束。</span><br>            <span class="hljs-comment">// 可以从反编译的程序来看出执行顺序</span><br>            <span class="hljs-keyword">return</span> i;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            i++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">java语法规则（有一些规则是不能破坏的，一旦这么说了，就必须这么做！）：<br>    java中有一条这样的规则：<br>        方法体中的代码必须遵循自上而下顺序依次逐行执行（亘古不变的语法！）<br>    java中海油一条语法规则：<br>        <span class="hljs-keyword">return</span>语句一旦执行，整个方法必须结束（亘古不变的语法！）<br></code></pre></td></tr></table></figure><p>反编译结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Test01</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> result = m();<br>        System.out.println(result);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">m</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">byte</span> i = <span class="hljs-number">100</span>;<br><br>        <span class="hljs-keyword">byte</span> var1;<br>        <span class="hljs-keyword">try</span> &#123;<br>            var1 = i;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">int</span> var5 = i + <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> var1;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="17-6-自定义异常"><a href="#17-6-自定义异常" class="headerlink" title="17.6 自定义异常"></a>17.6 自定义异常</h3><p>第一步：编写一个类继承 Exception 或者 RunTimeException。</p><p>第二步：提供两个构造方法，一个无参数，一个带有 String 参数的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span> </span>&#123;<span class="hljs-comment">// 编译时异常</span><br>    <span class="hljs-comment">// 无参构造方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyException</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 默认有一个 super()</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 有参构造方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyException</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RunTimeException</span> </span>&#123;<span class="hljs-comment">// 运行时异常</span><br>    <span class="hljs-comment">// 无参构造方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyException</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 默认有一个 super()</span><br>    &#125;<br>    <br>    <span class="hljs-comment">// 有参构造方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyException</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(s);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="17-7-方法覆盖与异常"><a href="#17-7-方法覆盖与异常" class="headerlink" title="17.7 方法覆盖与异常"></a>17.7 方法覆盖与异常</h3><p><strong>重写之后的方法不能比重写之前的方法抛出更多的异常</strong></p><p>==tips：父类方法不抛异常，子类可以抛RunTimeException==</p>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>16、常用类</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="16、常用类"><a href="#16、常用类" class="headerlink" title="16、常用类"></a>16、常用类</h2><h3 id="16-1-String"><a href="#16-1-String" class="headerlink" title="16.1 String"></a>16.1 String</h3><h4 id="16-1-1-String-概述"><a href="#16-1-1-String-概述" class="headerlink" title="16.1.1 String 概述"></a>16.1.1 String 概述</h4><p>关于 java JDK 内置的一个类：java.lang.string</p><ul><li> String 表示字符类型串，属于<strong>引用数据类型</strong>，不属于基本数据类型</li><li>在 java 中随便<strong>使用双引号括起来的都是 String 对象</strong>，例如“abc”，“def”，“hello world”，这是三个 String 对象</li><li>java 中规定，双引号括起来的字符串，是不可变的。</li><li>==<strong>在 JDK 中双引号括起来的字符串，都直接存储在“方法区”的“字符串常量池”当中。</strong>==</li></ul><h4 id="16-1-2-String-字符串的存储原理"><a href="#16-1-2-String-字符串的存储原理" class="headerlink" title="16.1.2 String 字符串的存储原理"></a>16.1.2 String 字符串的存储原理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 这两行代码表示底层创建了 3个字符串对象，都在字符串常量池中</span><br>        String s1 = <span class="hljs-string">&quot;abcdef&quot;</span>;<br>        String s2 = <span class="hljs-string">&quot;abcdef&quot;</span> + <span class="hljs-string">&quot;xy&quot;</span>;<br>        <br>        <span class="hljs-comment">// 凡是双引号括起来的都在字符串常量池中有一份</span><br>        <span class="hljs-comment">// new对象的时候一定在堆内存中开辟空间</span><br>        String s3 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;xy&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210210154121363.png" alt="String的内存图"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">110</span>, <span class="hljs-string">&quot;张三&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210210155651495.png" alt="UserTest内存图"></p><p>检验</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test08</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s1 = <span class="hljs-string">&quot;abc&quot;</span>;<br>        String s2 = <span class="hljs-string">&quot;abc&quot;</span>;<br>        System.out.println(s1 == s2);<span class="hljs-comment">// true</span><br><br>        String s3 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;abc&quot;</span>);<br>        String s4 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;abc&quot;</span>);<br>        System.out.println(s3 == s4);<span class="hljs-comment">// false</span><br>        System.out.println(s3.equals(s4));<span class="hljs-comment">// true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="16-1-3-String类的构造方法"><a href="#16-1-3-String类的构造方法" class="headerlink" title="16.1.3 String类的构造方法"></a>16.1.3 String类的构造方法</h4><ul><li>传一个字符串 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// String()</span><br>String s1 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;abc&quot;</span>);<br>System.out.println(s1);<span class="hljs-comment">// 输出：abc</span><br></code></pre></td></tr></table></figure><ul><li>传一个 byte 数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// String(byte[] bytes)</span><br><span class="hljs-comment">// 将byte数组全部转为字符串</span><br><span class="hljs-keyword">byte</span>[] bytes = &#123;<span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>&#125;;<span class="hljs-comment">// 97是a，98是b，99是c</span><br>String s2 = <span class="hljs-keyword">new</span> String(bytes);<br>System.out.println(s2);<span class="hljs-comment">// 输出：abc</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// String(byte[] bytes, int offset, int length)</span><br><span class="hljs-comment">// offset表示数组元素起始下标，length表示长度</span><br><span class="hljs-comment">// 将byte数组的一部分转换为字符串</span><br><span class="hljs-keyword">byte</span>[] bytes = &#123;<span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span>, <span class="hljs-number">100</span>, <span class="hljs-number">101</span>&#125;;<br>String s2 = <span class="hljs-keyword">new</span> String(bytes, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>System.out.println(s2);<span class="hljs-comment">// 输出：cde</span><br></code></pre></td></tr></table></figure><ul><li>传一个 char 数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// String(char[] value)</span><br><span class="hljs-comment">// 将char数组全部转为字符串</span><br><span class="hljs-keyword">char</span>[] chars = &#123;<span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;是&#x27;</span>, <span class="hljs-string">&#x27;中&#x27;</span>, <span class="hljs-string">&#x27;国&#x27;</span>, <span class="hljs-string">&#x27;人&#x27;</span>&#125;;<br>String s3 = <span class="hljs-keyword">new</span> String(chars);<br>System.out.println(s3);<span class="hljs-comment">// 输出：我是中国人</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// String(char[] value, int offset, int count)</span><br><span class="hljs-comment">// 将char数组的一部分转为字符串</span><br><span class="hljs-keyword">char</span>[] chars = &#123;<span class="hljs-string">&#x27;我&#x27;</span>, <span class="hljs-string">&#x27;是&#x27;</span>, <span class="hljs-string">&#x27;中&#x27;</span>, <span class="hljs-string">&#x27;国&#x27;</span>, <span class="hljs-string">&#x27;人&#x27;</span>&#125;;<br>String s3 = <span class="hljs-keyword">new</span> String(chars, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>System.out.println(s3);<span class="hljs-comment">// 输出：中国人</span><br></code></pre></td></tr></table></figure><h4 id="16-1-4-String类中的常用方法"><a href="#16-1-4-String类中的常用方法" class="headerlink" title="16.1.4 String类中的常用方法"></a>16.1.4 String类中的常用方法</h4><h5 id="1-char-charAt-int-index"><a href="#1-char-charAt-int-index" class="headerlink" title="1.  char charAt(int index)"></a>1. <code> char charAt(int index)</code></h5><p>返回指定索引处的char值</p><p><code>index</code> 表示索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span> c = <span class="hljs-string">&quot;abc&quot;</span>.charAt(<span class="hljs-number">1</span>);<span class="hljs-comment">// 返回索引为1的元素</span><br>System.out.println(c);<span class="hljs-comment">// 输出：b</span><br></code></pre></td></tr></table></figure><h5 id="2-int-compareTo-String-anotherString"><a href="#2-int-compareTo-String-anotherString" class="headerlink" title="2. int compareTo(String anotherString)"></a>2. <code>int compareTo(String anotherString)</code></h5><p>按字典顺序比较两个字符串的大小关系</p><p>逐个比较，有一个不一样就不比了，直接能输出结果</p><p><code>anotherString</code> 表示另一个比较的字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;abc&quot;</span>.compareTo(<span class="hljs-string">&quot;abc&quot;</span>));<span class="hljs-comment">// 输出：0（前后一致）</span><br>System.out.println(<span class="hljs-string">&quot;abcd&quot;</span>.compareTo(<span class="hljs-string">&quot;abce&quot;</span>));<span class="hljs-comment">// 输出：-1（前小后大）</span><br>System.out.println(<span class="hljs-string">&quot;abce&quot;</span>.compareTo(<span class="hljs-string">&quot;abcd&quot;</span>));<span class="hljs-comment">// 输出：1（前大后小）</span><br>System.out.println(<span class="hljs-string">&quot;xyz&quot;</span>.compareTo(<span class="hljs-string">&quot;yxz&quot;</span>));<span class="hljs-comment">// 输出：-1（x小于y，前小后大，直接出结果，后面不比了）</span><br></code></pre></td></tr></table></figure><h5 id="3-boolean-contains-CharSequence-s"><a href="#3-boolean-contains-CharSequence-s" class="headerlink" title="3. boolean contains(CharSequence s)"></a>3. <code>boolean contains(CharSequence s)</code></h5><p> 判断前面的字符串中是否包含后面的字符串</p><p><code>CharSequence</code> 是一个描述字符串结构的接口，在这个接口里面一般发现有三种常用的子类:<code>String</code> <code>StringBuffer</code> <code>StringBuilder</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;helloWorld.java&quot;</span>.contains(<span class="hljs-string">&quot;.java&quot;</span>));<span class="hljs-comment">// 输出：true</span><br>System.out.println(<span class="hljs-string">&quot;http://baidu.com&quot;</span>.contains(<span class="hljs-string">&quot;https://&quot;</span>));<span class="hljs-comment">// 输出：false</span><br></code></pre></td></tr></table></figure><h5 id="4-boolean-startsWith-String-prefix"><a href="#4-boolean-startsWith-String-prefix" class="headerlink" title="4. boolean startsWith(String prefix)"></a>4. <code>boolean startsWith(String prefix)</code></h5><p>判断某个字符串是否以某个字符串开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>.startsWith(<span class="hljs-string">&quot;http&quot;</span>));<span class="hljs-comment">// 输出：true</span><br>System.out.println(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>.startsWith(<span class="hljs-string">&quot;https&quot;</span>));<span class="hljs-comment">// 输出：false</span><br></code></pre></td></tr></table></figure><h5 id="5-boolean-endsWith-String-suffix"><a href="#5-boolean-endsWith-String-suffix" class="headerlink" title="5. boolean endsWith(String suffix)"></a>5. <code>boolean endsWith(String suffix)</code></h5><p>判断某个字符串是否以某个字符串开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;test.txt&quot;</span>.endsWith(<span class="hljs-string">&quot;.java&quot;</span>));<span class="hljs-comment">// 输出：false</span><br>System.out.println(<span class="hljs-string">&quot;test.txt&quot;</span>.endsWith(<span class="hljs-string">&quot;.txt&quot;</span>));<span class="hljs-comment">// 输出：true</span><br></code></pre></td></tr></table></figure><h5 id="6-boolean-equalsIgnoreCase-String-anotherString"><a href="#6-boolean-equalsIgnoreCase-String-anotherString" class="headerlink" title="6. boolean equalsIgnoreCase(String anotherString)"></a>6. <code>boolean equalsIgnoreCase(String anotherString)</code></h5><p>判断两个字符串是否相等，并且忽略大小写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;ABC&quot;</span>.equalsIgnoreCase(<span class="hljs-string">&quot;aBC&quot;</span>));<span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h5 id="7-byte-getBytes"><a href="#7-byte-getBytes" class="headerlink" title="7. byte[] getBytes()"></a>7. <code>byte[] getBytes()</code></h5><p>将字符串对象转化为 byte 数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">byte</span>[] bytes = <span class="hljs-string">&quot;abcde&quot;</span>.getBytes();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; bytes.length; i++) &#123;<br>    System.out.println(bytes[i]);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">97</span><br><span class="hljs-comment">        98</span><br><span class="hljs-comment">        99</span><br><span class="hljs-comment">        100</span><br><span class="hljs-comment">        101</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h5 id="8-char-toCharArray"><a href="#8-char-toCharArray" class="headerlink" title="8. char[] toCharArray()"></a>8. <code>char[] toCharArray()</code></h5><p>将字符串对象转换为 char 数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span>[] chars = <span class="hljs-string">&quot;我是中国人&quot;</span>.toCharArray();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; chars.length; i++) &#123;<br>    System.out.println(chars[i]);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">我</span><br><span class="hljs-comment">        是</span><br><span class="hljs-comment">        中</span><br><span class="hljs-comment">        国</span><br><span class="hljs-comment">        人</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h5 id="9-int-indexOf-String-str"><a href="#9-int-indexOf-String-str" class="headerlink" title="9. int indexOf(String str)"></a>9. <code>int indexOf(String str)</code></h5><p>判断某个字符串在当前字符串中第一次出现处的索引</p><p>如果为这个当前字符串中没有该字符串，返回 -1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;abcdefghijklmn&quot;</span>.indexOf(<span class="hljs-string">&quot;fgh&quot;</span>));<span class="hljs-comment">// 输出：5</span><br>System.out.println(<span class="hljs-string">&quot;abcdefghijklmn&quot;</span>.indexOf(<span class="hljs-string">&quot;fd&quot;</span>));<span class="hljs-comment">// 输出：-1</span><br></code></pre></td></tr></table></figure><h5 id="10-int-lastIndexOf-String-str"><a href="#10-int-lastIndexOf-String-str" class="headerlink" title="10. int lastIndexOf(String str)"></a>10. <code>int lastIndexOf(String str)</code></h5><p>判断某个字符串在当前字符串中最后一次出现处的索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;abcdefgabc&quot;</span>.lastIndexOf(<span class="hljs-string">&quot;abc&quot;</span>));<span class="hljs-comment">// 输出：7</span><br></code></pre></td></tr></table></figure><h5 id="11-boolean-isEmpty"><a href="#11-boolean-isEmpty" class="headerlink" title="11. boolean isEmpty()"></a>11. <code>boolean isEmpty()</code></h5><p>判断当前字符串是否为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;&quot;</span>.isEmpty());<span class="hljs-comment">// 输出：true</span><br>System.out.println(<span class="hljs-string">&quot;abc&quot;</span>.isEmpty());<span class="hljs-comment">// 输出：false</span><br></code></pre></td></tr></table></figure><h5 id="12-int-length"><a href="#12-int-length" class="headerlink" title="12. int length()"></a>12. <code>int length()</code></h5><p>返回字符串长度</p><p><strong>注意：面试题</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">判断数组长度和字符串长度不一样<br>判断数组长度是<span class="hljs-built_in">length</span>属性，判断字符串长度是<span class="hljs-built_in">length</span>()方法<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;abcdefg&quot;</span>.length());<span class="hljs-comment">// 输出：7</span><br></code></pre></td></tr></table></figure><h5 id="13-String-replace-CharSequence-target-CharSequence-replacement"><a href="#13-String-replace-CharSequence-target-CharSequence-replacement" class="headerlink" title="13. String replace(CharSequence target, CharSequence replacement)"></a>13. <code>String replace(CharSequence target, CharSequence replacement)</code></h5><p>将当前字符串中的 target替换为 replacement</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String newString = <span class="hljs-string">&quot;http://www.baidu.com&quot;</span>.replace(<span class="hljs-string">&quot;http&quot;</span>, <span class="hljs-string">&quot;https&quot;</span>);<br>System.out.println(newString);<span class="hljs-comment">// 输出：https://www.baidu.com</span><br></code></pre></td></tr></table></figure><h5 id="14-String-split-String-regex"><a href="#14-String-split-String-regex" class="headerlink" title="14. String[] split(String regex)"></a>14. <code>String[] split(String regex)</code></h5><p>regex 为正则表达式</p><p>拆分字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] newStrings = <span class="hljs-string">&quot;name=zhangsan&amp;password=123&amp;age=20&quot;</span>.split(<span class="hljs-string">&quot;&amp;&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; newString.length; i++) &#123;<br>    System.out.println(newStrings[i]);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">name=zhangsan</span><br><span class="hljs-comment">        password=123</span><br><span class="hljs-comment">        age=20</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h5 id="15-String-substring-int-beginIndex"><a href="#15-String-substring-int-beginIndex" class="headerlink" title="15. String substring(int beginIndex)"></a>15. <code>String substring(int beginIndex)</code></h5><p>从索引 <code>beginIndex</code> 处开始截取字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>.substring(<span class="hljs-number">7</span>));<span class="hljs-comment">// 输出：www.baidu.com</span><br></code></pre></td></tr></table></figure><p><code>String substring(int beginIndex, int endIndex)</code></p><p><code>beginIndex</code>：起始索引（包括）<br><code>endIndex</code>：结束索引（不包括）<br>左闭右开 [ <code>beginIndex</code>,<code> endIndex</code> )</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>.substring(<span class="hljs-number">11</span>, <span class="hljs-number">16</span>));<span class="hljs-comment">// 输出：baidu</span><br></code></pre></td></tr></table></figure><h5 id="16-String-toLowerCase"><a href="#16-String-toLowerCase" class="headerlink" title="16. String toLowerCase()"></a>16. <code>String toLowerCase()</code></h5><p>将当前字符串转换为小写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String newString = <span class="hljs-string">&quot;ABCdeFg&quot;</span>.toLowerCase();<br>System.out.println(newString);<span class="hljs-comment">// 输出：abcdefg</span><br></code></pre></td></tr></table></figure><h5 id="17-String-trim"><a href="#17-String-trim" class="headerlink" title="17. String trim()"></a>17. <code>String trim()</code></h5><p>将当前字符串 “前 后” 的空格去掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;   abc   def    &quot;</span>.trim());<span class="hljs-comment">// 输出：abc   def</span><br></code></pre></td></tr></table></figure><h5 id="18-static-String-valueOf-boolean-b"><a href="#18-static-String-valueOf-boolean-b" class="headerlink" title="18. static String valueOf(boolean b)"></a>18. <code>static String valueOf(boolean b)</code></h5><p>将 “非字符串” 转化为 “字符串”</p><p>有好多重载的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> b)</span><span class="hljs-comment">// 将 boolean 类型元素转换为字符串</span></span><br><span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span><span class="hljs-comment">// 将 char 类型元素转换为字符串</span></span><br><span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] data)</span><span class="hljs-comment">// 将 char 类型的数组元素转化为字符串</span></span><br><span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] data, <span class="hljs-keyword">int</span> offset, <span class="hljs-keyword">int</span> count)</span><span class="hljs-comment">// 将 char 类型的数组元素一部分转化为字符串，offset表示首元素索引，count表示长度</span></span><br><span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">double</span> d)</span><span class="hljs-comment">// 将 double 类型元素转化为字符串</span></span><br><span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">float</span> f)</span><span class="hljs-comment">// 将 float 类型元素转化为字符串</span></span><br><span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span><span class="hljs-comment">// 将 int 类型元素转化为字符串</span></span><br><span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">long</span> l)</span><span class="hljs-comment">// 将 long 类型元素怒转化为字符串</span></span><br><span class="hljs-function"><span class="hljs-keyword">static</span> String <span class="hljs-title">valueOf</span><span class="hljs-params">(Object obj)</span><span class="hljs-comment">// 将引用数据类型转化为字符串，会自动调用该类的toStirng方法</span></span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(String.valueOf(<span class="hljs-keyword">true</span>));<span class="hljs-comment">// 输出：true（String类型的）</span><br>        System.out.println(String.valueOf(<span class="hljs-number">100</span>));<span class="hljs-comment">// 输出：100（String类型的）</span><br>        System.out.println(String.valueOf(<span class="hljs-number">3.14159</span>));<span class="hljs-comment">// 输出：3.14159（String类型的）</span><br>        <span class="hljs-comment">// 静态方法valueOf()方法，参数是一个对象的时候，会调用该对象的toString()方法</span><br>        <span class="hljs-comment">// 没重写toString()方法，输出：javase.api.string.Customer@4fca772d（当前对象的默认toStirng方法的输出结果）</span><br>        <span class="hljs-comment">// 重写toString()方法，输出：toString()方法被调用了！</span><br>        System.out.println(String.valueOf(<span class="hljs-keyword">new</span> Customer()));<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;toString()方法被调用了！&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="16-2-StringBuffer"><a href="#16-2-StringBuffer" class="headerlink" title="16.2 StringBuffer"></a>16.2 StringBuffer</h3><p><strong>因为在 Java 中字符串是不可变的，每一次的字符串拼接都会产生新的字符串，这样会占用大量的方法区内存，造成空间浪费。</strong></p><p>如果要进行大量的字符串的拼接操作，建议使用 JDK 中自带的：</p><pre><code>`java.lang.StringBuffer``java.lang.StringBuilder`</code></pre><p><strong>如何优化 StringBuffer 的性能</strong></p><ul><li>在创建的时候尽可能给定一个初始化容量</li><li>最好减少底层数组的扩容次数，预估一下，给一个大一些初始化容量</li><li>关键点：给一个适合的初始化容量，可以提高程序的运行效率。</li></ul><p><strong><code>StringBuffer</code> 和 <code>StringBuilder</code> 的区别</strong></p><ul><li><code>StringBuffer</code> 中的方法都有 <code>synchronized</code> 关键字修饰，表示在多线程环境下运行是安全的</li><li><code>StringBuilder</code> 是非线程安全的，但是效率高</li></ul><h3 id="16-3-基础类型对应的8个包装类"><a href="#16-3-基础类型对应的8个包装类" class="headerlink" title="16.3 基础类型对应的8个包装类"></a>16.3 基础类型对应的8个包装类</h3><table><thead><tr><th>基础类型</th><th align="left">包装类</th><th>父类</th></tr></thead><tbody><tr><td><strong>byte</strong></td><td align="left"><strong>java.lang.Byte</strong></td><td><strong>java.lang.Number</strong></td></tr><tr><td><strong>short</strong></td><td align="left"><strong>java.lang.Short</strong></td><td><strong>java.lang.Number</strong></td></tr><tr><td><strong>int</strong></td><td align="left"><strong>java.lang.Integer</strong></td><td><strong>java.lang.Number</strong></td></tr><tr><td><strong>long</strong></td><td align="left"><strong>java.lang.Long</strong></td><td><strong>java.lang.Number</strong></td></tr><tr><td><strong>float</strong></td><td align="left"><strong>java.lang.Float</strong></td><td><strong>java.lang.Number</strong></td></tr><tr><td><strong>double</strong></td><td align="left"><strong>java.lang.Double</strong></td><td><strong>java.lang.Number</strong></td></tr><tr><td><strong>boolean</strong></td><td align="left"><strong>java.lang.Boolean</strong></td><td><strong>java.lang.Object</strong></td></tr><tr><td><strong>char</strong></td><td align="left"><strong>java.lang.Character</strong></td><td><strong>java.lang.Object</strong></td></tr></tbody></table><h4 id="16-3-1-装箱和拆箱"><a href="#16-3-1-装箱和拆箱" class="headerlink" title="16.3.1 装箱和拆箱"></a>16.3.1 装箱和拆箱</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 123这个基本数据类型，进行构造方法的包装达到了：基本数据类型向引用数据类型的转换</span><br>        <span class="hljs-comment">// 基本数据类型 --（转换为）--&gt; 引用数据类型 ：装箱</span><br>        Integer integer = <span class="hljs-keyword">new</span> Integer(<span class="hljs-number">123</span>);<br>        <span class="hljs-comment">// 将引用数据类型 --（装换为）--&gt; 基本数据类型 ： 拆箱</span><br>        <span class="hljs-keyword">float</span> f = integer.floatValue();<br>        System.out.println(f);<span class="hljs-comment">// 输出：123.0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>八种包装类中其中6个都是数字对应的包装类，他们的父类都是Number，可以先研究一下Number中公共的方法：</p><ul><li>Number是一个抽象类，无法实例化对象。</li><li>Number类中有这样的方法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">byte</span> <span class="hljs-title">byteValue</span><span class="hljs-params">()</span> <span class="hljs-comment">// 以 byte 形式返回指定的数值。</span></span><br><span class="hljs-function"><span class="hljs-keyword">abstract</span>  <span class="hljs-keyword">double</span> <span class="hljs-title">doubleValue</span><span class="hljs-params">()</span> <span class="hljs-comment">// 以 double 形式返回指定的数值。</span></span><br><span class="hljs-function"><span class="hljs-keyword">abstract</span>  <span class="hljs-keyword">float</span> <span class="hljs-title">floatValue</span><span class="hljs-params">()</span> <span class="hljs-comment">// 以 float 形式返回指定的数值。</span></span><br><span class="hljs-function"><span class="hljs-keyword">abstract</span>  <span class="hljs-keyword">int</span> <span class="hljs-title">intValue</span><span class="hljs-params">()</span> <span class="hljs-comment">// 以 int 形式返回指定的数值。</span></span><br><span class="hljs-function"><span class="hljs-keyword">abstract</span>  <span class="hljs-keyword">long</span> <span class="hljs-title">longValue</span><span class="hljs-params">()</span> <span class="hljs-comment">// 以 long 形式返回指定的数值。</span></span><br><span class="hljs-function"><span class="hljs-keyword">short</span> <span class="hljs-title">shortValue</span><span class="hljs-params">()</span> <span class="hljs-comment">// 以 short 形式返回指定的数值。</span></span><br><span class="hljs-function"><span class="hljs-comment">// 这些方法其实所有的数字包装类的子类都有，这些方法是负责拆箱的。</span></span><br></code></pre></td></tr></table></figure><h4 id="16-3-2-通过包装类中的常量来获取最大值和最小值"><a href="#16-3-2-通过包装类中的常量来获取最大值和最小值" class="headerlink" title="16.3.2 通过包装类中的常量来获取最大值和最小值"></a>16.3.2 通过包装类中的常量来获取最大值和最小值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 通过包装类的常量来获取最大值和最小值</span><br>System.out.println(Integer.MAX_VALUE);<span class="hljs-comment">// 2147483647</span><br>System.out.println(Integer.MIN_VALUE);<span class="hljs-comment">// -2147483648</span><br>System.out.println(Double.MAX_VALUE);<span class="hljs-comment">// 1.7976931348623157E308</span><br></code></pre></td></tr></table></figure><h4 id="16-3-3-自从-JDK1-5-之后支持了自动装箱和自动拆箱"><a href="#16-3-3-自从-JDK1-5-之后支持了自动装箱和自动拆箱" class="headerlink" title="16.3.3 自从 JDK1.5 之后支持了自动装箱和自动拆箱"></a>16.3.3 自从 JDK1.5 之后支持了自动装箱和自动拆箱</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 自动装箱：基本数据类型自动转换为包装类</span><br><span class="hljs-comment">// int ---&gt; Integer</span><br>Integer i = <span class="hljs-number">100</span>;<br><span class="hljs-comment">// 自动拆箱：包装类自动转换为基本数据类型</span><br><span class="hljs-comment">// Integer ---&gt; int</span><br><span class="hljs-keyword">int</span> i1 = i;<br></code></pre></td></tr></table></figure><h4 id="16-3-4-比较两个Integer是否相等"><a href="#16-3-4-比较两个Integer是否相等" class="headerlink" title="16.3.4 比较两个Integer是否相等"></a>16.3.4 比较两个Integer是否相等</h4><ol><li>Integer是int的包装类，比较两个对象是否相等不能使用==，应该使用equals。</li><li><strong>java 中为了提高程序的执行效率，将 [-128. 127] 之间的所有包装对象提前创建好，放到了一个方法区的 “整数型常量池” 当中，目的是只要用这个区间的数据不需要在 new 对象了，直接从整数型常量中取出来就可以了。</strong></li><li><strong>-128至127（包括-128和127）范围内使用==比较，返回true，反之false</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// i1 和 i2 中保存的内存地址是一样的，因为 127 保存在方法区的整数型常量池当中，不会在堆内存中 new 对象，直接取常量池当中的数据，所以内存地址相同。</span><br>Integer i1 = <span class="hljs-number">127</span>;<br>Integer i2 = <span class="hljs-number">127</span>;<br><span class="hljs-comment">// i3 和 i4 中保存的内存地址是不一样的，因为 128 不在[-128, 127] 内，不在整数型常量池当中，创建的时候要在堆内存中 new 对象，对象的内存地址是不同的。</span><br>Integer i3 = <span class="hljs-number">128</span>;<br>Integer i4 = <span class="hljs-number">128</span>;<br>SYstem.out.println(i1 == i2);<span class="hljs-comment">// 输出：true</span><br>System.out.println(i3 == i4);<span class="hljs-comment">// 输出：false</span><br></code></pre></td></tr></table></figure><h4 id="16-3-5-cache缓存机制"><a href="#16-3-5-cache缓存机制" class="headerlink" title="16.3.5 cache缓存机制"></a>16.3.5 cache缓存机制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 源码</span><br><span class="hljs-comment">// 这是 Integer 类中的内部类，在类加载的时候，会在整数型常量池中初始化 256 个对象。</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntegerCache</span> </span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> low = -<span class="hljs-number">128</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> high;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Integer cache[];<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// high value may be configured by property</span><br>        <span class="hljs-keyword">int</span> h = <span class="hljs-number">127</span>;<br>        String integerCacheHighPropValue =<br>            sun.misc.VM.getSavedProperty(<span class="hljs-string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);<br>        <span class="hljs-keyword">if</span> (integerCacheHighPropValue != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">int</span> i = parseInt(integerCacheHighPropValue);<br>                i = Math.max(i, <span class="hljs-number">127</span>);<br>                <span class="hljs-comment">// Maximum array size is Integer.MAX_VALUE</span><br>                h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span>( NumberFormatException nfe) &#123;<br>                <span class="hljs-comment">// If the property cannot be parsed into an int, ignore it.</span><br>            &#125;<br>        &#125;<br>        high = h;<br><br>        cache = <span class="hljs-keyword">new</span> Integer[(high - low) + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">int</span> j = low;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; cache.length; k++)<br>            cache[k] = <span class="hljs-keyword">new</span> Integer(j++);<br><br>        <span class="hljs-comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span><br>        <span class="hljs-keyword">assert</span> IntegerCache.high &gt;= <span class="hljs-number">127</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">IntegerCache</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 源码</span><br><span class="hljs-comment">// 判断当前整数是否在 [-128, 127] 范文内，如果在，直接从常量池中区，如果不在，就 new 对象</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title">valueOf</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br>        <span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Integer(i);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="16-3-6-NumberFormatException"><a href="#16-3-6-NumberFormatException" class="headerlink" title="16.3.6 NumberFormatException"></a>16.3.6 NumberFormatException</h4><p>当在 Integer 的构造方法中传入一个非整数型的字符串，会报异常（数字格式化异常）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer i1 = <span class="hljs-keyword">new</span> Integer(<span class="hljs-string">&quot;中文&quot;</span>);<br>System.out.println(i1);<br><span class="hljs-comment">// Exception in thread &quot;main&quot; java.lang.NumberFormatException: For input string: &quot;中文&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 总结已学过的经典异常</span><br>空指针异常：NullPointerException<br>类转换异常：ClassCastException<br>数组下标越界异常：ArrayIndexOutOfBoundsException<br>数字格式化异常：NumberFormatException<br></code></pre></td></tr></table></figure><h4 id="16-3-7-常用方法"><a href="#16-3-7-常用方法" class="headerlink" title="16.3.7 常用方法"></a>16.3.7 常用方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span><span class="hljs-title">parseInt</span><span class="hljs-params">(String s)</span><span class="hljs-comment">// 将字符串转换为int类型数字</span></span><br><span class="hljs-function">    </span><br><span class="hljs-function"><span class="hljs-keyword">static</span> String<span class="hljs-title">toBinaryString</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span><span class="hljs-comment">// 将十进制整数转换为二进制形式的字符串</span></span><br><span class="hljs-function">    </span><br><span class="hljs-function"><span class="hljs-keyword">static</span> String<span class="hljs-title">toHexString</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span><span class="hljs-comment">// 将十进制整数转换为十六进制的字符串</span></span><br><span class="hljs-function">    </span><br><span class="hljs-function"><span class="hljs-keyword">static</span> String<span class="hljs-title">toOctalString</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span><span class="hljs-comment">// 将十进制整数转换为八进制的字符串</span></span><br></code></pre></td></tr></table></figure><h4 id="16-3-8-String-int-Integer-之间的相互转化"><a href="#16-3-8-String-int-Integer-之间的相互转化" class="headerlink" title="16.3.8 String    int    Integer 之间的相互转化"></a>16.3.8 String    int    Integer 之间的相互转化</h4><p><img src="https://img-blog.csdnimg.cn/20210216135401651.png" alt="image-20210216135247764"></p><h3 id="16-4-日期相关类"><a href="#16-4-日期相关类" class="headerlink" title="16.4 日期相关类"></a>16.4 日期相关类</h3><h4 id="16-4-1-获取系统的当前时间（精确到毫秒的系统当前时间）"><a href="#16-4-1-获取系统的当前时间（精确到毫秒的系统当前时间）" class="headerlink" title="16.4.1 获取系统的当前时间（精确到毫秒的系统当前时间）"></a>16.4.1 获取系统的当前时间（精确到毫秒的系统当前时间）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Date nowTime = <span class="hljs-keyword">new</span> Date();<br>System.out.println(nowTime);<span class="hljs-comment">// 输出：Tue Feb 16 14:05:06 CST 2021</span><br></code></pre></td></tr></table></figure><h4 id="16-4-2-日期格式化"><a href="#16-4-2-日期格式化" class="headerlink" title="16.4.2 日期格式化"></a>16.4.2 日期格式化</h4><p>将日期类 Date，按照指定的格式进行转换：Date —&gt; 转换成为具有一定格式的日期字符串 —&gt; String</p><p><strong><code>java.text.SimpleDateFormat</code> 是专门负责日期格式化的。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Date --(转换为)--&gt; String</span><br>Date nowTime = <span class="hljs-keyword">new</span> Date();<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">yyyy 年(年是4位)</span><br><span class="hljs-comment">    MM 月（月是2位）</span><br><span class="hljs-comment">    dd 日</span><br><span class="hljs-comment">    HH 时</span><br><span class="hljs-comment">    mm 分</span><br><span class="hljs-comment">    ss 秒</span><br><span class="hljs-comment">    SSS 毫秒（毫秒3位，最高999。1000毫秒代表1秒）</span><br><span class="hljs-comment">    注意：在日期格式中，除了y M d H m s S这些字符不能随便写之外，剩下的符号格式自己随意组织。</span><br><span class="hljs-comment">    */</span><br>SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);<br>String time = sdf.format(nowTime);<br>System.out.println(time);<span class="hljs-comment">// 输出：2021-02-16 14:13:22 984</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// String --(转换为)--&gt; Date</span><br>String timeStr = <span class="hljs-string">&quot;2008-08-08 08:08:08 888&quot;</span>;<br>SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br>    Date time = simpleDateFormat.parse(timeStr);<br>    System.out.println(time);<span class="hljs-comment">// 输出：Fri Aug 08 08:08:08 CST 2008</span><br>&#125; <span class="hljs-keyword">catch</span> (ParseException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="16-4-3-获取自1970年1月1日-00-00-00-000（GMT-格林尼治标准时间）到当前系统时间的总毫秒数。"><a href="#16-4-3-获取自1970年1月1日-00-00-00-000（GMT-格林尼治标准时间）到当前系统时间的总毫秒数。" class="headerlink" title="16.4.3 获取自1970年1月1日 00:00:00 000（GMT 格林尼治标准时间）到当前系统时间的总毫秒数。"></a>16.4.3 获取自1970年1月1日 00:00:00 000（GMT 格林尼治标准时间）到当前系统时间的总毫秒数。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">long</span> nowTimeMillis = System.currentTimeMillis();<br>System.out.println(nowTimeMillis);<span class="hljs-comment">// 输出：1613459089458</span><br></code></pre></td></tr></table></figure><p>将获取到的毫秒数转化为日期格式（通过 Date 类的构造方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Date time = <span class="hljs-keyword">new</span> Date(<span class="hljs-number">1</span>);<br>        SimpleDateFormat simpleDateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-hh HH:mm:ss SSS&quot;</span>);<br>        String timeStr = simpleDateFormat.format(time);<br>        System.out.println(timeStr);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="16-5-数字相关类"><a href="#16-5-数字相关类" class="headerlink" title="16.5 数字相关类"></a>16.5 数字相关类</h3><h4 id="16-5-1-数字格式化"><a href="#16-5-1-数字格式化" class="headerlink" title="16.5.1 数字格式化"></a>16.5.1 数字格式化</h4><p><code>java.text.DecimalFormat</code> 专门负责数字格式化的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//DecimalFormat df = new DecimalFormat(&quot;数字格式&quot;);</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">数字格式有哪些？</span><br><span class="hljs-comment">    # 代表任意数字</span><br><span class="hljs-comment">    , 代表千分位</span><br><span class="hljs-comment">    . 代表小数点</span><br><span class="hljs-comment">    0 代表不够时补0</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">###,###.##</span><br><span class="hljs-comment">    表示：加入千分位，保留2个小数。</span><br><span class="hljs-comment">    */</span><br>DecimalFormat df = <span class="hljs-keyword">new</span> DecimalFormat(<span class="hljs-string">&quot;###,###.##&quot;</span>);<br><span class="hljs-comment">//String s = df.format(1234.56);</span><br>String s = df.format(<span class="hljs-number">1234.561232</span>);<br>System.out.println(s); <span class="hljs-comment">// &quot;1,234.56&quot;</span><br><br>DecimalFormat df2 = <span class="hljs-keyword">new</span> DecimalFormat(<span class="hljs-string">&quot;###,###.0000&quot;</span>); <span class="hljs-comment">//保留4个小数位，不够补上0</span><br>String s2 = df2.format(<span class="hljs-number">123456789.56</span>);<br>System.out.println(s2); <span class="hljs-comment">// &quot;123,456,789.5600&quot;</span><br></code></pre></td></tr></table></figure><h4 id="16-5-2-java-math-DigDecimal"><a href="#16-5-2-java-math-DigDecimal" class="headerlink" title="16.5.2 java.math.DigDecimal"></a>16.5.2 java.math.DigDecimal</h4><p>BigDecimal 属于大数据，精度极高。不属于基本数据类型，属于java对象（引用数据类型），这是SUN提供的一个类。专门用在财务软件当中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这个100不是普通的100，是精度极高的100</span><br>BigDecimal v1 = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-number">100</span>);<br><span class="hljs-comment">// 精度极高的200</span><br>BigDecimal v2 = <span class="hljs-keyword">new</span> BigDecimal(<span class="hljs-number">200</span>);<br><span class="hljs-comment">// 求和</span><br><span class="hljs-comment">// v1 + v2; // 这样不行，v1和v2都是引用，不能直接使用+求和。</span><br>BigDecimal v3 = v1.add(v2); <span class="hljs-comment">// 调用方法求和。</span><br>System.out.println(v3); <span class="hljs-comment">//300</span><br><br>BigDecimal v4 = v2.divide(v1);<br>System.out.println(v4); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h3 id="16-6-Random随机数"><a href="#16-6-Random随机数" class="headerlink" title="16.6 Random随机数"></a>16.6 Random随机数</h3><h4 id="16-6-1-产生随机数"><a href="#16-6-1-产生随机数" class="headerlink" title="16.6.1 产生随机数"></a>16.6.1 产生随机数</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建随机数对象</span><br>Random random = <span class="hljs-keyword">new</span> Random();<br><br><span class="hljs-comment">// 随机产生一个 int 类型范围内的数据</span><br><span class="hljs-keyword">int</span> num01 = random.nextInt();<br>System.out.println(num01);<br><br><span class="hljs-comment">// 随机产生一个 [0 , 101) 范围内的整数，不包括 101</span><br><span class="hljs-keyword">int</span> num02 = random.nextInt(<span class="hljs-number">101</span>);<br>System.out.println(num02);<br></code></pre></td></tr></table></figure><h4 id="16-6-2-测试"><a href="#16-6-2-测试" class="headerlink" title="16.6.2 测试"></a>16.6.2 测试</h4><p>编写程序，生成5个不重复的随机数[0-4]。重复的话重新生成。最终生成的5个随机数放到数组中，要求数组中这5个随机数不重复。</p><ul><li>自己的想法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>];<br>        Random random = <span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-comment">// 给数组中的每一个数赋初值 -1</span><br>        Arrays.fill(arr, -<span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// 赋值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">int</span> num = random.nextInt(<span class="hljs-number">5</span>);<br>            <span class="hljs-keyword">if</span> (check(num, arr)) &#123;<br>                num = rebuild(num, arr);<br>            &#125;<br>            arr[i] = num;<br>        &#125;<br><br>        <span class="hljs-comment">// 输出</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : arr) &#123;<br>            System.out.println(num);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用递归重新生成一个数（没有出现过的）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> num 需要被重新生成的数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr 数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 重新生成的 num</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rebuild</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num, <span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        Random random = <span class="hljs-keyword">new</span> Random();<br>        num = random.nextInt(<span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">if</span> (check(num, arr)) &#123;<br>            num = rebuild(num, arr);<br>        &#125;<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断 num 在 arr 数组中书否存在</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> num 被判断的数字</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr 数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true表示存在， false表示不存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num, <span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j : arr) &#123;<br>            <span class="hljs-keyword">if</span> (num == j) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-comment">/*int[] array = new int[arr.length];</span><br><span class="hljs-comment">        // 数组拷贝</span><br><span class="hljs-comment">        System.arraycopy(arr, 0, array, 0, arr.length);</span><br><span class="hljs-comment">        // 数组排序</span><br><span class="hljs-comment">        Arrays.sort(array);</span><br><span class="hljs-comment">        // 二分法查找，找到的话返回的值会大于等于 0</span><br><span class="hljs-comment">        return Arrays.binarySearch(array, num) &gt;= 0;*/</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>老师的想法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test02</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建Random对象</span><br>        Random random = <span class="hljs-keyword">new</span> Random();<br><br>        <span class="hljs-comment">// 准备一个长度为5的一维数组。</span><br>        <span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>];<br>        Arrays.fill(arr, -<span class="hljs-number">1</span>);<span class="hljs-comment">// 数组元素赋值 -1</span><br><br>        <span class="hljs-comment">// 循环，生成随机数</span><br>        <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(index &lt; arr.length)&#123;<br>            <span class="hljs-keyword">int</span> num = random.nextInt(<span class="hljs-number">5</span>);<br>            <span class="hljs-keyword">if</span>(!check(num, arr))&#123;<br>                arr[index++] = num;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 输出</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : arr) &#123;<br>            System.out.println(num);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断 num 在 arr 数组中书否存在</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> num 被判断的数字</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr 数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true表示存在， false表示不存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num, <span class="hljs-keyword">int</span>[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j : arr) &#123;<br>            <span class="hljs-keyword">if</span> (num == j) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="16-7-Enum枚举"><a href="#16-7-Enum枚举" class="headerlink" title="16.7 Enum枚举"></a>16.7 Enum枚举</h3><p>枚举是一种<strong>引用数据类型</strong></p><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">enum</span> 枚举类型名 </span>&#123;<br>    枚举值<span class="hljs-number">1</span>, 枚举值<span class="hljs-number">2</span><br>&#125;<br></code></pre></td></tr></table></figure><p>结果只有两种情况的时候，建议使用 boolean 类型，</p><p>当结果超过两种并且还是可以一枚一枚列举 出来的，建议使用枚举类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Result result = divide(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>);<br>        System.out.println(result == Result.SUCCESS ? <span class="hljs-string">&quot;计算成功&quot;</span> : <span class="hljs-string">&quot;计算失败&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算两个int类型数据的商。</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a int数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> b int数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Result.SUCCESS表示成功，Result.FAIL表示失败！</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Result <span class="hljs-title">divide</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">int</span> c = a / b;<br>            <span class="hljs-keyword">return</span> Result.SUCCESS;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            <span class="hljs-keyword">return</span> Result.FALSE;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Result</span> </span>&#123;<br>    SUCCESS, FALSE<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15、数组</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E6%95%B0%E7%BB%84/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="15-1-数组概要"><a href="#15-1-数组概要" class="headerlink" title="15.1 数组概要"></a>15.1 数组概要</h3><ul><li>Java 语言中的数组是一种引用数据类型，不属于基本数据类型，数组的父类是 Object</li><li><strong>数组实际上是一个容器</strong>，可以同时容纳多个元素</li><li>数组中既可以存储基本数据类型数据，也可以存储引用数据类型数据</li><li>数组对象存储在堆内存中</li><li><strong>数组当中如果存储的是 “引用数据类型”，实际上存储的是对象的 “引用” （对象的内存地址）</strong></li><li>==数组一旦创建，在 Java 中规定，数组长度不可变。==访问元素时，如果下标越界，会出现异常 ArrayIndexOutOfBoundsException（数组下标越界异常）</li><li>数组的内存结构</li></ul><p><img src="https://img-blog.csdnimg.cn/2021020821085041.png" alt="image-20210208210831787"></p><ul><li><p>==所有数组对象都有一个 “length” 属性（Java自带的），用来获得数组中元素的个数。==</p></li><li><p>数组存储的元素类型统一。</p></li><li><p>数组中每一个元素存储的内存地址是连续的。</p></li><li><p>==将数组中第一个元素的内存地址作为整个数组对象的内存地址。==</p></li><li><p>数组元素的下标从 0 开始，最后一个元素的下标是： length- 1</p></li><li><p>数组这种数据结构的优点和缺点：</p><ul><li><p>优点：查询/检索某个下标的元素速度极快</p><ul><li>因为每一个元素的内存地址在空间存储上是连续的</li><li>同时每一元素所占用的空间大小都是一样的</li><li>指导了第一个元素的地址和要查询的元素的下标，就可以通过数学表达式计算出元素的地址，通过地址直接访问该元素。</li></ul></li><li><p>缺点：</p><ol><li>为了保证数组中每个元素内存地址连续，所以在数组上删除元素的时候，要统一将后面的元素向前或向后位移，效率较低。</li><li>不能存储大数据量：因为很难找到一块特别大的连续的内存空间。</li></ol></li></ul></li></ul><h3 id="15-2-一维数组"><a href="#15-2-一维数组" class="headerlink" title="15.2 一维数组"></a>15.2 一维数组</h3><h4 id="15-2-1-声明一维数组"><a href="#15-2-1-声明一维数组" class="headerlink" title="15.2.1 声明一维数组"></a>15.2.1 声明一维数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] array01;<br><span class="hljs-keyword">double</span>[] array02;<br>String[] array03;<br><span class="hljs-keyword">boolean</span>[] array04;<br>Object[] array05;<br></code></pre></td></tr></table></figure><h4 id="15-2-2-初始化一维数组"><a href="#15-2-2-初始化一维数组" class="headerlink" title="15.2.2 初始化一维数组"></a>15.2.2 初始化一维数组</h4><ul><li>静态初始化：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] array = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br></code></pre></td></tr></table></figure><ul><li>动态初始化：数组长度为 5，每个数组元素元素的值为 0</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>];<span class="hljs-comment">// 初始化5个长度的int类型数组，每个元素默认值为0</span><br>String[] array2 = <span class="hljs-keyword">new</span> String[<span class="hljs-number">6</span>];<span class="hljs-comment">// 初始哈6个长度的String类型数组，每个元素默认值null</span><br></code></pre></td></tr></table></figure><ul><li><p>什么时候静态初始化，什么时候动态初始化：</p><ul><li>当数组中的元素已经确定下来的时候，使用静态初始化。</li><li>当数组中元素暂时不能确定下来的时候，动态初始化先把空间占了，之后在赋值。</li></ul></li><li><p>方法的参数是数组</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String[] array = <span class="hljs-keyword">new</span> String[<span class="hljs-number">5</span>];<br>        String[] array02 = &#123;<span class="hljs-string">&quot;fff&quot;</span>, <span class="hljs-string">&quot;sss&quot;</span>, <span class="hljs-string">&quot;vvv&quot;</span>&#125;;<br>        <span class="hljs-comment">// 向数组中传一个动态初始化的数组</span><br>        print(<span class="hljs-keyword">new</span> String[<span class="hljs-number">6</span>]);<br>        <span class="hljs-comment">// 向数组中传一个静态初始化的数组</span><br>        print(<span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;12&quot;</span>, <span class="hljs-string">&quot;34&quot;</span>, <span class="hljs-string">&quot;56&quot;</span>&#125;);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(String[] array)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= array.length - <span class="hljs-number">1</span>; i++) &#123;<br>            System.out.println(array[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="15-2-3-mian方法中的String数组"><a href="#15-2-3-mian方法中的String数组" class="headerlink" title="15.2.3 mian方法中的String数组"></a>15.2.3 mian方法中的String数组</h4><p>JVM调用 mian 方法的时候，会自动传一个 String 类型的数组过来</p><p><strong>这个数组对象的长度是：0</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;JVM传递过来的数组的长度是：&quot;</span> + args.length);<span class="hljs-comment">// 输出：JVM传递过来的数组的长度是：0</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>==<strong>其实这个数组是留给用户的，用户可以在控制台上输入参数，这个参数自动会被转换为“String[] args”</strong>==</p><p>如在 cmd 窗口输入<code> java Test abc def ghi</code></p><p>JVM会自动将字符串 “abc def ghi” 按照空格分离，组成一个字符串</p><p>此时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;JVM传递过来的数组的长度是：&quot;</span> + args.length);<span class="hljs-comment">// 输出：JVM传递过来的数组的长度是：3</span><br></code></pre></td></tr></table></figure><ul><li>编历 args数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= args.length - <span class="hljs-number">1</span> ;i++) &#123;<br>    System.out.println(<span class="hljs-string">&quot;args[&quot;</span> + i + <span class="hljs-string">&quot;] = &quot;</span> + args[i]);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">args[0] = abc</span><br><span class="hljs-comment">        args[1] = def</span><br><span class="hljs-comment">        args[2] = ghi</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ul><li>使用 IDEA 给 args 数组传参数</li></ul><p><img src="https://img-blog.csdnimg.cn/20210209111158879.png" alt="image-20210209110849937"> </p><p><img src="https://img-blog.csdnimg.cn/20210209111445177.png" alt="image-20210209111435213"></p><h4 id="15-2-4-数组扩容"><a href="#15-2-4-数组扩容" class="headerlink" title="15.2.4 数组扩容"></a>15.2.4 数组扩容</h4><p><strong>java中对数组的扩容是：先新建一个大容量的数组，然后将小容量数组中的数据一个一个拷贝到大数组当中。</strong></p><p>Java 的 <strong>==System 类中有一个静态方法 arraycopy( )==</strong> ，可以进行数组扩容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">arraycopy(Object src, <span class="hljs-keyword">int</span> srcPos, Object dest, <span class="hljs-keyword">int</span> destPos, <span class="hljs-keyword">int</span> length)<br></code></pre></td></tr></table></figure><ul><li>Object src：拷贝源</li><li>int srcPos：源数组元素的起始位置</li><li>Object dest：目标数组</li><li>int destPos：目标数组元素的起始位置</li><li>int length：拷贝到元素的个数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<span class="hljs-comment">// 拷贝源</span><br>        <span class="hljs-keyword">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<span class="hljs-comment">// 目标数组1</span><br>        <span class="hljs-keyword">int</span>[] arr3 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<span class="hljs-comment">// 目标数组2</span><br>        <span class="hljs-comment">// 将 arr数组中从下标为 2的元素开始，拷贝 3个元素到 arr2数组，从下标为 3的位置开始放</span><br>        System.arraycopy(arr, <span class="hljs-number">2</span>, arr2, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>        <span class="hljs-comment">// 将 arr数组中的所用元素拷贝到 arr3数组中</span><br>        System.arraycopy(arr, <span class="hljs-number">0</span>, arr3, <span class="hljs-number">0</span>, arr.length);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr2.length; i++) &#123;<br>            System.out.println(arr2[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr3.length; i++) &#123;<br>            System.out.println(arr3[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="15-3-二维数组"><a href="#15-3-二维数组" class="headerlink" title="15.3  二维数组"></a>15.3  二维数组</h3><p>==<strong>二维数组就是一个特殊的一维数组，每一个元素都是一个一维数组。</strong>==</p><ul><li>静态初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[][] array = &#123;<br>    &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,<br>    &#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;,<br>    &#123;<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;<br>&#125;;<br><span class="hljs-comment">// 其中</span><br>System.out.println(array.length);<span class="hljs-comment">// 3</span><br>System.out.println(array[<span class="hljs-number">0</span>].length);<span class="hljs-comment">// 4</span><br>System.out.println(array[<span class="hljs-number">1</span>].length);<span class="hljs-comment">// 3</span><br>System.out.println(array[<span class="hljs-number">2</span>].length);<span class="hljs-comment">// 2</span><br><span class="hljs-comment">// 取出第一个一维数组</span><br><span class="hljs-keyword">int</span>[] array01 = array[<span class="hljs-number">0</span>];<br><span class="hljs-comment">// 取出第一个一维数组中的第一个元素</span><br><span class="hljs-keyword">int</span> elem11 = array[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]; <span class="hljs-comment">// elem11 = 1</span><br></code></pre></td></tr></table></figure><ul><li>动态初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[][] array2= <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>];<span class="hljs-comment">// 三个一维数组，每个一维数组中4个元素</span><br></code></pre></td></tr></table></figure><h3 id="15-4-冒泡排序算法"><a href="#15-4-冒泡排序算法" class="headerlink" title="15.4 冒泡排序算法"></a>15.4 冒泡排序算法</h3><p><a href="https://www.bilibili.com/video/BV1Rx411876f?p=577">视频讲解</a></p><ul><li>冒泡排序的过程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java">参与比较的数据：<span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">10</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">11</span><br><br>第<span class="hljs-number">1</span>次循环：<br><span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">11</span> (第<span class="hljs-number">1</span>次比较：交换)<br><span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">11</span> (第<span class="hljs-number">2</span>次比较：不交换)<br><span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">7</span> <span class="hljs-number">10</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">11</span> (第<span class="hljs-number">3</span>次比较：交换)<br><span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">10</span> <span class="hljs-number">0</span> <span class="hljs-number">11</span> (第<span class="hljs-number">4</span>次比较：交换)<br><span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> (第<span class="hljs-number">5</span>次比较：交换)<br><span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> (第<span class="hljs-number">6</span>次比较：不交换)<br>最终冒出的最大数据在右边：<span class="hljs-number">11</span><br><br>参与比较的数据：<span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">10</span><br>第<span class="hljs-number">2</span>次循环：<br><span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">10</span>（第<span class="hljs-number">1</span>次比较：不交换）<br><span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">10</span>（第<span class="hljs-number">2</span>次比较：交换）<br><span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">9</span> <span class="hljs-number">0</span> <span class="hljs-number">10</span>（第<span class="hljs-number">3</span>次比较：交换）<br><span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span>（第<span class="hljs-number">4</span>次比较：交换）<br><span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span>（第<span class="hljs-number">5</span>次比较：不交换）<br><br>参与比较的数据：<span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">9</span><br>第<span class="hljs-number">3</span>次循环：<br><span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">9</span>（第<span class="hljs-number">1</span>次比较：交换）<br><span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">8</span> <span class="hljs-number">0</span> <span class="hljs-number">9</span>（第<span class="hljs-number">2</span>次比较：交换）<br><span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>（第<span class="hljs-number">3</span>次比较：交换）<br><span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span>（第<span class="hljs-number">4</span>次比较：不交换）<br><br>参与比较的数据：<span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">8</span><br>第<span class="hljs-number">4</span>次循环：<br><span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">0</span> <span class="hljs-number">8</span>（第<span class="hljs-number">1</span>次比较：交换）<br><span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span>（第<span class="hljs-number">2</span>次比较：交换）<br><span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span>（第<span class="hljs-number">3</span>次比较：不交换）<br><br>参与比较的数据：<span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">7</span><br>第<span class="hljs-number">5</span>次循环：<br><span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span>（第<span class="hljs-number">1</span>次比较：交换）<br><span class="hljs-number">0</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span>（第<span class="hljs-number">2</span>次比较：不交换）<br><br>参与比较的数据：<span class="hljs-number">0</span> <span class="hljs-number">6</span><br>第<span class="hljs-number">6</span>次循环：<br><span class="hljs-number">0</span> <span class="hljs-number">6</span> （第<span class="hljs-number">1</span>次比较：不交换）<br><br></code></pre></td></tr></table></figure><ul><li>自己写一个冒泡排序</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] array = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">56</span>, <span class="hljs-number">66</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">100</span>&#125;;<br>        <span class="hljs-comment">// 每次循环完后冒出最大的元素放最后</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= array.length-<span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-comment">// 前后两个元素比较，大的往后移</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= array.length-(i+<span class="hljs-number">1</span>); j++) &#123;<br>                <span class="hljs-keyword">if</span> (array[j] &gt; array[j+<span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-keyword">int</span> temp = array[j];<br>                    array[j] = array[j+<span class="hljs-number">1</span>];<br>                    array[j+<span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 另一种写法</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = array.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (array[j] &gt; array[j+<span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-keyword">int</span> temp = array[j];<br>                    array[j] = array[j+<span class="hljs-number">1</span>];<br>                    array[j+<span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            System.out.println(array[i]);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="15-5-选择排序算法"><a href="#15-5-选择排序算法" class="headerlink" title="15.5 选择排序算法"></a>15.5 选择排序算法</h3><ul><li>原理：<strong>每一次从这堆参与比较的数据中找出最小值，那这个最小值和最前面的元素交换位置。</strong> </li><li><a href="https://www.bilibili.com/video/BV1Rx411876f?p=579">视频讲解</a></li><li>自己写的一个排序算法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] array = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">56</span>, <span class="hljs-number">66</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">100</span>&#125;;<br>        <span class="hljs-comment">// 分析一下</span><br>        <span class="hljs-comment">// 当前数组有7个元素</span><br>        <span class="hljs-comment">// 第【1】次 循环找到1是最小的，放到第【1】个位置，剩下【6】个数比较</span><br>        <span class="hljs-comment">// 第【2】次 循环找到2是最小的，放到第【2】个位置，剩下【5】个数比较</span><br>        <span class="hljs-comment">// 第【3】次 循环找到3是最小的，放到第【3】个位置，剩下【4】个数比较</span><br>        <span class="hljs-comment">// ......</span><br>        <span class="hljs-comment">// 第【6】次 循环找到66是最小的，放到第【6】个位置，循环结束。</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length-<span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-comment">// 先默认下标为 i的元素是最小的</span><br>            <span class="hljs-keyword">int</span> minNumIndex = i;<br>            <span class="hljs-comment">// 下标为 i的元素与其之后的元素一一比较</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; array.length; j++) &#123;<br>                <span class="hljs-comment">// 如果最小元素大于之后的元素</span><br>                <span class="hljs-keyword">if</span> (array[minNumIndex] &gt; array[j]) &#123;<br>                    <span class="hljs-comment">// 就将更小的元素的下标赋给 minNumIndex</span><br>                    minNumIndex = j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 如果 minNumIndex不等于默认的 i，就将第 i个元素和最小元素进行交换</span><br>            <span class="hljs-keyword">if</span> (minNumIndex != i) &#123;<br>                <span class="hljs-keyword">int</span> temp = array[i];<br>                array[i] = array[minNumIndex];<br>                array[minNumIndex] = temp;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            System.out.println(array[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="15-6-二分法查找"><a href="#15-6-二分法查找" class="headerlink" title="15.6 二分法查找"></a>15.6 二分法查找</h3><p><strong>二分查找算法是基于排序好的算法的。</strong></p><ul><li>自己写的二分法查找</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 从数组中查找目标元素的下标。</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> arr 被查找的数组（这个必须是已经排序的。）</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@param</span> dest 目标元素</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span> -1表示该元素不存在，其它表示返回该元素的下标。</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> dest)</span> </span>&#123;<br>    <span class="hljs-comment">// 开始下标</span><br>    <span class="hljs-keyword">int</span> begin = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 结束下标</span><br>    <span class="hljs-keyword">int</span> end = arr.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 开始元素的下标只要在结束元素下标的左边，就有机会继续循环。</span><br>    <span class="hljs-keyword">while</span>(begin &lt;= end) &#123;<br>        <span class="hljs-comment">// 中间元素下标</span><br>        <span class="hljs-keyword">int</span> mid = (begin + end) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (arr[mid] == dest) &#123;<br>            <span class="hljs-keyword">return</span> mid;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid] &lt; dest) &#123;<br>            <span class="hljs-comment">// 目标在“中间”的右边</span><br>            <span class="hljs-comment">// 开始元素下标需要发生变化（开始元素的下标需要重新赋值）</span><br>            begin = mid + <span class="hljs-number">1</span>; <span class="hljs-comment">// 一直增</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// arr[mid] &gt; dest</span><br>            <span class="hljs-comment">// 目标在“中间”的左边</span><br>            <span class="hljs-comment">// 修改结束元素的下标</span><br>            end = mid - <span class="hljs-number">1</span>; <span class="hljs-comment">// 一直减</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>综合以下先排序后查找</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.yechen.java;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test06</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] array = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">56</span>, <span class="hljs-number">66</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">100</span>&#125;;<br>        Num[] nums = <span class="hljs-keyword">new</span> Num[<span class="hljs-number">7</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            nums[i] = <span class="hljs-keyword">new</span> Num(array[i], i);<br>        &#125;<br><br>        print(nums);<br>        System.out.println(<span class="hljs-string">&quot;==========&quot;</span>);<br>        selectSort(nums);<br>        print(nums);<br>        System.out.println(<span class="hljs-string">&quot;==========&quot;</span>);<br>        <span class="hljs-keyword">int</span> indexAfterSort = binarySearch(nums, <span class="hljs-number">66</span>);<br>        <span class="hljs-keyword">int</span> index = nums[indexAfterSort].getIndex();<br>        System.out.println(<span class="hljs-string">&quot;66在排序之后的下标为：&quot;</span> + indexAfterSort);<br>        System.out.println(<span class="hljs-string">&quot;66原下标为：&quot;</span> + index);<br>    &#125;<br><br>    <span class="hljs-comment">// 选择排序算法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectSort</span><span class="hljs-params">(Object[] array)</span> </span>&#123;<br>        <span class="hljs-comment">// 向下转型，这里就不用 instanceof 判断了</span><br>        Num[] arrays = (Num[]) array;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arrays.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-comment">// 先默认下标为 i的元素是最小的</span><br>            <span class="hljs-keyword">int</span> minNumIndex = i;<br>            <span class="hljs-comment">// 下标为 i的元素与其之后的元素一一比较</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; arrays.length; j++) &#123;<br>                <span class="hljs-comment">// 如果最小元素大于之后的元素</span><br>                <span class="hljs-keyword">if</span> (arrays[minNumIndex].getNum() &gt; arrays[j].getNum()) &#123;<br>                    <span class="hljs-comment">// 就将更小的元素的下标赋给 minNumIndex</span><br>                    minNumIndex = j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 如果 minNumIndex不等于默认的 i，就将第 i个元素和最小元素进行交换</span><br>            <span class="hljs-keyword">if</span> (minNumIndex != i) &#123;<br>                <span class="hljs-comment">/*int temp = arrays[i].getNum();</span><br><span class="hljs-comment">                arrays[i].setNum(arrays[minNumIndex].getNum());</span><br><span class="hljs-comment">                arrays[minNumIndex].setNum(temp);</span><br><span class="hljs-comment">                int tempIndex = arrays[i].getIndex();</span><br><span class="hljs-comment">                arrays[i].setIndex(arrays[minNumIndex].getIndex());</span><br><span class="hljs-comment">                arrays[minNumIndex].setIndex(tempIndex);*/</span><br>                Num tempNum = arrays[i];<br>                arrays[i] = arrays[minNumIndex];<br>                arrays[minNumIndex] = tempNum;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 二分法查找</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">binarySearch</span><span class="hljs-params">(Object[] array, <span class="hljs-keyword">int</span> dest)</span> </span>&#123;<br>        <span class="hljs-comment">// 向下转型</span><br>        Num[] arr = (Num[]) array;<br>        <span class="hljs-comment">// 开始下标</span><br>        <span class="hljs-keyword">int</span> begin = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 结束下标</span><br>        <span class="hljs-keyword">int</span> end = arr.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 开始元素的下标只要在结束元素下标的左边，就有机会继续循环。</span><br>        <span class="hljs-keyword">while</span>(begin &lt;= end) &#123;<br>            <span class="hljs-comment">// 中间元素下标</span><br>            <span class="hljs-keyword">int</span> mid = (begin + end) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (arr[mid].getNum() == dest) &#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[mid].getNum() &lt; dest) &#123;<br>                <span class="hljs-comment">// 目标在“中间”的右边</span><br>                <span class="hljs-comment">// 开始元素下标需要发生变化（开始元素的下标需要重新赋值）</span><br>                begin = mid + <span class="hljs-number">1</span>; <span class="hljs-comment">// 一直增</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// arr[mid] &gt; dest</span><br>                <span class="hljs-comment">// 目标在“中间”的左边</span><br>                <span class="hljs-comment">// 修改结束元素的下标</span><br>                end = mid - <span class="hljs-number">1</span>; <span class="hljs-comment">// 一直减</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 编历数组</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(Object[] arr)</span> </span>&#123;<br>        <span class="hljs-comment">// 向下转型</span><br>        Num[] nums = (Num[]) arr;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            System.out.println(nums[i].getNum() +<span class="hljs-string">&quot;,&quot;</span>+ nums[i].getIndex());<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Num</span> </span>&#123;<br>    <span class="hljs-comment">// 保存的值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> num;<br>    <span class="hljs-comment">// 在数组中的下标</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Num</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Num</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num, <span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.num = num;<br>        <span class="hljs-keyword">this</span>.index = index;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getNum</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.num = num;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getIndex</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.index = index;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2</span>,<span class="hljs-number">0</span><br><span class="hljs-number">56</span>,<span class="hljs-number">1</span><br><span class="hljs-number">66</span>,<span class="hljs-number">2</span><br><span class="hljs-number">1</span>,<span class="hljs-number">3</span><br><span class="hljs-number">4</span>,<span class="hljs-number">4</span><br><span class="hljs-number">3</span>,<span class="hljs-number">5</span><br><span class="hljs-number">100</span>,<span class="hljs-number">6</span><br>==========<br><span class="hljs-number">1</span>,<span class="hljs-number">3</span><br><span class="hljs-number">2</span>,<span class="hljs-number">0</span><br><span class="hljs-number">3</span>,<span class="hljs-number">5</span><br><span class="hljs-number">4</span>,<span class="hljs-number">4</span><br><span class="hljs-number">56</span>,<span class="hljs-number">1</span><br><span class="hljs-number">66</span>,<span class="hljs-number">2</span><br><span class="hljs-number">100</span>,<span class="hljs-number">6</span><br>==========<br><span class="hljs-number">66</span>在排序之后的下标为：<span class="hljs-number">5</span><br><span class="hljs-number">66</span>原下标为：<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="15-7-Arrays工具类的使用（数组工具类）"><a href="#15-7-Arrays工具类的使用（数组工具类）" class="headerlink" title="15.7 Arrays工具类的使用（数组工具类）"></a>15.7 Arrays工具类的使用（数组工具类）</h3><p><strong>使用的时候查阅 API 文档即可。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14、面向对象</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="14-1-final关键字"><a href="#14-1-final关键字" class="headerlink" title="14.1 final关键字"></a>14.1 final关键字</h3><ul><li><p><strong>final修饰的类无法继承</strong></p></li><li><p><strong>final修饰的方法无法覆盖</strong></p></li><li><p><strong>final修饰的变量只能赋一次值</strong></p></li><li><p><strong>final修饰的引用一旦指向某个对象，则不能再重新指向其它对象，但该引用指向的对象内部的数据是可以修改的</strong>（数组对象就是一个引用，可以对数组中的元素进行更改，但是当前对象不能指向另一个数组）</p></li><li><p><strong>final修饰的实例变量必须手动初始化，不能采用系统默认值</strong></p></li><li><p><strong>final修饰的实例变量一般和static联合使用，称为常量。</strong></p><p><strong>如：<code>public static final double PI = 3.1415926;</code></strong></p></li></ul><h3 id="14-2-抽象类"><a href="#14-2-抽象类" class="headerlink" title="14.2 抽象类"></a>14.2 抽象类</h3><h4 id="14-2-1-对抽象类的理解"><a href="#14-2-1-对抽象类的理解" class="headerlink" title="14.2.1 对抽象类的理解"></a>14.2.1 对抽象类的理解</h4><p><img src="https://img-blog.csdnimg.cn/20210207224845179.png" alt="image-20210207224810832.png"></p><ul><li>抽象类也是一种 “引用数据类型” 。编译之后也是一个 class 字节码文件。</li><li><strong>类和类之间具有共同特征，将这些共同特征提取出来，形成的就是抽象类</strong>。</li><li>类本身是不存在的，所以抽象类无法创建对象（即无法实例化）</li><li>==抽象类本身是无法实例化的，无法创建对象，所以抽象类就是用来被子类继承的。==</li></ul><h4 id="14-2-2-抽象类的基础语法及抽象方法"><a href="#14-2-2-抽象类的基础语法及抽象方法" class="headerlink" title="14.2.2 抽象类的基础语法及抽象方法"></a>14.2.2 抽象类的基础语法及抽象方法</h4><ul><li>语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符列表] <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> 类名</span>&#123;<br>    类体;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>final 和 abstract不能联合使用，因为 final 修饰的类无法被继承，但是抽象类就是要用来被子类继承的。</p></li><li><p>抽象类的子类可以是抽象类。也可以是非抽象类。</p></li><li><p>抽象类虽然无法实例化，但是抽象类有构造方法，这个构造方法是供子类使用的。</p></li><li><p>抽象方法：</p><ul><li>==抽象方法表示没有实现的方法，没有方法体的方法==，如：<code>public abstract void doSome();</code></li><li>抽象方法特点是:<ul><li><strong>没有方法体，以分号结尾</strong>。</li><li><strong>前面修饰符列表中有abstract关键字。</strong></li></ul></li><li>抽象类中不一定有抽象方法，抽象方法必须出现在抽象类中</li></ul></li><li><p><strong>==一个非抽象类继承了抽象类，一定要将抽象类中的抽象方法全部实现了（即方法覆盖，但是要去掉 abstract 关键字），这是java语法上强行规定的，必须的，不然编译器就报错了。==</strong></p><ul><li>分析原因：因为之前有这样一个结论：<strong>抽象方法必须出现在抽象类中</strong>，当一个非抽象的类继承了抽象类，此时，这个非抽象类中就存在了一个抽象方法，如果实现这个抽象方法，抽象方法存在于非抽象类中，就与之前的结论相悖了。 </li></ul></li><li><p>面试题（判断题）：java语言中凡是没有方法体的方法都是抽象方法：不对，错误的</p><ul><li><p>Object类中就有很多方法都没有方法体，都是以“;”结尾的，但他们都不是抽象方法，例如：<code>public native int hashCode();</code></p></li><li><p>这个方法底层调用了C++写的动态链接库程序。</p></li><li><p>前面修饰符列表中没有：abstract，有一个native，表示调用JVM本地程序。</p></li></ul></li></ul><h4 id="14-2-3-抽象类的作用"><a href="#14-2-3-抽象类的作用" class="headerlink" title="14.2.3 抽象类的作用"></a>14.2.3 抽象类的作用</h4><p><strong>降低接口实现类实现过程中的难度，将接口中不需要使用的抽象方法交给抽象类进行完成，这样接口实现类只需要将需要的方法进行重写。</strong></p><h3 id="14-3-接口"><a href="#14-3-接口" class="headerlink" title="14.3 接口"></a>14.3 接口</h3><h4 id="14-3-1-接口的基础语法"><a href="#14-3-1-接口的基础语法" class="headerlink" title="14.3.1 接口的基础语法"></a>14.3.1 接口的基础语法</h4><ul><li>接口也是一种 “<strong>引用数据类型</strong>” 。编译之后也是一个 class 字节码文件。</li><li>接口是<strong>完全抽象</strong>的（<strong>抽象类是半抽象</strong>），或者也可以说接口是特殊的抽象类。</li><li>接口怎么定义，语法是什么：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符列表] <span class="hljs-class"><span class="hljs-keyword">interface</span> 接口名</span>&#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>接口支持多继承，一个接口可以继承多个接口。</li><li>接口中只包含两部分内容，<strong>一部分是：常量，一部分是：抽象方法</strong>。接口中没有其它内容了。只有以上两部分。</li><li>接口中所有的元素都是 public 修饰的。（都是公开的）<ul><li>接口中的抽象方法定义时：public abstract修饰符可以省略。</li><li>接口中的常量的public static final可以省略。</li></ul></li><li>接口中的方法都是抽象方法，所以接口中的方法不能有方法体。</li><li>类和类之间叫做继承，类和接口之间叫做实现。<ul><li>实现使用 implements 关键字完成</li></ul></li><li>类和类之间叫做继承，类和接口之间叫做实现。<ul><li>继承使用 extends 关键字完成</li></ul></li><li>==当一个非抽象的类实现接口的话，必须将接口中所有的抽象方法全部实现（覆盖、重写）==</li></ul><h4 id="14-3-2-一个类可以实现多个接口"><a href="#14-3-2-一个类可以实现多个接口" class="headerlink" title="14.3.2 一个类可以实现多个接口"></a>14.3.2 一个类可以实现多个接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ClassImpl c = <span class="hljs-keyword">new</span> ClassImpl();<br>        c.methodA();<span class="hljs-comment">// 输出：methodA</span><br>        c.methodB();<span class="hljs-comment">// 输出：methodB</span><br>        c.methodC();<span class="hljs-comment">// 输出：methodC</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodA</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodB</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">C</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodC</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">// 这里实现了多个接口</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">A</span>, <span class="hljs-title">B</span>, <span class="hljs-title">C</span> </span>&#123;<br>    <span class="hljs-comment">// 实现接口 A中的抽象方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodA</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;methodA&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 实现接口 B中的抽象方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodB</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;methodB&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 实现接口 C中的抽象方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodC</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;methodC&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="14-3-3-当多个接口之间有同一个实现类的时候，这些接口之间也就存在了联系，可以相互转换"><a href="#14-3-3-当多个接口之间有同一个实现类的时候，这些接口之间也就存在了联系，可以相互转换" class="headerlink" title="14.3.3 当多个接口之间有同一个实现类的时候，这些接口之间也就存在了联系，可以相互转换"></a>14.3.3 当多个接口之间有同一个实现类的时候，这些接口之间也就存在了联系，可以相互转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        A a = <span class="hljs-keyword">new</span> ClassImpl();<br>        <span class="hljs-keyword">if</span> (a <span class="hljs-keyword">instanceof</span> B) &#123;<span class="hljs-comment">// 判断条件成立，可以将 A类型转换为 B类型</span><br>            B b = (B) a;<br>            b.methodB();    <br>        &#125;<br>        <span class="hljs-keyword">if</span> (a <span class="hljs-keyword">instanceof</span> C) &#123;<span class="hljs-comment">// 因为 C接口和 A就扣没有同一个实现类，所以判断条件不成立</span><br>            C c = (C) a;<br>            c.methodC();<br>        &#125;<br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodA</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodB</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">C</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">methodC</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">// 当前类实现了 A和 B接口，没有实现 C接口</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">A</span>, <span class="hljs-title">B</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodA</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;methodA&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methodB</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;methodB&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="14-3-4-接口在开发中的作用"><a href="#14-3-4-接口在开发中的作用" class="headerlink" title="14.3.4 接口在开发中的作用"></a>14.3.4 接口在开发中的作用</h4><ul><li><p><strong>接口在开发中的作用，类似于多态在开发中的作用。</strong></p></li><li><p><strong>多态的作用：面向抽象编程，不要面向具体编程，降低程序耦合度，提高程序扩展力。</strong></p></li><li><p><strong>接口的使用离不开多态机制，接口 + 多态才可以降低程序耦合度</strong></p></li><li><p>==任何一个接口都有调用者和实现者，接口可以将调用者和实现者解耦合，调用者面向接口编程，实现者面向接口编写实现。==</p></li><li><p><a href="https://www.bilibili.com/video/BV1Rx411876f?p=514">视频讲解</a></p></li><li><p>示例程序：通过菜单接口将厨师和顾客分离开来，降低程序耦合度</p></li></ul><p>接口：FoodMenu</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">FoodMenu</span> </span>&#123;<br>    <span class="hljs-comment">// 西红柿炒鸡蛋</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">xihongshichaojidan</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">// 鱼香肉丝</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">yuxiangrousi</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接口实现类：Chef1、Chef2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Chef1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FoodMenu</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">xihongshichaojidan</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;中餐师傅做的西红柿炒鸡蛋！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">yuxiangrousi</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;中餐师傅做的鱼香肉丝！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Chef2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FoodMenu</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">xihongshichaojidan</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;西餐师傅做的西红柿炒鸡蛋！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">yuxiangrousi</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;西餐师傅做的鱼香肉丝！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接口调用类：Customer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span> </span>&#123;<br><br>    <span class="hljs-comment">// 顾客手里有一个菜单</span><br>    <span class="hljs-keyword">private</span> FoodMenu foodMenu;<br><br>    <span class="hljs-comment">// 无参构造</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Customer</span><span class="hljs-params">()</span> </span>&#123;<br>&#125;<br><br>    <span class="hljs-comment">// 有参构造</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Customer</span><span class="hljs-params">(FoodMenu foodMenu)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.foodMenu = foodMenu;<br>    &#125;<br><br>    <span class="hljs-comment">// getter and setter</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FoodMenu <span class="hljs-title">getFoodMenu</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> foodMenu;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFoodMenu</span><span class="hljs-params">(FoodMenu foodMenu)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.foodMenu = foodMenu;<br>    &#125;<br><br>    <span class="hljs-comment">// 点菜方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">order</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>        FoodMenu foodMenu = <span class="hljs-keyword">this</span>.getFoodMenu();<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>            foodMenu.xihongshichaojidan();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n == <span class="hljs-number">2</span>) &#123;<br>            foodMenu.yuxiangrousi();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;请您重试！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：Test</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这个例子很经典！！！！！</span><br><span class="hljs-comment">// 1是西红柿炒鸡蛋， 2是鱼香肉丝</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建中餐厨师对象</span><br>        FoodMenu chef1 = <span class="hljs-keyword">new</span> Chef1();<br>        <span class="hljs-comment">// 创建顾客对象</span><br>        Customer customer = <span class="hljs-keyword">new</span> Customer(chef1);<br>        <span class="hljs-comment">// 顾客点菜</span><br>        customer.order(<span class="hljs-number">1</span>);<br>        customer.order(<span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <span class="hljs-comment">// 创建中餐厨师对象</span><br>        FoodMenu chef2 = <span class="hljs-keyword">new</span> Chef2();<br>        <span class="hljs-comment">// 创建顾客对象</span><br>        Customer customer1 = <span class="hljs-keyword">new</span> Customer(chef2);<br>        <span class="hljs-comment">// 顾客点菜</span><br>        customer1.order(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">中餐师傅做的西红柿炒鸡蛋！<br>中餐师傅做的鱼香肉丝！<br>----------------------------<br>西餐师傅做的西红柿炒鸡蛋！<br></code></pre></td></tr></table></figure><h4 id="14-3-5-抽象类和接口之间的区别"><a href="#14-3-5-抽象类和接口之间的区别" class="headerlink" title="14.3.5 抽象类和接口之间的区别"></a>14.3.5 抽象类和接口之间的区别</h4><ol><li><p><strong>抽象类是半抽象的，接口是完全抽象的。</strong></p></li><li><p><strong>抽象类中有构造方法，接口中没有构造方法。</strong></p></li><li><p><strong>类和类之间只能单继承，接口和接口之间支持多继承。</strong></p></li><li><p><strong>一个类只能继承一个抽象类（单继承）， 一个类可以同时实现多个接口</strong></p></li><li><p><strong>接口中只允许出现常量和抽象方法</strong></p></li><li><p><strong>接口使用比抽象类多，一般抽象类使用的还是少。</strong></p></li><li><p>==接口一般都是对“行为”的抽象。==</p></li></ol><h3 id="14-4-类和类之间的关系"><a href="#14-4-类和类之间的关系" class="headerlink" title="14.4 类和类之间的关系"></a>14.4 类和类之间的关系</h3><p><strong>is a（继承）、has a（关联）、like a（实现）</strong></p><ol><li><p>is a：</p><p>Cat is an Animal（猫是一个动物）</p><p>凡是能够满足is a的表示 ==“继承关系”==</p><p>A extends B</p></li><li><p>has a：</p><p>I has a Pen（我有一支笔）</p><p>凡是能够满足has a关系的表示==“关联关系”==</p><p>关联关系通常以“属性”的形式存在。</p></li><li><p>like a:</p><p>Cooker like a FoodMenu（厨师像一个菜单一样）</p><p>凡是能够满足like a关系的表示 ==“实现关系”==</p><p>实现关系通常是：类实现接口。</p><p>A implements B</p></li></ol><h3 id="14-5-package-和-import"><a href="#14-5-package-和-import" class="headerlink" title="14.5 package 和 import"></a>14.5 package 和 import</h3><h4 id="14-5-1-package"><a href="#14-5-1-package" class="headerlink" title="14.5.1 package"></a>14.5.1 package</h4><ul><li><a href="https://www.bilibili.com/video/BV1Rx411876f?p=517">视频讲解</a></li></ul><h4 id="14-5-2-import"><a href="#14-5-2-import" class="headerlink" title="14.5.2 import"></a>14.5.2 import</h4><ul><li><a href="https://www.bilibili.com/video/BV1Rx411876f?p=519">视频讲解</a></li></ul><h3 id="14-6-访问控制权限修饰符"><a href="#14-6-访问控制权限修饰符" class="headerlink" title="14.6 访问控制权限修饰符"></a>14.6 访问控制权限修饰符</h3><table><thead><tr><th align="center">访问控制修饰符</th><th align="center">本类</th><th align="center">同包</th><th align="center">异包子类</th><th align="center">任意位置</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">可以访问</td><td align="center">可以访问</td><td align="center">可以访问</td><td align="center">可以访问</td></tr><tr><td align="center">protected</td><td align="center">可以访问</td><td align="center">可以访问</td><td align="center">可以访问</td><td align="center">不可以访问</td></tr><tr><td align="center">默认</td><td align="center">可以访问</td><td align="center">可以访问</td><td align="center">不可以访问</td><td align="center">不可以访问</td></tr><tr><td align="center">private</td><td align="center">可以访问</td><td align="center">不可以访问</td><td align="center">不可以访问</td><td align="center">不可以访问</td></tr></tbody></table><ul><li>访问控制权限修饰符可以修饰什么:<ul><li>属性（4个都能用）</li><li>方法（4个都能用）</li><li>类（public和默认能用，其它不行）</li><li>接口（public和默认能用，其它不行）</li></ul></li></ul><h3 id="14-7-JDK类库的根类：Object"><a href="#14-7-JDK类库的根类：Object" class="headerlink" title="14.7 JDK类库的根类：Object"></a>14.7 JDK类库的根类：Object</h3><h4 id="14-7-1-Object-类中的方法"><a href="#14-7-1-Object-类中的方法" class="headerlink" title="14.7.1 Object 类中的方法"></a>14.7.1 Object 类中的方法</h4><ul><li><p>protected Object clone()                  // 负责对象克隆的。</p></li><li><p>int hashCode()                                   // 获取对象哈希值的一个方法。</p></li><li><p>boolean equals(Object obj)             // 判断两个对象是否相等</p></li><li><p>String toString()                                 // 将对象转换成字符串形式</p></li><li><p>protected void finalize()                   // 垃圾回收器负责调用的方法</p></li></ul><h4 id="14-7-2-toString-方法"><a href="#14-7-2-toString-方法" class="headerlink" title="14.7.2 toString() 方法"></a>14.7.2 toString() 方法</h4><ul><li>源代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> getClass().getName() + <span class="hljs-string">&quot;@&quot;</span> + Integer.toHexString(hashCode());<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>默认实现：类名@对象的内存地址转换为十六进制的形式</p></li><li><p>重写 toString() 方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Date date = <span class="hljs-keyword">new</span> Date(<span class="hljs-number">2008</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>);<br>        System.out.println(date);<span class="hljs-comment">// 输出：2008年8月8日</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Date</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> year;<br>    <span class="hljs-keyword">int</span> month;<br>    <span class="hljs-keyword">int</span> day;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Date</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Date</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year, <span class="hljs-keyword">int</span> month, <span class="hljs-keyword">int</span> day)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.year = year;<br>        <span class="hljs-keyword">this</span>.month = month;<br>        <span class="hljs-keyword">this</span>.day = day;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 重写规则，越简单越明了就好</span><br>        <span class="hljs-keyword">return</span> year + <span class="hljs-string">&quot;年&quot;</span> + month + <span class="hljs-string">&quot;月&quot;</span> + day + <span class="hljs-string">&quot;日&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="14-7-3-equals-方法"><a href="#14-7-3-equals-方法" class="headerlink" title="14.7.3 equals() 方法"></a>14.7.3 equals() 方法</h4><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span> == obj);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>设计目的</p><ul><li>通过equals方法来<strong>判断两个对象是否相等</strong>。</li></ul></li><li><p>但是默认的 equals() 方法是通过 “==” 来判断两个对象的内存地址，我们需要的是判断的是对象中的内容是否相等， 因此默认 equals() 方法不够用，要重写。</p></li><li><p>重写 equals() 方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Date date = <span class="hljs-keyword">new</span> Date(<span class="hljs-number">2008</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>);<br>        Date date2 = <span class="hljs-keyword">new</span> Date(<span class="hljs-number">2008</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>);<br>        Date date3 = <span class="hljs-keyword">new</span> Date(<span class="hljs-number">2008</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>);<br>        System.out.println(date.equals(date2));<br>        System.out.println(date.equals(date3));<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Date</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> year;<br>    <span class="hljs-keyword">int</span> month;<br>    <span class="hljs-keyword">int</span> day;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Date</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Date</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year, <span class="hljs-keyword">int</span> month, <span class="hljs-keyword">int</span> day)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.year = year;<br>        <span class="hljs-keyword">this</span>.month = month;<br>        <span class="hljs-keyword">this</span>.day = day;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> year + <span class="hljs-string">&quot;年&quot;</span> + month + <span class="hljs-string">&quot;月&quot;</span> + day + <span class="hljs-string">&quot;日&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-comment">// 首先判断连个对象是否是同一个对象，如果是就直接返回 true</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        <span class="hljs-comment">// 如果 o是 null，或者 o的类型不是 Date类型，直接返回 false</span><br>        <span class="hljs-keyword">if</span> (o == <span class="hljs-keyword">null</span> || !(o <span class="hljs-keyword">instanceof</span> Date)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-comment">// 程序运行到这来表示：o不是 null并且是 Date类型的</span><br>        <span class="hljs-comment">// 向下转型</span><br>        Date date = (Date) o;<br>        <span class="hljs-comment">// 返回两个类的内容是否相等</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.year == date.year &amp;&amp; <span class="hljs-keyword">this</span>.month == date.month &amp;&amp; <span class="hljs-keyword">this</span>.day == date.day;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>结论：</p><ul><li>java中什么类型的数据可以使用“==”判断：<ul><li>java中基本数据类型比较是否相等，使用==</li></ul></li><li>java中什么类型的数据需要使用equals判断：<ul><li>java中所有的引用数据类型统一使用equals方法来判断是否相等。</li></ul></li></ul></li><li><p>equals方法重写的时候要彻底，<a href="https://www.bilibili.com/video/BV1Rx411876f?p=537">视频</a></p></li></ul><h4 id="14-7-4-finalize-方法"><a href="#14-7-4-finalize-方法" class="headerlink" title="14.7.4 finalize() 方法"></a>14.7.4 finalize() 方法</h4><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123; &#125;<br></code></pre></td></tr></table></figure><ul><li>自从 JDK9 之后就已经过时了，了解一下就好。<a href="https://www.bilibili.com/video/BV1Rx411876f?p=538">视频</a></li></ul><h4 id="14-7-5-hashCode-方法"><a href="#14-7-5-hashCode-方法" class="headerlink" title="14.7.5 hashCode() 方法"></a>14.7.5 hashCode() 方法</h4><ul><li>源代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><ul><li>这个方法不是抽象方法，带有native关键字，底层调用C++程序。</li><li>hashCode()方法返回的是哈希码：<strong>实际上就是一个java对象的内存地址，经过哈希算法，得出的一个值。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Object obj = <span class="hljs-keyword">new</span> Object();<br>        Date date = <span class="hljs-keyword">new</span> Date();<br>        <span class="hljs-comment">// 输出的值可以等同看做是 java对象的内存地址</span><br>        System.out.println(obj.hashCode());<span class="hljs-comment">// 输出：460141958</span><br>        System.out.println(date.hashCode());<span class="hljs-comment">// 输出：1163157884</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Date</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="14-8-匿名内部类"><a href="#14-8-匿名内部类" class="headerlink" title="14.8 匿名内部类"></a>14.8 匿名内部类</h3><ul><li>什么是内部类：<ul><li>在类的内部又定义了一个新的类，被称为内部类</li></ul></li><li>内部类分类：<ul><li>静态内部类：类似于静态变量</li><li>实例内部类：类似于实例变量</li><li>局部内部类：类似于局部变量</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-comment">// 该类在类的内部，所以称为内部类</span><br>    <span class="hljs-comment">// 由于前面有static，所以称为“静态内部类”</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br><br>    &#125;<br>    <span class="hljs-comment">// 该类在类的内部，所以称为内部类</span><br>    <span class="hljs-comment">// 没有static叫做实例内部类。</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 该类在类的内部，所以称为内部类</span><br>        <span class="hljs-comment">// 由于该类在方法中，叫做局部内部类。</span><br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>匿名内部类是局部内部类的一种，因为这个类没有名字而得名。</p></li><li><p>尝试使用匿名内部类</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        MyMath myMath = <span class="hljs-keyword">new</span> MyMath();<br>        <span class="hljs-comment">// 使用匿名内部类，直接 new接口，在大括号中实现接口</span><br>        myMath.mySum(<span class="hljs-keyword">new</span> Computer() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> a + b;<br>            &#125;<br>        &#125;, <span class="hljs-number">10</span>, <span class="hljs-number">100</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 负责计算的接口</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Computer</span> </span>&#123;<br>    <span class="hljs-comment">// 抽象方法: 求和</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>;<br>&#125;<br><br><span class="hljs-comment">// 数学类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMath</span> </span>&#123;<br>    <span class="hljs-comment">// 数学求和方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mySum</span><span class="hljs-params">(Computer computer, <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> retValue = computer.sum(a, b);<br>        System.out.println(a + <span class="hljs-string">&quot;+&quot;</span> + b + <span class="hljs-string">&quot;=&quot;</span> + retValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13、super关键字</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-super%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-super%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="13-1-super介绍"><a href="#13-1-super介绍" class="headerlink" title="13.1 super介绍"></a>13.1 super介绍</h3><ol><li><strong>super能出现在实例方法和构造方法中。</strong></li><li><strong>super的语法是：“super.”、“super()”</strong></li><li><strong>super不能使用在静态方法中。</strong></li><li><strong>super. 大部分情况下是可以省略的。</strong></li><li><strong>[super.什么时候不能省略呢](###13.4 super. 什么时候不能省略)</strong></li><li>==super() 只能出现在构造方法第一行，通过当前的构造方法去调用“父类”中的构造方法，目的是：创建子类对象的时候，先初始化父类型特征。==</li><li>super 不是引用。super也不保存内存地址，super也不指向任何对象。==super 只是代表当前对象内部的那一块父类型的特征==。</li></ol><ul><li><p>重要的结论：</p><ul><li><p>==当一个构造方法第一行：既没有this()又没有super()的话，默认会有一个super()==; 表示通过当前子类的构造方法调用父类的无参数构造方法。<strong>所以必须保证父类的无参数构造方法是存在的。</strong></p></li><li><p><strong>this()和super() 不能共存，它们都是只能出现在构造方法第一行。</strong></p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        C c = <span class="hljs-keyword">new</span> C();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        输出：</span><br><span class="hljs-comment">        B类的有参数构造方法！</span><br><span class="hljs-comment">C类的无参数构造方法！</span><br><span class="hljs-comment">        */</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 父类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>String name;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">B</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B类的无参数构造方法！&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">B</span><span class="hljs-params">(String name)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B类的有参数构造方法！&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">public C() &#123;</span><br><span class="hljs-comment">// 其实在这里还有一句 super()，调用了B类的无参构造方法</span><br><span class="hljs-comment">System.out.println(&quot;C类的无参数构造方法！&quot;);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">C</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 也可以自己写 super(&quot;abc&quot;); 表示调用了B类的有参构造方法</span><br>        <span class="hljs-keyword">super</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;C类的无参数构造方法！&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>this 和 super 混合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> C();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        输出：</span><br><span class="hljs-comment">        B类的无参数构造方法！</span><br><span class="hljs-comment">        C类的有参数构造方法！</span><br><span class="hljs-comment">        C类的无参数构造方法！</span><br><span class="hljs-comment">         */</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 父类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>String name;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">B</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B类的无参数构造方法！&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">B</span><span class="hljs-params">(String name)</span> </span>&#123;<br>System.out.println(<span class="hljs-string">&quot;B类的有参数构造方法！&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">B</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">C</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 因为this和super不能同时出现，这里有了this，super()就没有了，也不能自己写上super()</span><br>        <span class="hljs-keyword">this</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;C类的无参数构造方法！&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">C</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-comment">// 这里其实还有个 super()，来调用父类的无参构造方法</span><br>System.out.println(<span class="hljs-string">&quot;C类的有参数构造方法！&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="13-2-super-实参-的用法"><a href="#13-2-super-实参-的用法" class="headerlink" title="13.2 super(实参) 的用法"></a>13.2 super(实参) 的用法</h3><ul><li><strong>当在子类的构造方法中需要给从父类继承下来的属性赋值时，由于属性私有化，子类不能直接访问该属性，此时可以通过 super(实参) 来调用父类的构造方法，给属性赋值。</strong></li><li>==super(实参) 的作用是：初始化当前对象的父类型特征==。并不是创建新对象。实际上对象只创建了1个。</li><li>==super 关键字代表的就是“当前对象”的那部分父类型特征==</li></ul><p>如：以下程序中 64行代码 就可以通过 <code>super(actno, balance)</code> 调用父类构造方法给父类中的属性赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SuperTest03</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><br>CreditAccount ca1 = <span class="hljs-keyword">new</span> CreditAccount();<br>System.out.println(ca1.getActno() + <span class="hljs-string">&quot;,&quot;</span> + ca1.getBalance() + <span class="hljs-string">&quot;,&quot;</span> + ca1.getCredit());<br><br>CreditAccount ca2 = <span class="hljs-keyword">new</span> CreditAccount(<span class="hljs-string">&quot;1111&quot;</span>, <span class="hljs-number">10000.0</span>, <span class="hljs-number">0.999</span>);<br>System.out.println(ca2.getActno() + <span class="hljs-string">&quot;,&quot;</span> + ca2.getBalance() + <span class="hljs-string">&quot;,&quot;</span> + ca2.getCredit());<br><br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 账户类，父类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Account</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Object</span></span>&#123;<br><span class="hljs-comment">// 属性</span><br><span class="hljs-keyword">private</span> String actno;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> balance;<br><br><span class="hljs-comment">// 构造方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//super();</span><br><span class="hljs-comment">//this.actno = null;</span><br><span class="hljs-comment">//this.balance = 0.0;</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Account</span><span class="hljs-params">(String actno, <span class="hljs-keyword">double</span> balance)</span></span>&#123;<br><span class="hljs-comment">// super();</span><br><span class="hljs-keyword">this</span>.actno = actno;<br><span class="hljs-keyword">this</span>.balance = balance;<br>&#125;<br><br><span class="hljs-comment">// setter and getter</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setActno</span><span class="hljs-params">(String actno)</span></span>&#123;<br><span class="hljs-keyword">this</span>.actno = actno;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getActno</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> actno;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setBalance</span><span class="hljs-params">(<span class="hljs-keyword">double</span> balance)</span></span>&#123;<br><span class="hljs-keyword">this</span>.balance = balance;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getBalance</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> balance;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 信用账户</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CreditAccount</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Account</span></span>&#123;<br><br><span class="hljs-comment">// 属性：信誉度（诚信值）</span><br><span class="hljs-comment">// 子类特有的一个特征，父类没有。</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> credit;<br><br><span class="hljs-comment">// 构造方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CreditAccount</span><span class="hljs-params">(String actno, <span class="hljs-keyword">double</span> balance, <span class="hljs-keyword">double</span> credit)</span></span>&#123;<br><br><span class="hljs-comment">// 私有的属性，只能在本类中访问。</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">this.actno = actno;</span><br><span class="hljs-comment">this.balance = balance;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 以上两行代码在恰当的位置，正好可以使用：super(actno, balance);</span><br><span class="hljs-comment">// 通过子类的构造方法调用父类的构造方法。</span><br><span class="hljs-keyword">super</span>(actno, balance);<br><span class="hljs-keyword">this</span>.credit = credit;<br>&#125;<br><br><span class="hljs-comment">// 提供无参数的构造方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CreditAccount</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//super();</span><br><span class="hljs-comment">//this.credit = 0.0;</span><br>&#125;<br><br><span class="hljs-comment">// setter and getter方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCredit</span><span class="hljs-params">(<span class="hljs-keyword">double</span> credit)</span></span>&#123;<br><span class="hljs-keyword">this</span>.credit = credit;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getCredit</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> credit;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="13-3-内存图描述-super"><a href="#13-3-内存图描述-super" class="headerlink" title="13.3 内存图描述 super"></a>13.3 内存图描述 super</h3><p><img src="https://img-blog.csdnimg.cn/20210207194752129.png" alt="image-20210207194723069"></p><h3 id="13-4-super-什么时候不能省略"><a href="#13-4-super-什么时候不能省略" class="headerlink" title="13.4 super. 什么时候不能省略"></a>13.4 super. 什么时候不能省略</h3><ul><li>如果父类和子类中有同名的特征（属性和方法），并且想要在子类中访问父类的特征（属性和方法），super. 就不能省略；</li><li><a href="https://www.bilibili.com/video/BV1Rx411876f?p=472">视频讲解</a></li></ul><h3 id="13-5-super总结"><a href="#13-5-super总结" class="headerlink" title="13.5 super总结"></a>13.5 super总结</h3><ul><li><strong>super.属性名    【访问父类的属性】</strong></li><li><strong>super.方法名(实参) 【访问父类的方法】</strong></li><li><strong>super(实参)  【调用父类的构造方法】</strong></li><li>==通过 super. 访问属性或方法的时候：==<ul><li>==如果在子类中没有和父类同名的属性或方法，效果同 this. 相同，可以省略 super. ；==</li><li>==如果有同名的属性或方法，此时不能省略super. ，效果与 this. 不同==</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12、多态</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E5%A4%9A%E6%80%81/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E5%A4%9A%E6%80%81/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="12-1-向上转型和向下转型的概念"><a href="#12-1-向上转型和向下转型的概念" class="headerlink" title="12.1 向上转型和向下转型的概念"></a>12.1 向上转型和向下转型的概念</h3><ul><li>向上转型（<strong>父类型引用指向子类型对象</strong>）（子 —转成—&gt; 父）<ul><li>自动类型转换</li></ul></li><li>向下转型（父 —转成—&gt; 子）<ul><li>强制类型转换，需要加强制类型转换符</li></ul></li><li>注意：<ul><li>java中允许向上转型，也允许向下转型</li><li>==无论是向上转型，还是向下转型，两种类型之间必须有继承关系，没有继承关系编译器报错。==</li><li>自动类型转换和强制类型转换是使用在基本数据类型上的，这里这么说只是为了好理解，在引用数据类型这里，只有向上转型和向下转型</li></ul></li></ul><h3 id="12-2-对多态的理解"><a href="#12-2-对多态的理解" class="headerlink" title="12.2 对多态的理解"></a>12.2 对多态的理解</h3><ul><li><strong>多态表示多种形态：</strong><ul><li><strong>编译的时候一种形态。</strong></li><li><strong>运行的时候另一种形态。</strong></li></ul></li><li>分析 第四行代码：a.move();<ul><li>先来分析编译阶段：<ul><li>对于编译器来说，编译器只知道 a 的类型是 Animal，所以编译器在检查语法的时候，会去 Animal.class 字节码文件中找 move() 方法，找到了，绑定上 move() 方法，编译通过，静态绑定成功。（==编译阶段属于静态绑定。==）</li></ul></li><li>再来分析运行阶段：<ul><li>运行阶段的时候，实际上在堆内存中创建的 java 对象是 Cat 对象，所以 move 的时候，真正参与 move 的对象是 Cat类型，所以运行阶段会动态执行 Cat 对象的 move() 方法。这个过程属于运行阶段绑定。（==运行阶段绑定属于动态绑定。==）</li></ul></li></ul></li><li>分析 a.catchMouse() <ul><li>分析程序一定要<strong>分析编译阶段的静态绑定和运行阶段的动态绑定</strong>。只有编译通过的代码才能运行。没有编译，根本轮不到运行。</li><li>在编译阶段，编译器只知道 a 是 Animal 类型，因此就去 Animal.class  文件中找 catchMouse()  方法，结果没找到，就报错了：<strong>错误: 找不到符号</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>       Animal a = <span class="hljs-keyword">new</span> Cat();<span class="hljs-comment">// 向上转型，父类引用执行子类对象</span><br>        a.move();<span class="hljs-comment">// 输出：猫在走猫步</span><br>        a.catchMouse();<span class="hljs-comment">// 编译阶段报错：错误: 找不到符号</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 父类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;动物在移动&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-comment">// 以下是方法覆盖</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫在走猫步&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">// Cat类中特有的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">catchMouse</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;猫在抓老鼠&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="12-3-什么时候必须使用“向下转型”"><a href="#12-3-什么时候必须使用“向下转型”" class="headerlink" title="12.3 什么时候必须使用“向下转型”"></a>12.3 什么时候必须使用“向下转型”</h3><ul><li><p><strong>当你需要访问的是子类对象中“特有”的方法。此时必须进行向下转型。</strong></p></li><li><p><strong>使用强制类型转换会有风险</strong></p></li></ul><h3 id="12-4-类型转换异常（ClassCastException）"><a href="#12-4-类型转换异常（ClassCastException）" class="headerlink" title="12.4 类型转换异常（ClassCastException）"></a>12.4 类型转换异常（ClassCastException）</h3><ul><li>向下转型，这样是没有毛病的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Animal a = <span class="hljs-keyword">new</span> Cat();<br>Cat cat = (Cat) a;<br>a.catchMouse();<br></code></pre></td></tr></table></figure><ul><li>但这样就会有问题了，会出现类转换异常（ClassCastException）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Animal a = <span class="hljs-keyword">new</span> Bird();<br>Cat cat = (Cat) a;<br>a.catchMouse();<br></code></pre></td></tr></table></figure><p>分析：</p><ul><li>编译时：编译器检测到 a 这个引用是 Animal 类型，而 Animal 和 Cat 之间存在继承关系，所以可以向下转型。编译没毛病。</li><li>运行时：堆内存实际创建的对象是：Bird 对象。在实际运行过程中，拿着 Bird 对象转换成 Cat 对象就不行了。因为 Bird 和 Cat 之间没有继承关系</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 父类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;动物在移动&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-comment">// 以下是方法覆盖</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫在走猫步&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">// Cat类中特有的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">catchMouse</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;猫在抓老鼠&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bird</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-comment">// 以下是方法覆盖</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;鸟儿在飞翔&quot;</span>);<br>    &#125;<br>    <br>   <span class="hljs-comment">// Bird类中特有的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sing</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;鸟儿在唱歌&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="12-5-使用-instanceof-运算符-来避免类型转换异常"><a href="#12-5-使用-instanceof-运算符-来避免类型转换异常" class="headerlink" title="12.5 使用 instanceof 运算符 来避免类型转换异常"></a>12.5 使用 instanceof 运算符 来避免类型转换异常</h3><ul><li><p>==instanceof 可以在运行阶段动态判断引用指向的对象的类型。==</p></li><li><p>instanceof的语法：</p><ul><li>(引用 instanceof 类型)</li><li>如：<code>a instanceof Cat</code></li></ul></li><li><p>instanceof 运算符的<strong>运算结果只能是：true/false</strong></p></li><li><p>c是一个引用，c变量保存了内存地址指向了堆中的对象。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (c <span class="hljs-keyword">instanceof</span> Cat) &#123;<br>    代表：c引用指向的堆内存中的java对象是一个Cat。<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    代表：c引用指向的堆内存中的java对象不是一个Cat。<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>任何时候，任何地点，对类型进行向下转型时，一定要使用 instanceof  运算符进行判断。（java规范中要求的）这样可以很好的避免：ClassCastException</li><li>使用 <a href="https://www.bilibili.com/video/BV1Rx411876f?p=455">视频</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        AnimalTest a = <span class="hljs-keyword">new</span> AnimalTest();<br>        a.print(<span class="hljs-keyword">new</span> Cat());<span class="hljs-comment">// 输出：猫在抓老鼠</span><br>        a.print(<span class="hljs-keyword">new</span> Bird());<span class="hljs-comment">// 输出：鸟儿在唱歌</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnimalTest</span> </span>&#123;<br>    <span class="hljs-comment">// 一个实例方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">(Animal a)</span> </span>&#123;<br>        <span class="hljs-comment">// 因为我们不知道方法调用的时候回传进来哪个动物</span><br>        <span class="hljs-comment">// 所以需要使用 instanceof 来判断类型</span><br>        <span class="hljs-keyword">if</span>(a <span class="hljs-keyword">instanceof</span> Cat)&#123;<span class="hljs-comment">// 如果是 Cat类型，就向下转型成 Cat类型</span><br>Cat c = (Cat)a;<br>c.catchMouse();<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a <span class="hljs-keyword">instanceof</span> Bird)&#123;<span class="hljs-comment">// 如果是 Bird类型，就向下转型成 Bird类型</span><br>Bird b = (Bird)a;<br>b.sing();<br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="12-6-多态在开发中有什么作用"><a href="#12-6-多态在开发中有什么作用" class="headerlink" title="12.6 多态在开发中有什么作用"></a>12.6 多态在开发中有什么作用</h3><ul><li><p><a href="https://www.bilibili.com/video/BV1Rx411876f?p=455">视频</a></p></li><li><p><strong>降低程序的耦合度，提高程序的扩展力</strong></p></li><li><p>面向抽象编程，不面向具体编程 </p></li></ul><h3 id="12-7-解释一些问题"><a href="#12-7-解释一些问题" class="headerlink" title="12.7 解释一些问题"></a>12.7 解释一些问题</h3><h4 id="12-7-1-静态方法不存在方法覆盖"><a href="#12-7-1-静态方法不存在方法覆盖" class="headerlink" title="12.7.1  静态方法不存在方法覆盖"></a>12.7.1  静态方法不存在方法覆盖</h4><ul><li>方法覆盖需要和多态机制联合起来使用才有意义</li><li>多态和对象有关系，而静态方法的执行不需要对象。所以，一般情况下，我们会说静态方法“不存在”方法覆盖。不探讨静态方法的覆盖。</li><li>如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><span class="hljs-comment">// 静态方法可以使用“引用.”来调用吗？可以</span><br><span class="hljs-comment">// 虽然使用“引用.”来调用，但是和对象无关。</span><br>Animal a = <span class="hljs-keyword">new</span> Cat(); <span class="hljs-comment">//多态</span><br>        <br><span class="hljs-comment">// 静态方法和对象无关。</span><br><span class="hljs-comment">// 虽然使用“引用.”来调用。但是实际运行的时候还是：Animal.doSome()</span><br>a.doSome();<span class="hljs-comment">// 输出：Animal的doSome方法执行！</span><br>Animal.doSome();<span class="hljs-comment">// 输出：Animal的doSome方法执行！</span><br>Cat.doSome();<span class="hljs-comment">// 输出：Cat的doSome方法执行！</span><br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span>&#123;<br><span class="hljs-comment">// 父类的静态方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Animal的doSome方法执行！&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br><span class="hljs-comment">// 尝试在子类当中对父类的静态方法进行重写</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Cat的doSome方法执行！&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="12-7-2-私有方法不能覆盖"><a href="#12-7-2-私有方法不能覆盖" class="headerlink" title="12.7.2 私有方法不能覆盖"></a>12.7.2 私有方法不能覆盖</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 经过测试，你记住就行。</span><br><span class="hljs-comment">// 私有方法不能覆盖。</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OverrideTest06</span></span>&#123;<br><br><span class="hljs-comment">// 私有方法</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;OverrideTest06&#x27;s private method doSome execute!&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 入口</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><span class="hljs-comment">// 多态</span><br>OverrideTest06 ot = <span class="hljs-keyword">new</span> T();<br>ot.doSome(); <span class="hljs-comment">//OverrideTest06&#x27;s private method doSome execute!</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">// 在外部类中无法访问私有的。</span><br><span class="hljs-comment">class MyMain&#123;</span><br><span class="hljs-comment">public static void main(String[] args)&#123;</span><br><span class="hljs-comment">OverrideTest06 ot = new T();</span><br><span class="hljs-comment">//错误: doSome() 在 OverrideTest06 中是 private 访问控制</span><br><span class="hljs-comment">//ot.doSome();</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 子类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OverrideTest06</span></span>&#123;<br><span class="hljs-comment">// 尝试重写父类中的doSome()方法</span><br><span class="hljs-comment">// 访问权限不能更低，可以更高。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;T&#x27;s public doSome method execute!&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11、方法覆盖（Override）</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E6%96%B9%E6%B3%95%E8%A6%86%E7%9B%96%EF%BC%88Override%EF%BC%89/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E6%96%B9%E6%B3%95%E8%A6%86%E7%9B%96%EF%BC%88Override%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="11-1-什么时候考虑使用方法覆盖"><a href="#11-1-什么时候考虑使用方法覆盖" class="headerlink" title="11.1 什么时候考虑使用方法覆盖"></a>11.1 什么时候考虑使用方法覆盖</h3><ul><li>子类继承父类之后，<strong>当继承过来的方法无法满足当前子类的业务需求时</strong>，子类有权利对这个方法进行重新编写，有必要进行“方法的覆盖”。</li><li>[回顾方法重载](###6.3 方法重载（Overload）)</li></ul><h3 id="11-2-怎样才能构成方法覆盖"><a href="#11-2-怎样才能构成方法覆盖" class="headerlink" title="11.2 怎样才能构成方法覆盖"></a>11.2 怎样才能构成方法覆盖</h3><ul><li><strong>两个类必须要有继承关系。</strong></li><li><strong>重写之后的方法和之前的方法具有：</strong><ul><li><strong>相同的返回值类型</strong></li><li><strong>相同的方法名</strong></li><li><strong>相同的形式参数列表</strong></li></ul></li><li><strong>访问权限不能更低，可以更高。</strong></li><li><strong>重写之后的方法不能比之前的方法抛出更多的异常，可以更少。</strong></li></ul><h3 id="11-3-方法覆盖的使用"><a href="#11-3-方法覆盖的使用" class="headerlink" title="11.3 方法覆盖的使用"></a>11.3 方法覆盖的使用</h3><ul><li>当子类对父类继承过来的方法进行“方法覆盖”之后，子类对象调用该方法的时候，一定执行覆盖之后的方法。</li><li><strong>注意事项：</strong><ul><li><strong>方法覆盖只是针对于方法，和属性无关。</strong></li><li><strong>私有方法无法覆盖。</strong></li><li><strong>构造方法不能被继承，所以构造方法也不能被覆盖。</strong></li><li><strong>方法覆盖只是针对于“实例方法”，“静态方法覆盖”没有意义。</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Animal animal = <span class="hljs-keyword">new</span> Animal();<br>        animal.move();<br>        Cat cat = <span class="hljs-keyword">new</span> Cat();<br>        cat.move();<br>        Bird bird = <span class="hljs-keyword">new</span> Bird();<br>        bird.move();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;动物在移动&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-comment">// 以下是方法覆盖</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫在走猫步&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bird</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    <span class="hljs-comment">// 以下是方法覆盖</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;鸟儿在飞翔&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">动物在移动</span><br><span class="hljs-comment">    猫在走猫步</span><br><span class="hljs-comment">    鸟儿在飞翔</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="11-4-重载-toString-方法"><a href="#11-4-重载-toString-方法" class="headerlink" title="11.4 重载 toString() 方法"></a>11.4 重载 toString() 方法</h3><p><strong>调用一个 java 对象的 toString() 方法就可以将该java对象转换成字符串的表示形式。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Date date = <span class="hljs-keyword">new</span> Date(<span class="hljs-number">2008</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>);<br>        System.out.println(date);<span class="hljs-comment">// 输出：2008年8月8日</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Date</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> year;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> month;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> day;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Date</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(<span class="hljs-number">1970</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Date</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year, <span class="hljs-keyword">int</span> month, <span class="hljs-keyword">int</span> day)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.year = year;<br>        <span class="hljs-keyword">this</span>.month = month;<br>        <span class="hljs-keyword">this</span>.day = day;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getYear</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> year;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setYear</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.year = year;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getMonth</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> month;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMonth</span><span class="hljs-params">(<span class="hljs-keyword">int</span> month)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.month = month;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getDay</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> day;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDay</span><span class="hljs-params">(<span class="hljs-keyword">int</span> day)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.day = day;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 重写toString()方法，输出格式为 xx年xx月xx日</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getYear() +<span class="hljs-string">&quot;年&quot;</span>+ getMonth() +<span class="hljs-string">&quot;月&quot;</span>+ getDay() + <span class="hljs-string">&quot;日&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10、继承（extends）</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E7%BB%A7%E6%89%BF%EF%BC%88extends%EF%BC%89/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E7%BB%A7%E6%89%BF%EF%BC%88extends%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="10-1-继承的作用"><a href="#10-1-继承的作用" class="headerlink" title="10.1 继承的作用"></a>10.1 继承的作用</h3><ul><li>基本作用：子类继承父类，代码可以得到复用</li><li>重要作用：因为有了继承关系，才有了后期的 <strong>方法覆盖 和 多态机制</strong></li></ul><h3 id="10-2-继承的相关特性"><a href="#10-2-继承的相关特性" class="headerlink" title="10.2 继承的相关特性"></a>10.2 继承的相关特性</h3><ul><li>B 类继承 A 类，则称 A 类为超类（superclass）、父类、基类，B 类则称为子类（subclass）、派生类、扩展类</li><li>Java 中只支持单继承，不支持多继承，如 class A extends B,C{} ，这样是错误的</li><li>虽然Java中不支持多继承，但有时候会产生间接继承效果，如class A extends B{}   class B extends C{}，其实A就是间接继承于C的</li><li>Java中规定，==子类继承父类，除构造方法不能继承外，剩下都可以继承。但是私有的属性无法在子类中直接访问==。（即父类中 private 修饰的不能在子类中直接访问，可以通过间接的手段）</li><li>Java 中的类没有显示继承任何类，==则默认继承 Object 类==，Object 类是 Java 语言提供的根类（老祖宗类）， 也就是说，==一个对象与生俱来就有Object类型中所有的特征==。</li><li>继承也存在一些缺点，例如A类继承B类会导致它们之间耦合度非常高，B类发生改变后会马上影响A类。</li></ul><h3 id="10-3-继承的使用"><a href="#10-3-继承的使用" class="headerlink" title="10.3 继承的使用"></a>10.3 继承的使用</h3><ul><li><p>本质上，子类继承父类之后，<strong>是将父类继承过来的方法归为自己所有</strong>。实际上调用的也不是父类的方法，是他子类自己的方法（因为已经继承过来了就属于自己的。）。</p></li><li><p>在实际开发中，满足什么条件的时候，我可以使用继承呢：</p><ul><li>凡是采用 <strong>“is a/an”</strong> 能描述的，都可以继承</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">例如：<br>    Cat is an Animal：猫是一个动物<br>    Dog is an Animal：狗是一个动物<br>    CreditAccount is an Account：信用卡账户是一个银行账户<br>    ....<br></code></pre></td></tr></table></figure><h3 id="10-4-看看-Object-类的源码"><a href="#10-4-看看-Object-类的源码" class="headerlink" title="10.4 看看 Object 类的源码"></a>10.4 看看 Object 类的源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Object</span> </span>&#123;<br> <br> <span class="hljs-comment">// 注意：当源码当中一个方法以“;”结尾，并且修饰符列表中有“native”关键字</span><br> <span class="hljs-comment">// 表示底层调用C++写的dll程序（dll动态链接库文件）</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerNatives</span><span class="hljs-params">()</span></span>;<br><br> <span class="hljs-comment">// 静态代码块</span><br>    <span class="hljs-keyword">static</span> &#123;<br>  <span class="hljs-comment">// 调用registerNatives()方法。</span><br>        registerNatives();<br>    &#125;<br><br> <span class="hljs-comment">// 无参数构造方法</span><br>    <span class="hljs-meta">@HotSpotIntrinsicCandidate</span><span class="hljs-comment">// 注解</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Object</span><span class="hljs-params">()</span> </span>&#123;&#125;<br><br> <span class="hljs-comment">// 底层也是调用C++</span><br>    <span class="hljs-meta">@HotSpotIntrinsicCandidate</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> Class&lt;?&gt; getClass();<br><br> <span class="hljs-comment">// 底层也是调用C++</span><br>    <span class="hljs-meta">@HotSpotIntrinsicCandidate</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span></span>;<br><br> <span class="hljs-comment">// equals方法你应该能看懂。</span><br> <span class="hljs-comment">// public是公开的</span><br> <span class="hljs-comment">// boolean 是方法的返回值类型</span><br> <span class="hljs-comment">// equals 是一个方法名：相等</span><br> <span class="hljs-comment">// (Object obj) 形参</span><br> <span class="hljs-comment">// 只不过目前还不知道这个方法存在的意义。</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br> <span class="hljs-comment">//方法体</span><br>       <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span> == obj);<br>    &#125;<br>    <br> <span class="hljs-comment">// 已有对象a，想创建一个和a一模一样的对象，你可以调用这个克隆方法。</span><br> <span class="hljs-comment">// 底层也是调用C++</span><br>    <span class="hljs-meta">@HotSpotIntrinsicCandidate</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">native</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException</span>;<br><br> <span class="hljs-comment">// 一会我们可以测试一下toString()方法。</span><br> <span class="hljs-comment">// public表示公共的</span><br> <span class="hljs-comment">// String 是返回值类型，toString()方法执行结束之后返回一个字符串。</span><br> <span class="hljs-comment">// toString 这是方法名。</span><br> <span class="hljs-comment">// () 表示形参个数为0</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getClass().getName() + <span class="hljs-string">&quot;@&quot;</span> + Integer.toHexString(hashCode());<br>    &#125;<br><br>    <span class="hljs-meta">@HotSpotIntrinsicCandidate</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notify</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-meta">@HotSpotIntrinsicCandidate</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyAll</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wait</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        wait(<span class="hljs-number">0L</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wait</span><span class="hljs-params">(<span class="hljs-keyword">long</span> timeoutMillis)</span> <span class="hljs-keyword">throws</span> InterruptedException</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">wait</span><span class="hljs-params">(<span class="hljs-keyword">long</span> timeoutMillis, <span class="hljs-keyword">int</span> nanos)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>        <span class="hljs-keyword">if</span> (timeoutMillis &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;timeoutMillis value is negative&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (nanos &lt; <span class="hljs-number">0</span> || nanos &gt; <span class="hljs-number">999999</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<br>                                <span class="hljs-string">&quot;nanosecond timeout value out of range&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (nanos &gt; <span class="hljs-number">0</span> &amp;&amp; timeoutMillis &lt; Long.MAX_VALUE) &#123;<br>            timeoutMillis++;<br>        &#125;<br><br>        wait(timeoutMillis);<br>    &#125;<br>    <span class="hljs-meta">@Deprecated(since=&quot;9&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>当直接输出一个<strong>“引用”的时候，println() 方法会先自动调用 “引用.toString()”</strong> ，然后输出 toString() 方法的执行结果。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9、static和this关键字</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-static%E5%92%8Cthis%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-static%E5%92%8Cthis%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="9-1-static"><a href="#9-1-static" class="headerlink" title="9.1 static"></a>9.1 static</h3><h4 id="9-1-1-static介绍"><a href="#9-1-1-static介绍" class="headerlink" title="9.1.1 static介绍"></a>9.1.1 static介绍</h4><ul><li>static翻译为“静态”</li><li>所有static关键字修饰的都是类相关的，类级别的。</li><li>所有static修饰的，都是采用“类名.”的方式访问。</li><li>static修饰的变量：静态变量</li><li>static修饰的方法：静态方法</li></ul><h4 id="9-1-2-变量的分类"><a href="#9-1-2-变量的分类" class="headerlink" title="9.1.2 变量的分类"></a>9.1.2 变量的分类</h4><ul><li>根据声明的位置进行划分：<ul><li>在方法体当中声明的变量叫做：局部变量</li><li>在方法体之外声明的变量叫做：成员变量</li></ul></li><li>成员变量又可以分为：<ul><li>实例变量</li><li>静态变量</li></ul></li><li>三种变量分别存储在不同的内存中：<ul><li>局部变量：存储在栈内存中</li><li>实例变量：存储在堆内存中（对象级别的）</li><li>静态变量：存储在方法区中（是最先初始化的）（类级别的）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VarTest</span></span>&#123;<br><br><span class="hljs-comment">// 以下实例的，都是对象相关的，访问时采用“引用.”的方式访问。需要先new对象。</span><br><span class="hljs-comment">// 实例相关的，必须先有对象，才能访问，可能会出现空指针异常。</span><br><span class="hljs-comment">// 成员变量中的实例变量</span><br><span class="hljs-keyword">int</span> i;<br><br><span class="hljs-comment">// 实例方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m2</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">// 局部变量</span><br><span class="hljs-keyword">int</span> x = <span class="hljs-number">200</span>;<br>&#125;<br><br><span class="hljs-comment">// 以下静态的，都是类相关的，访问时采用“类名.”的方式访问。不需要new对象。</span><br><span class="hljs-comment">// 不需要对象的参与即可访问。没有空指针异常的发生。</span><br><span class="hljs-comment">// 成员变量中的静态变量</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> k;<br><br><span class="hljs-comment">// 静态方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m1</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">// 局部变量</span><br><span class="hljs-keyword">int</span> m = <span class="hljs-number">100</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9-1-3-什么时候使用静态变量"><a href="#9-1-3-什么时候使用静态变量" class="headerlink" title="9.1.3 什么时候使用静态变量"></a>9.1.3 什么时候使用静态变量</h4><ul><li><strong>如果这个类型的所有对象的某个属性值都是一样的</strong>，不建议定义为实例变量，浪费内存空间</li><li>建议定义为类级别特征，<strong>定义为静态变量，在 ==方法区== 中只保留一份</strong>，节省内存开销。</li><li><strong>一个对象一份的是实例变量。</strong></li><li><strong>所有对象一份的是静态变量</strong></li><li>==划重点：静态变量会在类加载的时候初始化，并且存储在方法区中。==</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义一个类表示中国人</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Chinese</span> </span>&#123;<br>    <span class="hljs-comment">// 身份证</span><br>    <span class="hljs-comment">// 每个人的身份证都不一样，用实例变量表示</span><br>    String idCard;<br>    <span class="hljs-comment">// 姓名</span><br>    <span class="hljs-comment">// 一个人对应一个名字，用实例变量表示</span><br>    String name;<br>    <span class="hljs-comment">// 国籍</span><br>    <span class="hljs-comment">// 每个人的国籍都一样，属于整个类的特征，使用静态变量表示</span><br>    <span class="hljs-keyword">static</span> String country;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9-1-4-实例变量和静态变量访问方法的区别"><a href="#9-1-4-实例变量和静态变量访问方法的区别" class="headerlink" title="9.1.4 实例变量和静态变量访问方法的区别"></a>9.1.4 实例变量和静态变量访问方法的区别</h4><ul><li>实例变量：一定需要使用 “引用.” 来访问</li><li>静态变量：建议使用 “类名.” 来访问，也可以使用 “引用.” 来访问，但是不推荐，这样会产生歧义</li><li><strong>当 “空引用” 访问 “实例” 相关（实例变量，实例方法）的时候，会出现空指针异常；</strong></li><li><strong>当 “空引用” 访问 “类” 相关（静态变量，静态方法）的时候，不会出现空指针异常。</strong></li></ul><h4 id="9-1-5-什么时候定义为实例方法？什么时候定义为静态方法？"><a href="#9-1-5-什么时候定义为实例方法？什么时候定义为静态方法？" class="headerlink" title="9.1.5 什么时候定义为实例方法？什么时候定义为静态方法？"></a>9.1.5 什么时候定义为实例方法？什么时候定义为静态方法？</h4><ul><li>一个方法一般描述了一个行为，如果说该行为必须由对象去触发，那么该方法定义为实例方法。</li><li>当这个方法体当中，**==直接访问了实例变量==**，这个方法一定是实例方法。</li><li>我们以后开发中，大部分情况下，如果是工具类的话，<strong>工具类当中的方法一般都是静态的</strong>。(静态方法有一个优点，是不需要new对象，直接采用类名调用，极其方便。工具类就是为了方便，所以工具类中的方法一般都是static的。)</li></ul><h4 id="9-1-6-静态代码块"><a href="#9-1-6-静态代码块" class="headerlink" title="9.1.6 静态代码块"></a>9.1.6 静态代码块</h4><p>使用 static 关键字可以定义静态代码块</p><ul><li>语法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>    java语句;<br>    java语句;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>静态代码块在什么时候执行：<ul><li>==类加载时执行==（早于 main 方法执行）</li><li>并且只执行一次</li></ul></li><li>一个程序可以写多个静态代码块</li><li>静态代码块一般是按照自上而下的顺序执行</li><li>静态代码块有啥作用，有什么用<ul><li>静态代码块不是那么常用（不是在每一个类中都要写）</li><li>静态代码块这种语法机制实际上是SUN公司给我们java程序员的==一个特殊的时刻/时机==。这个时机叫做：==类加载时机==。如：<strong>记录类加载的日志信息</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticTest</span> </span>&#123;<br>    <span class="hljs-comment">// 静态代码块</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是第一个静态代码块&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 静态代码块</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是第二个静态代码块&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">// main方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是main方法&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 静态代码块</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是第三个静态代码块&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">    我是第一个静态代码块</span><br><span class="hljs-comment">    我是第二个静态代码块</span><br><span class="hljs-comment">    我是第三个静态代码块</span><br><span class="hljs-comment">    我是main方法</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="9-1-7-JVM中的三块内存"><a href="#9-1-7-JVM中的三块内存" class="headerlink" title="9.1.7 JVM中的三块内存"></a>9.1.7 JVM中的三块内存</h4><ul><li>方法只要执行，会压栈。（局部变量）</li><li>new出来的对象都在堆中。垃圾回收器主要针对。（实例变量）</li><li>类的信息，字节码信息，代码片段。（静态变量）</li><li><strong>静态方法的代码片段放在方法区，但是方法执行过程当中需要的内存在栈中。</strong></li></ul><h4 id="9-1-8-目前为止，在-Java-程序中有顺序要求的"><a href="#9-1-8-目前为止，在-Java-程序中有顺序要求的" class="headerlink" title="9.1.8 目前为止，在 Java 程序中有顺序要求的"></a>9.1.8 目前为止，在 Java 程序中有顺序要求的</h4><ol><li>对于一个方法来说，方法体中的代码执行是有顺序的，遵循自上而下的顺序执行</li><li>静态代码块一和静态代码块二的执行是有先后顺序的</li><li>静态代码块和静态变量在类加载时是有先后顺序的</li></ol><h4 id="9-1-9-实例代码块"><a href="#9-1-9-实例代码块" class="headerlink" title="9.1.9 实例代码块"></a>9.1.9 实例代码块</h4><ul><li>语法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    java语句;<br>    java语句;<br>    java语句;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>实例语句块在什么时候执行<ul><li>实例语句在类加载是<strong>并没有执行</strong></li><li>只要是构造方法执行，必然在构造方法执行之前，自动执行“实例语句块”中的代码。（==在构造方法前执行==）</li><li>实际上这也是SUN公司为java程序员准备一个特殊的时机，叫做==对象构建时机==。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InstanceCode</span></span>&#123;<br><br><span class="hljs-comment">//入口</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;main begin&quot;</span>);<br><span class="hljs-keyword">new</span> InstanceCode();<span class="hljs-comment">// 调用无参构造</span><br><span class="hljs-keyword">new</span> InstanceCode();<br><span class="hljs-keyword">new</span> InstanceCode(<span class="hljs-string">&quot;abc&quot;</span>);<span class="hljs-comment">// 调用有参构造</span><br><span class="hljs-keyword">new</span> InstanceCode(<span class="hljs-string">&quot;xyz&quot;</span>);<br>&#125;<br>    <br><span class="hljs-comment">//实例语句块</span><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;实例语句块执行！&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// Constructor</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InstanceCode</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;无参数构造方法&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// Constructor</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InstanceCode</span><span class="hljs-params">(String name)</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;有参数的构造方法&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">    main begin</span><br><span class="hljs-comment">    实例语句块执行！</span><br><span class="hljs-comment">    无参数构造方法</span><br><span class="hljs-comment">    实例语句块执行！</span><br><span class="hljs-comment">    无参数构造方法</span><br><span class="hljs-comment">    实例语句块执行！</span><br><span class="hljs-comment">    有参数的构造方法</span><br><span class="hljs-comment">    实例语句块执行！</span><br><span class="hljs-comment">    有参数的构造方法</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="9-2-this"><a href="#9-2-this" class="headerlink" title="9.2 this"></a>9.2 this</h3><h4 id="9-2-1-this介绍"><a href="#9-2-1-this介绍" class="headerlink" title="9.2.1 this介绍"></a>9.2.1 this介绍</h4><ul><li>this是一个关键字，全部小写。</li><li>一个对象一个this</li><li>this是一个变量，是一个引用，==this保存当前对象的内存地址，指向自身==，严格意义上来说，this代表的就是“当前对象”</li><li>==this存储在堆内存当中对象的内部==</li></ul><h4 id="9-2-2-this的内存结构"><a href="#9-2-2-this的内存结构" class="headerlink" title="9.2.2 this的内存结构"></a>9.2.2 this的内存结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThisTest01</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><br>Customer c1 = <span class="hljs-keyword">new</span> Customer(<span class="hljs-string">&quot;张三&quot;</span>);<br>Customer c2 = <span class="hljs-keyword">new</span> Customer(<span class="hljs-string">&quot;李四&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 顾客类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span></span>&#123;<br><br><span class="hljs-comment">// 实例变量</span><br>String name;   <br><br><span class="hljs-comment">//构造方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Customer</span><span class="hljs-params">()</span></span>&#123;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Customer</span><span class="hljs-params">(String s)</span></span>&#123;<br>name = s;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210206205315532.png" alt="image-20210206205256696"></p><h4 id="9-2-3-this的使用"><a href="#9-2-3-this的使用" class="headerlink" title="9.2.3 this的使用"></a>9.2.3 this的使用</h4><ul><li>==this只能使用在实例方法中==。谁调用这个实例方法，this就是谁。所以this代表的是：当前对象。</li><li>“this.”大部分情况下是可以省略的</li><li>为什么this不能使用在静态方法中<ul><li>this代表当前对象，静态方法中不存在当前对象</li></ul></li></ul><h4 id="9-2-4-this-什么时候不能省略"><a href="#9-2-4-this-什么时候不能省略" class="headerlink" title="9.2.4 this. 什么时候不能省略"></a>9.2.4 this. 什么时候不能省略</h4><ul><li>在实例方法中，或者构造方法中，==为了区分局部变量和实例变量==，这种情况下：this. 是不能省略的。</li></ul><h4 id="9-2-5-this"><a href="#9-2-5-this" class="headerlink" title="9.2.5 this()"></a>9.2.5 this()</h4><p><strong>this除了可以使用在实例方法中，还可以用在构造方法中</strong></p><ul><li>通过当前的构造方法去调用另一个本类的构造方法，可以使用以下语法格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">this</span>(实际参数列表);<br></code></pre></td></tr></table></figure><ul><li><p>通过一个构造方法1去调用构造方法2，可以做到<strong>代码复用</strong>。但需要注意的是：“构造方法1”和“构造方法2” 都是在同一个类当中。</p></li><li><p>==注意：对于this()的调用只能出现在构造方法的第一行==</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Date</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> year;<br>    <span class="hljs-keyword">int</span> month;<br>    <span class="hljs-keyword">int</span> day;<br>    <br>    <span class="hljs-comment">// 调用无参构造方法是，显示 1970年1月1日</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Date</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>(<span class="hljs-number">1970</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 有参构造</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Date</span><span class="hljs-params">(<span class="hljs-keyword">int</span> year, <span class="hljs-keyword">int</span> month, <span class="hljs-keyword">int</span> day)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.year = year;<br>        <span class="hljs-keyword">this</span>.month = month;<br>        <span class="hljs-keyword">this</span>.day = day;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8、封装</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E5%B0%81%E8%A3%85/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="8-1-面向对象的三大特征"><a href="#8-1-面向对象的三大特征" class="headerlink" title="8.1 面向对象的三大特征"></a>8.1 面向对象的三大特征</h3><ul><li><strong>封装</strong></li><li><strong>继承</strong></li><li><strong>多态</strong></li></ul><p><strong>有了封装，才有继承；有了继承，才有多态。</strong></p><h3 id="8-2-什么是封装"><a href="#8-2-什么是封装" class="headerlink" title="8.2 什么是封装"></a>8.2 什么是封装</h3><ul><li>封装的作用：<ul><li>第一个作用：保证内部结构的安全</li><li>第二个作用：屏蔽复杂，暴露简单</li></ul></li></ul><h3 id="8-3-实例方法"><a href="#8-3-实例方法" class="headerlink" title="8.3 实例方法"></a>8.3 实例方法</h3><ul><li>带有 static 的方法和不带有 static 的方法的调用<ul><li>带有 static：通过类名直接调用（类级别的方法）</li><li>不带有 static：创建对象，通过对象来调用（对象级别的方法）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MethodTest</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>        <span class="hljs-comment">// 以下是调用的静态方法（就是带 static 修饰的）</span><br>MethodTest.doSome();<br><span class="hljs-comment">//类名. 可以省略（在同一个类中。）</span><br>doSome();<br>        <br>        <span class="hljs-comment">// 以下是调用实例方法（就是不带 staitc 修饰的）</span><br><span class="hljs-comment">// 尝试使用“类名.”的方式访问“实例方法”</span><br><span class="hljs-comment">// 错误的</span><br><span class="hljs-comment">//MethodTest.doOther();</span><br><br><span class="hljs-comment">// 创建对象</span><br>MethodTest mt = <span class="hljs-keyword">new</span> MethodTest();<br><span class="hljs-comment">// 通过&quot;引用.&quot;的方式访问实例方法。</span><br>mt.doOther();<br><br>&#125;<br><br><span class="hljs-comment">// 带有static</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;do some!&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//这个方法没有static，这样的方法被称为：实例方法。（对象方法，对象级别的方法）</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doOther</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;do other </span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><ul><li><strong>注意：只要是方法，不管是静态方法、实例方法还是构造方法，它们在运行的时候都需要压栈。</strong></li></ul><h3 id="8-4-怎么进行封装，代码怎么实现"><a href="#8-4-怎么进行封装，代码怎么实现" class="headerlink" title="8.4 怎么进行封装，代码怎么实现"></a>8.4 怎么进行封装，代码怎么实现</h3><ul><li>第一步：属性私有化（使用private关键字进行修饰。）<ul><li>private 表示私有的，被这个关键词修饰之后，该数据只能在本类中访问。</li></ul></li><li>第二步：对外提供简单的操作入口。<ul><li>对外提供公开的set方法和get方法作为操作入口，并且都不带static，都是实例方法。</li><li><strong>java开发规范中有要求，set方法和get方法要满足以下格式</strong></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">get方法的要求：<br>    <span class="hljs-keyword">public</span> 返回值类型 get+属性名首字母大写(无参)&#123;<br>    <span class="hljs-keyword">return</span> xxx;<br>&#125;<br>set方法的要求：<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> set+属性名首字母大写(有<span class="hljs-number">1</span>个参数)&#123;<br>    xxx = 参数;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过一个程序演示 get 方法和 set 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-comment">// 实例变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <br>    <span class="hljs-comment">// get方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <br>    <span class="hljs-comment">// set方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> newAge)</span> </span>&#123;<br>        <span class="hljs-comment">// 可以在这里设置“关卡”来过滤掉一些不合法数据</span><br>        <span class="hljs-keyword">if</span> (newAge &lt; <span class="hljs-number">0</span> || newAge &gt; <span class="hljs-number">150</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;您输入的数据不合法，请重新输入！&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<span class="hljs-comment">// 直接退出方法</span><br>        &#125;<br>        age = newAge;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7、认识面向对象</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E8%AE%A4%E8%AF%86%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E8%AE%A4%E8%AF%86%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="7-1-面向对象和面向过程"><a href="#7-1-面向对象和面向过程" class="headerlink" title="7.1 面向对象和面向过程"></a>7.1 面向对象和面向过程</h3><ul><li><p><a href="https://www.bilibili.com/video/BV1Rx411876f?p=373">视频详解</a></p></li><li><p>使用面向对象编程思想开发系统，在现代开发中会将面向对象贯穿整个过程，一般包括：</p><ul><li>OOA：面向对象分析（Object-Oriented Analysis） </li><li>OOD：面向对象设计（Object-Oriented Design）</li><li>OOP：面向对象编程（Object-Oriented Programming）</li></ul></li><li><p><strong>面向对象三大特征</strong></p><ul><li>封装（Encapsulation） </li><li>继承（Inheritance） </li><li>多态（Polymorphism）</li></ul></li></ul><h3 id="7-2-类和对象的概念-很枯燥但很重要"><a href="#7-2-类和对象的概念-很枯燥但很重要" class="headerlink" title="7.2 类和对象的概念(很枯燥但很重要)"></a>7.2 类和对象的概念(很枯燥但很重要)</h3><p><a href="https://www.bilibili.com/video/BV1Rx411876f?p=379">视频讲解</a></p><h4 id="7-2-1-什么是类"><a href="#7-2-1-什么是类" class="headerlink" title="7.2.1 什么是类"></a>7.2.1 什么是类</h4><ul><li>类实际上在现实世界当中是==不存在的，是一个抽象的概念==。是一个模板。是我们人类大脑进行“思考、总结、抽象”的一个结果。</li><li>类本质上是现实世界当中某些事物具有共同特征，将这些共同特征提取出来形成的概念就是一个“类”，==“类”就是一个模板==。</li></ul><h4 id="7-2-2-什么是对象"><a href="#7-2-2-什么是对象" class="headerlink" title="7.2.2 什么是对象"></a>7.2.2 什么是对象</h4><ul><li>==对象是实际存在的个体==</li><li>在java语言中，要想得到“对象”，必须先定义“类”，<strong>“对象”是通过“类”这个模板创造出来的</strong>。</li></ul><h4 id="7-2-3-术语"><a href="#7-2-3-术语" class="headerlink" title="7.2.3 术语"></a>7.2.3 术语</h4><ul><li>类：不存在的，人类大脑思考中总结的一个模板</li><li>对象：实际存在的个体，通过 “类” 创造出来</li><li>实例：对象的另一个名字</li><li>实例化：通过类这个模板将对象创建出来的过程叫做实例化</li><li>抽象：多个对象具有的共同特征，进行思考总结抽取共同特征的过程</li><li>==类 —&gt; 【实例化】 —&gt; 对象（实例）==</li><li>==对象 —&gt; 【抽象】 —&gt; 类==</li></ul><h4 id="7-2-4-类的定义"><a href="#7-2-4-类的定义" class="headerlink" title="7.2.4 类的定义"></a>7.2.4 类的定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] <span class="hljs-class"><span class="hljs-keyword">class</span> 类名 </span>&#123;<br> <span class="hljs-comment">// 类体 = 属性 + 方法</span><br>    <span class="hljs-comment">// 属性在代码上以“变量”的形式存在</span><br>    <span class="hljs-comment">// 方法描述动作或行为</span><br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-comment">// 以下四个变量即为 属性</span><br>    <span class="hljs-keyword">int</span> sno;<span class="hljs-comment">// 学号</span><br>    String name;<span class="hljs-comment">// 姓名</span><br>    <span class="hljs-keyword">boolean</span> gender;<span class="hljs-comment">// 性别（true表示男，false表示女）</span><br>    String address;<span class="hljs-comment">// 住址</span><br>    <br>    <span class="hljs-comment">// 以下是一个方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(name + <span class="hljs-string">&quot;的学号是：&quot;</span> + sno + <span class="hljs-string">&quot;，性别是：&quot;</span> + (gender ? <span class="hljs-string">&quot;男&quot;</span> : <span class="hljs-string">&quot;女&quot;</span>) + <span class="hljs-string">&quot;，住在：&quot;</span> + address);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-2-5-对象创建"><a href="#7-2-5-对象创建" class="headerlink" title="7.2.5 对象创建"></a>7.2.5 对象创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">类名 变量名 = <span class="hljs-keyword">new</span> 类名();<span class="hljs-comment">// 这样就完成了对象的创建</span><br><span class="hljs-comment">// 如</span><br>Student student = <span class="hljs-keyword">new</span> Student();<br></code></pre></td></tr></table></figure><ul><li>什么是实例变量：对象又被称为实例变量，实例变量在实际上就是：对象级别的变量</li><li>不能通过类名来直接访问实例变量，需要new对象后，通过 <strong>“对象名.实例变量”</strong> 才能访问实例变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 如People类中的name变量就是实例变量</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    String name;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-2-6-创建对象对应的-JVM-内存结构"><a href="#7-2-6-创建对象对应的-JVM-内存结构" class="headerlink" title="7.2.6 创建对象对应的 JVM 内存结构"></a>7.2.6 创建对象对应的 JVM 内存结构</h4><p><a href="https://www.bilibili.com/video/BV1Rx411876f?p=385">视频讲解</a></p><p>以下是一个学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>&#123;<br><span class="hljs-comment">// 属性（描述状态），在java程序中以“成员变量”的形式存在。</span><br><span class="hljs-comment">// 学号</span><br><span class="hljs-comment">// 一个对象一份。</span><br><span class="hljs-keyword">int</span> no; <span class="hljs-comment">// 这种成员变量又被称为“实例变量”。</span><br><span class="hljs-comment">// 姓名</span><br>String name;<br><span class="hljs-comment">// 年龄</span><br><span class="hljs-keyword">int</span> age;<br><span class="hljs-comment">// 性别</span><br><span class="hljs-keyword">boolean</span> sex;<br><span class="hljs-comment">// 住址</span><br>String addr;<br>&#125;<br></code></pre></td></tr></table></figure><p>以下main方法中使用学生类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Student s1 = <span class="hljs-keyword">new</span> Student();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210206110351783.png" alt="image-20210206110147553"></p><h4 id="7-2-7-对象和引用的区别"><a href="#7-2-7-对象和引用的区别" class="headerlink" title="7.2.7 对象和引用的区别"></a>7.2.7 对象和引用的区别</h4><ul><li>对象是 new 出来的，在堆内存中存储</li><li>是一个变量，这个变量中储存了一个内存地址，指向了对象在堆内存中的地址</li></ul><h4 id="7-2-8-系统默认值"><a href="#7-2-8-系统默认值" class="headerlink" title="7.2.8 系统默认值"></a>7.2.8 系统默认值</h4><p>对于成员变量来说，没有手动赋值时，系统默认赋值</p><table><thead><tr><th>数据类型</th><th>缺省默认值</th></tr></thead><tbody><tr><td>byte</td><td>0</td></tr><tr><td>short</td><td>0</td></tr><tr><td>int</td><td>0</td></tr><tr><td>long</td><td>0L</td></tr><tr><td>float</td><td>0.0f</td></tr><tr><td>double</td><td>0.0</td></tr><tr><td>boolean</td><td>false</td></tr><tr><td>cher</td><td>‘\u0000’</td></tr><tr><td>引用数据类型</td><td>null</td></tr></tbody></table><h4 id="7-2-9-画以下程序的内存图"><a href="#7-2-9-画以下程序的内存图" class="headerlink" title="7.2.9 画以下程序的内存图"></a>7.2.9 画以下程序的内存图</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span></span>&#123;<br>A o1; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>D d = <span class="hljs-keyword">new</span> D();<br>C c = <span class="hljs-keyword">new</span> C();<br>B b = <span class="hljs-keyword">new</span> B();<br>A a = <span class="hljs-keyword">new</span> A();<br>T t = <span class="hljs-keyword">new</span> T();<br><br>c.o4 = d;<br>b.o3 = c;<br>a.o2 = b;<br>t.o1 = a;<br><br>System.out.println(t.o1.o2.o3.o4.i);<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>B o2;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;<br>C o3;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<br>D o4;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span></span>&#123;<br><span class="hljs-keyword">int</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210206114813124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTYwMTA0MA==,size_16,color_FFFFFF,t_70#pic_center" alt="内存图"></p><h4 id="7-2-10-空指针异常（NullPointerException）"><a href="#7-2-10-空指针异常（NullPointerException）" class="headerlink" title="7.2.10 空指针异常（NullPointerException）"></a>7.2.10 空指针异常（NullPointerException）</h4><p><strong>==导致空指针异常最本质的原因是：空引用访问 “实例相关的数据”（包括实例变量 + 实例方法），会出现空指针异常==</strong></p><p>观察以下程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">空指针异常。（NullPointerException）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">关于垃圾回收器：GC</span><br><span class="hljs-comment">在java语言中，垃圾回收器主要针对的是堆内存。</span><br><span class="hljs-comment">当一个java对象没有任何引用指向该对象的时候，</span><br><span class="hljs-comment">GC会考虑将该垃圾数据释放回收掉。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">出现空指针异常的前提条件是？</span><br><span class="hljs-comment">&quot;空引用&quot;访问实例【对象相关】相关的数据时，都会出现空指针异常。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NullPointerTest</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><span class="hljs-comment">// 创建客户对象</span><br>Customer c = <span class="hljs-keyword">new</span> Customer();<br><span class="hljs-comment">// 访问这个客户的id</span><br>System.out.println(c.id); <span class="hljs-comment">// 0</span><br><br><span class="hljs-comment">// 重新给id赋值</span><br>c.id = <span class="hljs-number">9521</span>; <span class="hljs-comment">// 终身代号</span><br>System.out.println(<span class="hljs-string">&quot;客户的id是=&quot;</span> + c.id);<br><br>c = <span class="hljs-keyword">null</span>;<br><span class="hljs-comment">// NullPointerException</span><br><span class="hljs-comment">// 编译器没问题，因为编译器只检查语法，编译器发现c是Customer类型，</span><br><span class="hljs-comment">// Customer类型中有id属性，所以可以：c.id。语法过了。</span><br><span class="hljs-comment">// 但是运行的时候需要对象的存在，但是对象没了，尴尬了，就只能出现一个异常。</span><br>System.out.println(c.id);<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span></span>&#123;<br><span class="hljs-comment">// 客户id</span><br><span class="hljs-keyword">int</span> id; <span class="hljs-comment">// 成员变量中的实例变量，应该先创建对象，然后通过“引用.”的方式访问。</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210206122223128.png" alt="image-20210206122203931"></p><h4 id="7-2-11-方法调用时的参数传递"><a href="#7-2-11-方法调用时的参数传递" class="headerlink" title="7.2.11 方法调用时的参数传递"></a>7.2.11 方法调用时的参数传递</h4><ul><li>参数传递的时候，和类型无关，不管是基本数据类型还是引用数据类型统一都是将变量中保存的那个“值”复制一份，传递下去，这个值可能是一个数字、字符串、可能是一个内存地址。</li></ul><h3 id="7-3-构造方法"><a href="#7-3-构造方法" class="headerlink" title="7.3 构造方法"></a>7.3 构造方法</h3><blockquote><p> <strong>构造方法使用来创建对象的，并且给对象当中的实例变量赋值。</strong></p><p> <strong>当一个类中没有提供任何构造方法，系统默认提供一个无参数的构造方法。这个==无参数的构造方法叫做缺省构造器==。</strong></p><p> <strong>当一个类中手动提供了构造方法，那么系统将不在提供默认的无参构造方法。</strong></p></blockquote><ul><li>构造方法的语法结构<ul><li>构造方法名和类名必须一致</li><li>构造方法不需要指定返回值类型，也不能写void</li><li>通常在构造方法体当中给属性赋值，完成属性的初始化</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符列表] 构造方法名(形式参数列表)&#123;<br>    构造方法体;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>调用构造方法怎么调用呢<ul><li>使用new运算符来调用构造方法</li><li>语法格式：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> 构造方法名(实际参数列表);<br></code></pre></td></tr></table></figure><ul><li><p>构造方法支持方法重载：</p><ul><li>构造方法是支持方法重载的</li><li>在一个类当中构造方法可以有多个</li><li>并且所有的构造方法名字都是一样的</li></ul></li><li><p>对于实例变量来说，==只要你在构造方法中没有手动给它赋值，统一都会默认赋值==。默认赋系统值。如：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vip</span></span>&#123;<br><span class="hljs-comment">// 会员号</span><br><span class="hljs-keyword">long</span> no;<br><span class="hljs-comment">// 会员姓名</span><br>String name;<br><span class="hljs-comment">// 生日</span><br>String birth;<br><span class="hljs-comment">// 性别</span><br><span class="hljs-keyword">boolean</span> sex;<br><span class="hljs-comment">//无参数构造方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Vip</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">// 实际上这里还有两行代码（没有手动赋值，系统都会默认赋值。）</span><br>        <span class="hljs-comment">// no = 0L;</span><br>        <span class="hljs-comment">// name = null;</span><br>        <span class="hljs-comment">// birth = null;</span><br>        <span class="hljs-comment">// sex = false;</span><br>&#125;<br><br><span class="hljs-comment">//有参数构造方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Vip</span><span class="hljs-params">(<span class="hljs-keyword">long</span> huiYuanHao, String xingMing)</span></span>&#123;<br><span class="hljs-comment">// 给实例变量赋值【初始化实例变量，初始化属性】</span><br>no = huiYuanHao;<br>name = xingMing;<br><span class="hljs-comment">// 实际上这里还有两行代码（没有手动赋值，系统都会默认赋值。）</span><br><span class="hljs-comment">//birth = null;</span><br><span class="hljs-comment">//sex = false;</span><br>&#125;<br><br><span class="hljs-comment">//有参数构造方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Vip</span><span class="hljs-params">(<span class="hljs-keyword">long</span> huiYuanHao,String xingMing, String shengRi)</span></span>&#123;<br>no = huiYuanHao;<br>name = xingMing;<br>birth = shengRi;<br><span class="hljs-comment">// 实际上这里有一行默认的代码</span><br><span class="hljs-comment">//sex = false;</span><br>&#125;<br><br><span class="hljs-comment">//有参数的构造方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Vip</span><span class="hljs-params">(<span class="hljs-keyword">long</span> huiYuanHao,String xingMing,String shengRi,<span class="hljs-keyword">boolean</span> xingBie)</span></span>&#123;<br>no = huiYuanHao;<br>name = xingMing;<br>birth = shengRi;<br>sex = xingBie;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6、方法与递归</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E6%96%B9%E6%B3%95%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E6%96%B9%E6%B3%95%E4%B8%8E%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>对于一个java程序来说，如果没有“方法”，代码无法得到复用。</strong></p><ul><li>方法怎么定义，语法机制是什么</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符列表] 返回值类型 方法名(形式参数列表)&#123;<br>    方法体; <br>&#125;<br><span class="hljs-comment">// 如</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> 是修饰符列表，不是必须的，是可选的<br><span class="hljs-keyword">int</span> 是返回值类型<br>add 是方法名<br><span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b 是形式参数<br><span class="hljs-keyword">return</span> a + b； 是方法体，是Java语句<br></code></pre></td></tr></table></figure><ul><li><p>返回值：</p><ul><li>返回值类型可以是任何类型，只要是 Java 中合法的数据类型就行，数据类型包括**==基本数据类型==<strong>和</strong>==引用数据类型==**</li><li>返回值一般指的是一个方法执行结束之后的结果。结果通常是一个数据，所以被称为“值”，而且还叫“返回值”。</li><li>当一个方法执行结束不返回任何值的时候，返回值类型也不能空白，必须写上 <strong>void关键字</strong></li><li>当返回值类型不是 void 的的时候，在方法体结束时一定要写 return 值; </li><li><strong>只要有 “return” 关键字的语句执行，当前方法必然结束</strong>。return 只要执行，当前所在的方法结束，记住：不是整个程序结束。</li></ul></li><li><p>方法名：方法名要见名知意。（驼峰命名方式）</p></li><li><p>形式参数列表：形式参数列表中的每一个参数都是“局部变量”，方法结束之后内存释放。形参的个数是：0~N个。</p></li><li><p>方法定义之后怎么调用（目前是 static 修饰的静态方法）：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">类名.方法名(实际参数列表);<br></code></pre></td></tr></table></figure><h3 id="6-1-return-和-break-和-continue-的区别"><a href="#6-1-return-和-break-和-continue-的区别" class="headerlink" title="6.1 return; 和 break; 和 continue; 的区别"></a>6.1 return; 和 break; 和 continue; 的区别</h3><ul><li>return：用来终止离它最近的一个方法</li><li>break：用来终止switch和离它最近的循环</li><li>continue：终止当前”本次”循环，直接进入下一次循环继续执行</li></ul><h3 id="6-2-一个错误"><a href="#6-2-一个错误" class="headerlink" title="6.2 一个错误"></a>6.2 一个错误</h3><ul><li>11: 错误: 缺少返回语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><span class="hljs-keyword">int</span> x = m1(<span class="hljs-keyword">true</span>);<br>System.out.println(x);<br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">m1</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> flag)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (flag) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>        <span class="hljs-comment">// 以下语句也得写上</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>；<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-3-JVM中三块主要的内存"><a href="#6-3-JVM中三块主要的内存" class="headerlink" title="6.3 JVM中三块主要的内存"></a>6.3 JVM中三块主要的内存</h3><p>分别是 <strong>==栈内存、堆内存、方法区==</strong></p><ul><li>方法区：存放代码片段。存放class字节码（最先有文件的）</li><li>堆内存：[后面讲](####8.2.6 创建对象对应的 JVM 内存结构)</li><li>栈内存：方法调用的时候，该方法需要的内存空间在栈中分配。<ul><li>方法调用叫做：压栈（push）。分配空间</li><li>方法结束叫做：弹栈（pop）。释放空间</li><li><strong>栈中存储什么：方法运行过程中需要的内存，以及栈中会存储方法的局部变量</strong></li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20210204162557342.png" alt="image-20210204161426273"></p><ul><li>方法执行时内存的变化，<a href="https://www.bilibili.com/video/BV1Rx411876f?p=350">视频讲解</a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MethodTest08</span></span>&#123;<br><span class="hljs-comment">//主方法，入口</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;main begin&quot;</span>);<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">100</span>;<br>m1(x);<br>System.out.println(<span class="hljs-string">&quot;main over&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123; <span class="hljs-comment">// i是局部变量</span><br>System.out.println(<span class="hljs-string">&quot;m1 begin&quot;</span>);<br>m2(i);<br>System.out.println(<span class="hljs-string">&quot;m1 over&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;m2 begin&quot;</span>);<br>m3(i);<br>System.out.println(<span class="hljs-string">&quot;m2 over&quot;</span>);<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;m3 begin&quot;</span>);<br>System.out.println(i);<br>System.out.println(<span class="hljs-string">&quot;m3 over&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210204164036207.png" alt="image-20210204163942945"></p><h3 id="6-3-方法重载（Overload）"><a href="#6-3-方法重载（Overload）" class="headerlink" title="6.3 方法重载（Overload）"></a>6.3 方法重载（Overload）</h3><ul><li><p>什么时候需要考虑使用方法重载：</p><ul><li>在同一个类当中，<strong>如果“功能1”和“功能2”它们的功能是相似的</strong>，那么可以考虑将它们的方法名一致，这样代码既美观，又便于后期的代码编写（容易记忆，方便使用）</li><li>方法重载overload不能随便使用，如果两个功能压根不相干，不相似，根本没关系，此时两个方法使用重载机制的话，会导致编码更麻烦。无法进行方法功能的区分。</li></ul></li><li><p>什么时候代码会发生方法重载：</p><ul><li><p>条件1：在同一个类当中</p></li><li><p>条件2：方法名相同</p></li><li><p>条件3：参数列表不同</p><ul><li>==参数的个数==不同算不同</li><li>==参数的类型==不同算不同</li><li>==参数的顺序==不同算不同</li></ul></li><li><p>==方法重载和方法的 “返回值类型” 和 “修饰符列表” 无关==</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">a</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">long</span> b)</span> </span>&#123;<br>    <br>&#125;<br><span class="hljs-comment">// 这样构成方法重载</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">m</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">double</span> <span class="hljs-title">m</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>&#125;<br><span class="hljs-comment">// 这样不构成方法重载</span><br></code></pre></td></tr></table></figure><h3 id="6-4-方法递归"><a href="#6-4-方法递归" class="headerlink" title="6.4 方法递归"></a>6.4 方法递归</h3><p><strong>方法自己调用自己，这就是方法递归</strong></p><p><strong>当递归时程序没有结束条件，一定会发生：==栈内存溢出错误：StackOverflowError==</strong></p><p><strong>==所以：递归必须要有结束条件==</strong></p><ul><li>递归执行是栈内存中的变化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br><span class="hljs-comment">// 入口</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>doSome(<span class="hljs-number">5</span>);<br>System.out.println(<span class="hljs-string">&quot;doSome over&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;doSome &quot;</span>+<span class="hljs-string">&quot;[&quot;</span>+num+<span class="hljs-string">&quot;]&quot;</span>+ <span class="hljs-string">&quot;begin&quot;</span>);<br><span class="hljs-comment">// 结束条件</span><br><span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>doSome(--num);<br>System.out.println(<span class="hljs-string">&quot;doSome &quot;</span>+<span class="hljs-string">&quot;[&quot;</span>+(num+<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;]&quot;</span>+ <span class="hljs-string">&quot;over&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210205114536800.png" alt="20210205114536800.png"></p><ul><li>使用递归实现计算 1+2+3+…+100 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">使用递归实现计算 1+2+3+...+100 </span><br><span class="hljs-comment"> */</span><br>System.out.println(sum(<span class="hljs-number">100</span>));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (num == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> num + sum(--num);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5、控制语句</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="5-1-if语句"><a href="#5-1-if语句" class="headerlink" title="5.1 if语句"></a>5.1 if语句</h3><p><strong>if 语句是分支语句，也可以叫做条件语句。</strong></p><ul><li><p>语法格式</p><ul><li>第一种</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式)&#123;<br>    java语句;<br>    java语句;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>第二种</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式)&#123;  <span class="hljs-comment">// 分支1</span><br>    java语句;     <br>&#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-comment">// 分支2</span><br>    java语句;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>第三种</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">1</span>)&#123; <span class="hljs-comment">// 分支1</span><br>    java语句;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">2</span>)&#123; <span class="hljs-comment">// 分支2</span><br>    java语句;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">3</span>)&#123;<br>    java语句;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">4</span>)&#123;<br>    java语句;<br>&#125;....<br></code></pre></td></tr></table></figure><ul><li>第四种</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">1</span>)&#123; <span class="hljs-comment">// 分支1</span><br>    java语句;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">2</span>)&#123; <span class="hljs-comment">// 分支2</span><br>    java语句;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">3</span>)&#123;<br>    java语句;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(布尔表达式<span class="hljs-number">4</span>)&#123;<br>    java语句;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    java语句; <span class="hljs-comment">// 以上条件没有一个成立的。这个else就执行了。</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>对于 if 语句来说，在任何情况下只能有 1 个分支执行，不可能存在 2 个或者更多个分支执行。if 语句中只要有 1 个分支执行了，整个 if 语句就结束了。（对于 1 个完整的if语句来说的。）</p></li><li><p>以上 4 种语法机制中，凡是带有 else 分支的，一定可以保证会有一个分支执行。以上 4 种当中，第一种和第三种没有 else 分支，这样的语句可能会导致最后一个分支都不执行。第二种和第四种肯定会有 1个分支执行。</p></li><li><p>当分支当中“java语句;”只有1条，那么大括号{}可以省略，但为了可读性，最好不要省略。</p></li><li><p>控制语句和控制语句之间是可以嵌套的，但是嵌套的时候大家最好一个语句一个语句进行分析，不要冗杂在一起分析。</p></li><li><p>一个例子</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">业务要求：</span><br><span class="hljs-comment">1、从键盘上接收一个人的年龄。</span><br><span class="hljs-comment">2、年龄要求为[0-150]，其它值表示非法，需要提示非法信息。</span><br><span class="hljs-comment">3、根据人的年龄来动态的判断这个人属于生命的哪个阶段？</span><br><span class="hljs-comment">[0-5] 婴幼儿</span><br><span class="hljs-comment">[6-10] 少儿</span><br><span class="hljs-comment">[11-18] 少年</span><br><span class="hljs-comment">[19-35] 青年</span><br><span class="hljs-comment">[36-55] 中年</span><br><span class="hljs-comment">[56-150] 老年</span><br><span class="hljs-comment">4、请使用if语句完成以上的业务逻辑。</span><br><span class="hljs-comment">*/</span><br>String str = <span class="hljs-string">&quot;老年&quot;</span>; <span class="hljs-comment">// 字符串变量默认值是“老年”</span><br><span class="hljs-keyword">if</span>(age &lt; <span class="hljs-number">0</span> || age &gt; <span class="hljs-number">150</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;对不起，年龄值不合法&quot;</span>);<br><span class="hljs-comment">// 既然不合法，你就别让程序往下继续执行了，怎么终止程序执行</span><br><span class="hljs-comment">//return;</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(age &lt;= <span class="hljs-number">5</span>)&#123;<br>str = <span class="hljs-string">&quot;婴幼儿&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(age &lt;= <span class="hljs-number">10</span>)&#123;<br>str = <span class="hljs-string">&quot;少儿&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(age &lt;= <span class="hljs-number">18</span>)&#123;<br>str = <span class="hljs-string">&quot;少年&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(age &lt;= <span class="hljs-number">35</span>)&#123;<br>str = <span class="hljs-string">&quot;青年&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(age &lt;= <span class="hljs-number">55</span>)&#123;<br>str = <span class="hljs-string">&quot;中年&quot;</span>;<br>&#125; <br>System.out.println(str);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-switch语句"><a href="#5-2-switch语句" class="headerlink" title="5.2 switch语句"></a>5.2 switch语句</h3><p><strong>switch语句也是选择语句，也可以叫做分支语句</strong></p><ul><li>语法格式: </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(值)&#123;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">1</span>:<br>        java语句;<br>        java语句;...<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">2</span>:<br>        java语句;<br>        java语句;...<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> 值<span class="hljs-number">3</span>:<br>        java语句;<br>        java语句;...<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        java语句;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中：break;语句不是必须的。default分支也不是必须的</p><ul><li>switch语句支持的值有哪些:<ul><li>支持 int 类型以及 String 类型</li><li>在 JDK8 之前不支持 String 类型</li><li>byte , short , char 也可以使用在 switch 语句当中，因为 byte  short  char 可以进行自动类型转换</li></ul></li><li>switch 语句执行原理：<ul><li>拿“值”与“值1”进行比较，如果相同，则执行该分支中的 java 语句，然后遇到 “break;” 语句，switch语句就结束了。</li><li>如果“值”与“值1”不相等，会继续拿“值”与“值2”进行比较，如果相同，则执行该分支中的 java 语句，然后遇到 “break;” 语句，switch 结束。</li><li><strong>注意：如果分支执行了，但是分支最后没有 “break;”，此时会发生<a href="https://www.bilibili.com/video/BV1Rx411876f?p=286">case 穿透现象</a> 视频09:36处。</strong></li><li>所有的 case 都没有匹配成功，那么最后 default 分支会执行。</li></ul></li></ul><h3 id="5-3-for循环"><a href="#5-3-for循环" class="headerlink" title="5.3 for循环"></a>5.3 for循环</h3><ul><li>语法机制：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(初始化表达式; 条件表达式; 更新表达式)&#123;<br>    循环体; <span class="hljs-comment">// 循环体由java语句构成</span><br>    java语句;<br>    java语句;<br>    java语句;<br>    java语句;<br>    ....<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>执行原理:</p><ol><li>先执行初始化表达式，并且初始化表达式只执行1次。</li><li>然后判断条件表达式的结果，如果条件表达式结果为true，则执行循环体。</li><li>循环体结束之后，执行更新表达式。</li><li>更新完之后，再判断条件表达式的结果，如果还是true，继续执行循环体。</li><li>直到更新表达式执行结束之后，再次判断条件时，条件为false，for循环终止。</li></ol></li><li><p>更新表达式的作用是：控制循环的次数。</p></li><li><p>最简练的for循环怎么写?</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(;;)&#123;<br>    System.out.println(<span class="hljs-string">&quot;死循环&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这就是个死循环</p><ul><li>输出 0 - 9</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;i++)&#123;<br>    System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i); <span class="hljs-comment">// 0 1 2 3....9</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用for循环，实现1~100所有奇数求和</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i += <span class="hljs-number">2</span>) &#123;<br>    sum += i;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;sum = &quot;</span> + sum);<span class="hljs-comment">// sum = 2500</span><br></code></pre></td></tr></table></figure><ul><li>九九乘法表</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<span class="hljs-comment">// 纵向循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<span class="hljs-comment">// 横向循环，j的范围受i的影响</span><br>System.out.print(i +<span class="hljs-string">&quot;*&quot;</span>+j +<span class="hljs-string">&quot;=&quot;</span>+(i*j)+<span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-4-while循环"><a href="#5-4-while循环" class="headerlink" title="5.4 while循环"></a>5.4 while循环</h3><ul><li>语法机制：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(布尔表达式)&#123;<br>    循环体;<br>    更新表达式;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>执行原理：</p><ol><li><p>判断布尔表达式的结果，如果为true就执行循环体，更新表达式</p></li><li><p>再次判断布尔表达式的结果，如果还是true，继续执行循环体，直到布尔表达式结果为false，while循环结束。</p></li></ol></li><li><p><strong>while循环的循环次数是：0~n次</strong></p></li></ul><h3 id="5-5-do-while循环"><a href="#5-5-do-while循环" class="headerlink" title="5.5 do..while循环"></a>5.5 do..while循环</h3><ul><li>语法机制</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span> &#123;<br>    循环体;<br>&#125;<span class="hljs-keyword">while</span>(布尔表达式);<br></code></pre></td></tr></table></figure><ul><li>执行原理：<ol><li>先执行循环体当中的代码，执行一次循环体之后，判断布尔表达式的结果</li><li>如果为true，则继续执行循环体，如果为false循环结束</li></ol></li><li><strong>对于do..while循环来说循环体执行次数是：1~n次。</strong></li></ul><h3 id="5-6-break-语句"><a href="#5-6-break-语句" class="headerlink" title="5.6 break;语句"></a>5.6 break;语句</h3><ul><li>break;语句可以用在哪里呢<ol><li>switch 语句当中，用来终止 switch 语句的执行。用在 switch 语句当中，防止 case 穿透现象，用来**==终止 switch==**。</li><li>break;语句用在循环语句当中，**==用来终止离它最近的那个循环语句==**。</li></ol></li><li>一种特殊的语法（不怎么用）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">a:<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">2</span>; k++)&#123; <br>    b:<span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">5</span>)&#123;<br>            <span class="hljs-keyword">break</span> a; <span class="hljs-comment">// 终止指定的循环，即整个大循环。</span><br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;i ===&gt; &quot;</span> + i); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-7-continue-语句"><a href="#5-7-continue-语句" class="headerlink" title="5.7 continue;语句"></a>5.7 continue;语句</h3><ul><li>continue语句的作用是：**==终止当前”本次”循环，直接进入下一次循环继续执行。==**</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4、运算符</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="4-1-算术运算符"><a href="#4-1-算术运算符" class="headerlink" title="4.1 算术运算符"></a>4.1 算术运算符</h3><p><strong>+    求和</strong><br><strong>-     相减</strong><br><strong>*    乘积</strong><br><strong>/     商</strong><br><strong>%   求余数（求模）</strong><br><strong>++  自加1</strong><br><strong>–    自减1</strong></p><h4 id="4-1-1-关于-和-–"><a href="#4-1-1-关于-和-–" class="headerlink" title="4.1.1 关于 ++ 和 –"></a>4.1.1 关于 ++ 和 –</h4><ul><li>写在变量后 —&gt; 先赋值在自增</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<br>b = a++;<br>System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + b);<span class="hljs-comment">// b = 1</span><br>System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<span class="hljs-comment">// a = 2</span><br></code></pre></td></tr></table></figure><ul><li>写在变量前 —&gt; 先自增再赋值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<br>b = ++a;<br>System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + b);<span class="hljs-comment">// b = 2</span><br>System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<span class="hljs-comment">// a = 2</span><br></code></pre></td></tr></table></figure><h3 id="4-2-关系运算符"><a href="#4-2-关系运算符" class="headerlink" title="4.2 关系运算符"></a>4.2 关系运算符</h3><p><strong>&gt;        大于</strong><br><strong>&gt;=     大于等于</strong><br><strong>&lt;        小于</strong><br><strong>&lt;=     小于等于</strong><br><strong>==     关系运算符，判断是否相等</strong><br><strong>!=      关系运算符，判读是否不相等</strong></p><p><strong>所有的关系运算符的运算结果都是布尔类型，不是true就是false，不可能是其他值。</strong></p><h3 id="4-3-逻辑运算符"><a href="#4-3-逻辑运算符" class="headerlink" title="4.3 逻辑运算符"></a>4.3 逻辑运算符</h3><p><strong>&amp;        逻辑与（可以翻译成并且）</strong><br><strong>|         逻辑或（可以翻译成或者）</strong><br><strong>!          逻辑非（取反）</strong><br><strong>&amp;&amp;      短路与</strong><br><strong>||       短路或</strong></p><p><strong>逻辑运算符两边要求都是布尔类型，并且最终的运算结果也是布尔类型。这是逻辑运算符的特点。</strong></p><h4 id="4-3-1-关于短路与-amp-amp-，短路或"><a href="#4-3-1-关于短路与-amp-amp-，短路或" class="headerlink" title="4.3.1 关于短路与 &amp;&amp;，短路或 ||"></a>4.3.1 关于短路与 &amp;&amp;，短路或 ||</h4><ul><li><p>短路与&amp;&amp; 和 逻辑与 &amp;有什么区别：</p><ul><li>首先这两个运算符的运算结果没有任何区别，完全相同。</li><li>只不过“短路与&amp;&amp;”会发生短路现象。</li></ul></li><li><p>什么是短路现象呢？</p><ul><li>右边表达式不执行，这种现象叫做短路现象。</li></ul></li><li><p>什么时候使用&amp;&amp;，什么时候使用&amp; ？</p><ul><li>从效率方面来说，&amp;&amp;比&amp;的效率高一些。因为逻辑与&amp;不管第一个表达式结果是什么，第二个表达式一定会执行。</li><li>以后的开发中，短路与&amp;&amp;和逻辑与还是需要同时并存的。大部分情况下都建议使用短路与&amp;&amp;<br>只有当既需要左边表达式执行，又需要右边表达式执行的时候，才会选择逻辑与&amp;。</li></ul></li><li><p>什么时候发生短路或现象？</p><ul><li>当左边的表达式结果是true的时候，右边的表达式不需要执行，此时会短路。</li></ul></li></ul><h3 id="4-4-赋值运算符"><a href="#4-4-赋值运算符" class="headerlink" title="4.4 赋值运算符"></a>4.4 赋值运算符</h3><p>赋值运算符包括“基本赋值运算符”和“扩展赋值运算符”：基本的、扩展的。</p><p>基本赋值运算符：=</p><p>扩展赋值运算符：</p><p>+=</p><p>*=<br>/=<br>%=</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>a += <span class="hljs-number">10</span>;<br><span class="hljs-comment">// 类似于</span><br>a = a + <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h3 id="4-5-条件运算符：（三目运算符）"><a href="#4-5-条件运算符：（三目运算符）" class="headerlink" title="4.5 条件运算符：（三目运算符）"></a>4.5 条件运算符：（三目运算符）</h3><ul><li>语法格式:<ul><li>布尔表达式 ? 表达式1 : 表达式2</li></ul></li><li>执行原理是什么：<ul><li>布尔表达式的结果为true时，表达式1的执行结果作为整个表达式的结果。</li><li>布尔表达式的结果为false时，表达式2的执行结果作为整个表达式的结果。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">boolean</span> sex = <span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">char</span> x = sex ? <span class="hljs-string">&#x27;男&#x27;</span> : <span class="hljs-string">&#x27;女&#x27;</span>;<br>System.out.println(x);<span class="hljs-comment">// 男</span><br></code></pre></td></tr></table></figure><h3 id="4-6-运算符"><a href="#4-6-运算符" class="headerlink" title="4.6 + 运算符"></a>4.6 + 运算符</h3><ul><li>运算符在java语言中有两个作用:<ol><li>求和</li><li>字符串拼接</li></ol></li><li>什么时候求和？什么时候进行字符串的拼接呢？<ul><li>当 + 运算符<strong>两边都是数字类型</strong>的时候，<strong>求和</strong>。</li><li>当 + 运算符两边的“<strong>任意一边”是字符串类型</strong>，那么这个+会进行字符串<strong>拼接</strong>操作。</li></ul></li><li>字符串拼接完之后的结果还是一个字符串</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><span class="hljs-keyword">int</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">int</span> b = <span class="hljs-number">200</span>;<br><span class="hljs-keyword">int</span> c = a + b;<br>System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<span class="hljs-comment">// 字符串：&quot;a  = 100&quot;</span><br>System.out.println(a + b);<span class="hljs-comment">// 数字：300</span><br>System.out.println(a + b + <span class="hljs-string">&quot;110&quot;</span>); <span class="hljs-comment">// 字符串：&quot;300110&quot;</span><br>System.out.println(a + (b + <span class="hljs-string">&quot;110&quot;</span>));<span class="hljs-comment">// 字符串：&quot;100200110&quot;</span><br>System.out.println(<span class="hljs-string">&quot;100+200=300&quot;</span>);<span class="hljs-comment">// 字符串：&quot;100+200=300&quot;</span><br>System.out.println(a + <span class="hljs-string">&quot;+&quot;</span> + b + <span class="hljs-string">&quot;=&quot;</span> + c);<span class="hljs-comment">// 字符串：&quot;100+200=300&quot;</span><br>System.out.println(a + <span class="hljs-string">&quot;+&quot;</span> + b + <span class="hljs-string">&quot;=&quot;</span> + a + b);<span class="hljs-comment">// 字符串：&quot;100+200=100200&quot;</span><br>System.out.println(a + <span class="hljs-string">&quot;+&quot;</span> + b + <span class="hljs-string">&quot;=&quot;</span> + (a + b));<span class="hljs-comment">// 字符串：&quot;100+200=300&quot;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-7-在java中接收键盘的输入"><a href="#4-7-在java中接收键盘的输入" class="headerlink" title="4.7 在java中接收键盘的输入"></a>4.7 在java中接收键盘的输入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建一个键盘扫描器对象,对象名为 s</span><br>java.util.Scanner s = <span class="hljs-keyword">new</span> java.util.Scanner(System.in);<br><span class="hljs-comment">// 接受一个整数</span><br><span class="hljs-comment">// 代码执行到这里的时候，会暂停下来等待用户的输入，用户可以从键盘上输入一个整数，然后回车，回车之</span><br><span class="hljs-comment">// 后,num就被赋上值了</span><br><span class="hljs-keyword">int</span> num = s.nextInt();<br><span class="hljs-comment">// 接受一个字符串</span><br>String str = s.next();<br></code></pre></td></tr></table></figure><h3 id="4-8-有一个问题要提出"><a href="#4-8-有一个问题要提出" class="headerlink" title="4.8 有一个问题要提出"></a>4.8 有一个问题要提出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;<br>i = i++;<br>System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i);<br></code></pre></td></tr></table></figure><p>以上代码输出结果为：<code>i =  10</code></p><p>原因是：<code>i = i++</code> 对应如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> tmep = k;<br>k++;<br>k = temp;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3、数据类型</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>八个 ==基本数据类型== 及其占用空间大小</p><table><thead><tr><th>类型</th><th>存储空间</th><th>范围</th></tr></thead><tbody><tr><td>byte</td><td>1字节</td><td>-128 ~ 127</td></tr><tr><td>short</td><td>2字节</td><td>-(-2^15^) ~ (2^15^-1)</td></tr><tr><td>int</td><td>4字节</td><td>-(2^31^) ~ (2^31^-1)</td></tr><tr><td>long</td><td>8字节</td><td>-(2^63^) ~ (2^63^-1)</td></tr><tr><td>float</td><td>4字节</td><td></td></tr><tr><td>double</td><td>8字节</td><td></td></tr><tr><td>boolean</td><td>1字节</td><td></td></tr><tr><td>char</td><td>2字节</td><td>0 ~ （2^16^ - 1）</td></tr></tbody></table><h4 id="3-1-整数型字面量四种表现形式："><a href="#3-1-整数型字面量四种表现形式：" class="headerlink" title="3.1 整数型字面量四种表现形式："></a>3.1 整数型字面量四种表现形式：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 十进制</span><br><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>; <br>System.out.println(a); <span class="hljs-comment">// 10</span><br><br><span class="hljs-comment">// 八进制</span><br><span class="hljs-keyword">int</span> b = <span class="hljs-number">010</span>;<br>System.out.println(b); <span class="hljs-comment">// 8</span><br><br><span class="hljs-comment">// 十六进制</span><br><span class="hljs-keyword">int</span> c = <span class="hljs-number">0x10</span>;<br>System.out.println(c); <span class="hljs-comment">// 16</span><br><br><span class="hljs-keyword">int</span> x = <span class="hljs-number">16</span>; <span class="hljs-comment">//十进制方式</span><br>System.out.println(x);<span class="hljs-comment">// 16</span><br><br><span class="hljs-comment">// 二进制（JDK8的新特性，低版本不支持。）</span><br><span class="hljs-keyword">int</span> d = <span class="hljs-number">0b10</span>;<br>System.out.println(d); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h4 id="3-2-数据类型转换："><a href="#3-2-数据类型转换：" class="headerlink" title="3.2 数据类型转换："></a>3.2 数据类型转换：</h4><ul><li><p>在 java 中有一条非常重要的结论，必须记住：==在任何情况下，整数型的“字面量/数据”默认被当做 int 类型处理==。（记住就行）<br>如果希望该“整数型字面量”被当做 long 类型来处理，需要在“字面量”后面添加 L / l 建议使用大写 L，因为小写 l 和 1 傻傻分不清。</p></li><li><p>小容量可以直接赋值给大容量，称为<strong>自动类型转换</strong>。</p></li><li><p>大容量不能直接赋值给小容量，<strong>需要使用强制类型转换符进行强转</strong>。但需要注意的是：加强制类型转换符之后，虽然编译通过了，但是运行的时候可能会损失精度。</p></li><li><p><strong>但是：java 中有一个语法规则：当这个整数型字面量没有超出 byte（或 short）的取值范围，那么这个整数型字面量可以直接赋值给 byte（或 short）类型的变量。</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntTest04</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">// 分析：以下代码编译可以通过吗？</span><br><span class="hljs-comment">// 300 被默认当做int类型</span><br><span class="hljs-comment">// b变量是byte类型</span><br><span class="hljs-comment">// 大容量转换成小容量，要想编译通过，必须使用强制类型转换符</span><br><span class="hljs-comment">// 错误: 不兼容的类型: 从int转换到byte可能会有损失</span><br><span class="hljs-keyword">byte</span> b = <span class="hljs-number">300</span>;<br><br><span class="hljs-comment">// 要想让以上的程序编译通过，必须加强制类型转换符</span><br><span class="hljs-comment">// 虽然编译通过了，但是可能精度损失。</span><br><span class="hljs-comment">// 300这个int类型对应的二进制：00000000 00000000 00000001 00101100</span><br><span class="hljs-comment">// byte占用1个字节，砍掉前3个字节，结果是：00101100 (44)</span><br><span class="hljs-keyword">byte</span> b = (<span class="hljs-keyword">byte</span>)<span class="hljs-number">300</span>;<br>System.out.println(b); <span class="hljs-comment">// 44</span><br>        <br>        <span class="hljs-comment">// 这样是都不会报错的</span><br>        <span class="hljs-keyword">byte</span> x = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">byte</span> y = <span class="hljs-number">127</span>;<br>        <span class="hljs-keyword">short</span> s = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">short</span> s1 = <span class="hljs-number">32767</span>;<br>        <br>        <span class="hljs-comment">// 但这样就会报错了</span><br>        <span class="hljs-keyword">byte</span> x = <span class="hljs-number">128</span>;<br>        <span class="hljs-keyword">short</span> x = <span class="hljs-number">32768</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>byte、char、short 做混合运算的时候，各自先转换成 int 再做运算</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IntTest06</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><br><span class="hljs-keyword">char</span> c1 = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">byte</span> b = <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">// 注意：这里的&quot;+&quot;是负责求和的</span><br>System.out.println(c1 + b); <span class="hljs-comment">// 98</span><br><br><span class="hljs-comment">// 错误: 不兼容的类型: 从int转换到short可能会有损失</span><br><span class="hljs-comment">//short s = c1 + b; // 编译器不知道这个加法最后的结果是多少。只知道是int类型。</span><br><br><span class="hljs-comment">// 这样修改行吗？</span><br><span class="hljs-comment">// 错误: 不兼容的类型: 从int转换到short可能会有损失</span><br><span class="hljs-comment">// short s = (short)c1 + b;</span><br><br><span class="hljs-keyword">short</span> s = (<span class="hljs-keyword">short</span>)(c1 + b);<br><br><span class="hljs-comment">// short k = 98;</span><br><br><span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 错误: 不兼容的类型: 从int转换到short可能会有损失</span><br><span class="hljs-comment">// short x = 1; 可以</span><br><span class="hljs-keyword">short</span> x = a; <span class="hljs-comment">// 不可以，编译器只知道a是int类型，不知道a中存储的是哪个值。</span><br>System.out.println(x);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>多种数据类型做混合运算的时候，最终的结果类型是“最大容量”对应的类型。(char+short+byte 这个除外，原因如上)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">long</span> a = <span class="hljs-number">10L</span>;<br><span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-keyword">short</span> s = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">30</span>;<br><br><span class="hljs-keyword">long</span> sum = a + c + s + i;<br><br><span class="hljs-comment">// 会出现：错误: 不兼容的类型: 从long转换到int可能会有损失</span><br><span class="hljs-comment">// int sum = a + c + s + i;</span><br><br><span class="hljs-comment">// 求和</span><br>System.out.println(sum); <span class="hljs-comment">//237</span><br></code></pre></td></tr></table></figure><ul><li>练习</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TypeTransferTest</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><span class="hljs-comment">// 编译报错，因为1000已经超出范围了。</span><br>        <span class="hljs-comment">// 错误: 不兼容的类型: 从int转换到byte可能会有损失</span><br><span class="hljs-keyword">byte</span> b1 = <span class="hljs-number">1000</span>;<br><span class="hljs-comment">// 可以</span><br><span class="hljs-keyword">byte</span> b2 = <span class="hljs-number">20</span>;<br><span class="hljs-comment">// 可以</span><br><span class="hljs-keyword">short</span> s = <span class="hljs-number">1000</span>;<br><span class="hljs-comment">// 可以</span><br><span class="hljs-keyword">int</span> c = <span class="hljs-number">1000</span>;<br><span class="hljs-comment">// 可以</span><br><span class="hljs-keyword">long</span> d = c;<br><span class="hljs-comment">// 编译报错</span><br>        <span class="hljs-comment">// 错误: 不兼容的类型: 从long转换到int可能会有损失</span><br><span class="hljs-keyword">int</span> e = d;<br><span class="hljs-comment">// 可以</span><br><span class="hljs-keyword">int</span> f = <span class="hljs-number">10</span> / <span class="hljs-number">3</span>;<br><span class="hljs-comment">// 可以</span><br><span class="hljs-keyword">long</span> g = <span class="hljs-number">10</span>;<br><span class="hljs-comment">// 编译报错</span><br>        <span class="hljs-comment">// 错误: 不兼容的类型: 从long转换到int可能会有损失</span><br><span class="hljs-keyword">int</span> h = g / <span class="hljs-number">3</span>;<br><span class="hljs-comment">// 可以</span><br><span class="hljs-keyword">long</span> m = g / <span class="hljs-number">3</span>;<br><span class="hljs-comment">// 编译报错</span><br>        <span class="hljs-comment">// 错误: 不兼容的类型: 从int转换到byte可能会有损失</span><br><span class="hljs-keyword">byte</span> x = (<span class="hljs-keyword">byte</span>)g / <span class="hljs-number">3</span>;<br><span class="hljs-comment">// 可以</span><br><span class="hljs-keyword">short</span> y = (<span class="hljs-keyword">short</span>)(g / <span class="hljs-number">3</span>);<br><span class="hljs-comment">// 可以</span><br><span class="hljs-keyword">short</span> i = <span class="hljs-number">10</span>;<br><span class="hljs-comment">// 可以</span><br><span class="hljs-keyword">byte</span> j = <span class="hljs-number">5</span>;<br><span class="hljs-comment">// 编译报错</span><br>        <span class="hljs-comment">// 错误: 不兼容的类型: 从int转换到short可能会有损失</span><br><span class="hljs-keyword">short</span> k = i + j;<br><span class="hljs-comment">// 可以</span><br><span class="hljs-keyword">int</span> n = i + j;<br><span class="hljs-comment">// 可以</span><br><span class="hljs-keyword">char</span> cc = <span class="hljs-string">&#x27;a&#x27;</span>;<br>System.out.println(cc); <span class="hljs-comment">// a</span><br>System.out.println((<span class="hljs-keyword">byte</span>)cc); <span class="hljs-comment">// 97</span><br><span class="hljs-comment">// cc 会先自动转换成int类型，再做运算</span><br><span class="hljs-keyword">int</span> o = cc + <span class="hljs-number">100</span>;<br>System.out.println(o); <span class="hljs-comment">// 197</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-原码-反码-补码"><a href="#3-3-原码-反码-补码" class="headerlink" title="3.3 原码 反码 补码"></a>3.3 原码 反码 补码</h4><ul><li>计算机在底层存储数据的时候，一律存储的是“==<strong>二进制的补码形式</strong>==”</li><li><strong>对于一个正数来说：二进制原码、反码、补码是同一个，完全相同</strong></li><li>对于一个负数来说：二进制原码、反码、补码是什么关系：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">byte</span> i = -<span class="hljs-number">1</span>;<br><span class="hljs-comment">// 对应的二进制原码：10000001</span><br><span class="hljs-comment">// 对应的二进制反码（符号位不变，其它位取反）：11111110</span><br><span class="hljs-comment">// 对应的二进制补码（反码+1）：11111111</span><br></code></pre></td></tr></table></figure><h4 id="3-4-关于java语言中的浮点型数据"><a href="#3-4-关于java语言中的浮点型数据" class="headerlink" title="3.4 关于java语言中的浮点型数据"></a>3.4 关于java语言中的浮点型数据</h4><p><strong>float是单精度</strong><br><strong>double是双精度</strong></p><ul><li>float 和 double 存储数据的时候都是存储的近似值</li><li>注意：任意一个浮点型都比整数型空间大。float 容量 &gt; long 容量。</li><li><strong>java 中规定，任何一个浮点型数据默认被当做 double 来处理，如果想让这个浮点型字面量被当做 float 类型来处理，那么请在字面量后面添加 F / f 。</strong>    </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 错误</span><br><span class="hljs-keyword">float</span> a = <span class="hljs-number">3.14</span>;<br><span class="hljs-comment">// 正确</span><br><span class="hljs-keyword">float</span> a = <span class="hljs-number">3.14f</span>;<br><span class="hljs-comment">// 正确</span><br><span class="hljs-keyword">double</span> a = <span class="hljs-number">3.14</span>;<br></code></pre></td></tr></table></figure><h4 id="3-5-关于字符型：char"><a href="#3-5-关于字符型：char" class="headerlink" title="3.5 关于字符型：char"></a>3.5 关于字符型：char</h4><ul><li><p>char占用2个字节。</p></li><li><p>char的取值范围：[0-65535]</p></li><li><p>char采用 <strong>unicode</strong> 编码方式。</p></li><li><p>char类型的字面量使用单引号括起来。</p></li><li><p>char可以存储一个汉字。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span> c1 = <span class="hljs-string">&#x27;中&#x27;</span>;<br>System.out.println(c1);<br><br><span class="hljs-keyword">char</span> c2 = <span class="hljs-string">&#x27;a&#x27;</span>;<br>System.out.println(c2);<br><br><span class="hljs-comment">// 0如果加上单引号的话，0就不是数字0了，就是文字0，它是1个字符。</span><br><span class="hljs-keyword">char</span> c3 = <span class="hljs-string">&#x27;0&#x27;</span>;<br>System.out.println(c3);<br><br><span class="hljs-comment">// 以下就会出现错误</span><br><span class="hljs-comment">// 错误: 不兼容的类型: String无法转换为char</span><br><span class="hljs-keyword">char</span> c4 = <span class="hljs-string">&quot;a&quot;</span>;<br><br><span class="hljs-comment">// 错误: 未结束的字符文字</span><br><span class="hljs-keyword">char</span> c5 = <span class="hljs-string">&#x27;ab&#x27;</span>;<br><br><span class="hljs-comment">// 错误: 未结束的字符文字</span><br><span class="hljs-keyword">char</span> c6 = <span class="hljs-string">&#x27;1.08&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li>当一个整数赋值给 char 类型变量的时候，会自动转换成 char 字符型，最终的结果是一个字符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span> a = <span class="hljs-number">97</span>;<br>System.out.println(a); <span class="hljs-comment">// a</span><br></code></pre></td></tr></table></figure><ul><li>当一个整数没有超出 byte  short  char 的取值范围的时候，这个整数可以直接赋值给 byte  short  char类型的变量。</li></ul><h4 id="3-6-关于java中的转义字符"><a href="#3-6-关于java中的转义字符" class="headerlink" title="3.6 关于java中的转义字符"></a>3.6 关于java中的转义字符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// \t : 一个制表位</span><br>System.out.println(<span class="hljs-string">&quot;北京\t天津\t上海&quot;</span>);<br><span class="hljs-comment">// \n : 换行符</span><br>System.out.println(<span class="hljs-string">&quot;jack\nsmith\nmary&quot;</span>);<br><span class="hljs-comment">// \\ : 一个 \</span><br>System.out.println(<span class="hljs-string">&quot;C:\\\\Windows\\\\System32\\\\cmd.exe&quot;</span>);<span class="hljs-comment">// 输出 //</span><br><span class="hljs-comment">// \&quot; : 一个 &quot;</span><br>System.out.println(<span class="hljs-string">&quot;老韩说：\&quot;要好好学习 Java\&quot;&quot;</span>);<br><span class="hljs-comment">// \r : 一个回车</span><br>System.out.println(<span class="hljs-string">&quot;韩顺平教育\r北京&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="3-7-关于-boolean-类型"><a href="#3-7-关于-boolean-类型" class="headerlink" title="3.7 关于 boolean 类型"></a>3.7 关于 boolean 类型</h4><ul><li>在 java 语言中 boolean 类型只有两个值，没有其他值：true 和 false。不像 C 或者 C++，C 语言中 1 和 0 也可以表示布尔类型。</li><li>boolean 类型在实际开发中使用在<strong>逻辑判断当中</strong>，通常放到<strong>条件的位置上</strong>（充当条件）</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2、变量</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E5%8F%98%E9%87%8F/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>软件在处理数据之前需要能够表示数据，在java代码中怎么去表示数据呢？在java中有这样的一个概念：字面量。</p><p>在java语言中“数据”被称为“字面量”。</p><h4 id="2-1-字面量可以分为很多种类："><a href="#2-1-字面量可以分为很多种类：" class="headerlink" title="2.1 字面量可以分为很多种类："></a>2.1 字面量可以分为很多种类：</h4><ul><li>整数型字面量</li><li>浮点型字面量</li><li>布尔型字面量</li><li>字符型字面量</li><li>字符串型字面量</li></ul><h4 id="2-2-什么是变量"><a href="#2-2-什么是变量" class="headerlink" title="2.2 什么是变量:"></a>2.2 什么是变量:</h4><ul><li>变量其实就是内存当中存储数据的最基本的单元</li><li>变量有不同的数据类型，如int，float，double……</li><li>不同的数据类型在内存中分配的空间大小不同</li></ul><ol><li><p>变量来说有三个要素:</p><ol><li>变量的数据类型（类型决定空间的大小）</li><li>变量的名字（起个名字是为了以后方便访问。（以后在程序中访问这个数据是通过名称来访问的。））</li><li>变量中保存的值（就是字面量）</li></ol></li><li><p>在java语言中有一个规定，变量必须先声明，再赋值才能访问。（没有值相当于这个空间没有开辟。）</p></li><li><p><strong>重要的结论：在同一个域当中（这个域怎么理解，后面讲），变量名不能重名，不能重复声明。</strong></p></li><li><p>变量可以重新赋值，但在同一个域当中，不能重复声明。</p></li><li><p>关于变量的一个分类（这个需要“死记硬背”。）：</p><ul><li>变量根据出现的位置进行划分：<ol><li>在<strong>方法体当中声明</strong>的变量：局部变量。</li><li>在<strong>方法体之外</strong>，<strong>类体内声明</strong>的变量：成员变量。</li></ol></li><li>注意：局部变量只在方法体当中有效，方法体执行结束该变量的内存就释放了。</li></ul></li><li><p>变量的作用域：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">变量的作用域？</span><br><span class="hljs-comment">1、什么是作用域？</span><br><span class="hljs-comment">变量的有效范围。</span><br><span class="hljs-comment">2、关于变量的作用域，大家可以记住一句话：</span><br><span class="hljs-comment">出了大括号就不认识了。（死记这句话。）</span><br><span class="hljs-comment">3、java中有一个很重要的原则：</span><br><span class="hljs-comment">就近原则。（不仅java中是这样，其它编程语言都有这个原则。）</span><br><span class="hljs-comment">哪个离我近，就访问哪个。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VarTest08</span></span>&#123;<br><br><span class="hljs-comment">// 成员变量</span><br><span class="hljs-keyword">int</span> i = <span class="hljs-number">10000</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><span class="hljs-comment">// 局部变量</span><br><span class="hljs-keyword">int</span> i = <span class="hljs-number">100</span>; <span class="hljs-comment">// 这个i的有效范围是main方法。</span><br>System.out.println(i); <span class="hljs-comment">// 这个i是多少？</span><br><br><span class="hljs-comment">// 同一个域当中，这是不允许的。</span><br><span class="hljs-comment">// int i = 90;  </span><br><br><span class="hljs-comment">// 考核一下：以下编写for循环你看不懂，没关系，后面会将。</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>; n &lt; <span class="hljs-number">10</span>; n++)&#123; <span class="hljs-comment">// 这里声明的n变量只属于for域。for结束后n释放没了。</span><br><span class="hljs-comment">// 这里没有编写代码。</span><br>&#125;<br><br><span class="hljs-comment">// for循环执行结束之后，在这里访问n变量可以吗？</span><br><span class="hljs-comment">//System.out.println(n);  //错误: 找不到符号</span><br><br><span class="hljs-keyword">int</span> k; <span class="hljs-comment">// 属于main域。</span><br><span class="hljs-keyword">for</span>(k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">10</span>; k++)&#123;<br><br>&#125;<br><span class="hljs-comment">// 能否继续访问k呢？</span><br>System.out.println(k);<br>&#125;<br><br><span class="hljs-comment">// 这个方法怎么定义先不用管，后面会学习。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">x</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">// 在这个位置上能访问i吗？</span><br><span class="hljs-comment">// 错误: 找不到符号</span><br><span class="hljs-comment">// System.out.println(i); // i是无法访问的。</span><br><br><span class="hljs-comment">// 可以定义一个变量起名i吗？</span><br><span class="hljs-comment">// 这个i的有效范围是x方法。</span><br><span class="hljs-comment">// 局部变量</span><br><span class="hljs-keyword">int</span> i = <span class="hljs-number">200</span>; <span class="hljs-comment">// 所以这个i和main方法中的i不在同一个域当中。不冲突。</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1、标识符与关键字</title>
    <link href="/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E6%A0%87%E8%AF%86%E7%AC%A6%E4%B8%8E%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <url>/2021/09/13/Java%E5%9F%BA%E7%A1%80-2021-09-13-%E6%A0%87%E8%AF%86%E7%AC%A6%E4%B8%8E%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1-1-标识符"><a href="#1-1-标识符" class="headerlink" title="1.1  标识符"></a>1.1  标识符</h3><p>==标识符就是程序员自己有权利自己去改的单词（黑色高亮字体）==</p><h4 id="1-1-1-标识符的命名规则（是语法，不遵守会报错，必须遵守）"><a href="#1-1-1-标识符的命名规则（是语法，不遵守会报错，必须遵守）" class="headerlink" title="1.1.1 标识符的命名规则（是语法，不遵守会报错，必须遵守）"></a>1.1.1 标识符的命名规则（是语法，不遵守会报错，必须遵守）</h4><ul><li>标识符只能由数字、字母（包括中文）、下划线、美元符号组成，不能含有其他符号。</li><li>标识符不能以数字开头。</li><li>关键字不能做标识符，如public 、class、static。</li><li>标识符是严格个规定大小写的（但类名最好不同）。</li><li>标识符理论上是没有长度限制的。</li></ul><h4 id="1-1-2-标识符的命名规范（不符合规范也行，代码可读性差）"><a href="#1-1-2-标识符的命名规范（不符合规范也行，代码可读性差）" class="headerlink" title="1.1.2 标识符的命名规范（不符合规范也行，代码可读性差）"></a>1.1.2 标识符的命名规范（不符合规范也行，代码可读性差）</h4><ul><li>见名知意（看到名字就知道啥意思）。</li><li>遵循驼峰命名方式（单词之间很好的进行分隔）。</li><li>类名、接口名首字母大写，后面单词首字母大写。</li><li>变量名、方法名首字母小写，后面单词首字母大写。</li><li>所有常量，全部大写，并且单词和单词之间用下划线衔接。</li></ul><h3 id="1-2-关键字"><a href="#1-2-关键字" class="headerlink" title="1.2 关键字"></a>1.2 关键字</h3><p>==SUN 公司开发 Java 时，提前定义好的特殊含义的单词，全部小写（蓝色高亮字体），关键字不能做标识符==</p>]]></content>
    
    
    <categories>
      
      <category>Java 基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java 基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Servlet 规范</title>
    <link href="/2021/09/13/JavaWeb-2021-09-13-Servlet-%E8%A7%84%E8%8C%83/"/>
    <url>/2021/09/13/JavaWeb-2021-09-13-Servlet-%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一、Servlet-规范介绍："><a href="#一、Servlet-规范介绍：" class="headerlink" title="一、Servlet 规范介绍："></a>一、Servlet 规范介绍：</h3><ol><li>Servlet 规范来自于 JavaEE 规范中的一种。</li><li><strong>作用：</strong><ol><li>在 Servlet 规范中，指定 ==动态资源文件的开发步骤==。</li><li>在 Servlet 规范中，指定 ==Http 服务器调用动态资源文件的规则==。</li><li>在 Servlet 规范中，指定 ==Http 服务器管理动态资源文件实例对象的规则==。</li></ol></li></ol><h3 id="二、Servlet-接口实现类："><a href="#二、Servlet-接口实现类：" class="headerlink" title="二、Servlet 接口实现类："></a>二、Servlet 接口实现类：</h3><ol><li>Servlet 接口是来自于 Servlet 规范下的一个接口，这个接口存在于 Http 服务器提供给的 jar 包内。</li><li>Tomcat 服务器下的 lib 目录下有一个 <code>servlet-api.jar</code> 文件存放 Servlet 接口。（<code>javax.servlet.Servlet</code> 接口）。</li><li>Servlet 规范中，Http 服务器能调用的 【动态资源文件】 必须是一个 Servlet 接口的实现类。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>&#123;<br><span class="hljs-comment">// 没有实现 Servlet 接口</span><br><span class="hljs-comment">// 不是动态资源文件，Tomcat无权调用</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Servlet</span></span>&#123;<br><span class="hljs-comment">//合法动态资源文件，Tomcat有权利调用</span><br><br>Servlet obj = <span class="hljs-keyword">new</span> Teacher();<br>obj.doGet()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、Servlet接口实现类开发步骤："><a href="#三、Servlet接口实现类开发步骤：" class="headerlink" title="三、Servlet接口实现类开发步骤："></a>三、Servlet接口实现类开发步骤：</h3><p>==第一步==：创建一个 java 类继承于 <code>HttpServlet</code> 父类，使之成为一个 Servlet 接口的实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.yechen;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>为什么不直接实现 Servlet 接口呢？ </p></blockquote><p>在 Servlet 接口中，有这样几个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Servlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(ServletConfig var1)</span> <span class="hljs-keyword">throws</span> ServletException</span>;<br><br>    <span class="hljs-function">ServletConfig <span class="hljs-title">getServletConfig</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">service</span><span class="hljs-params">(ServletRequest var1, ServletResponse var2)</span> <span class="hljs-keyword">throws</span> ServletException, IOException</span>;<br><br>    <span class="hljs-function">String <span class="hljs-title">getServletInfo</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>只有 <code>service()</code> 方法对于 Servlet 接口实现类有用，别的没有用，所以通过抽象类 <code>GenericServlet</code> 实现 Servlet 接口，将不使用的方法加以实现，再使用 抽象类<code>HttpServlet</code> 继承于  GenericServlet ,  降低接口实现类对接口实现的难度，将接口中不需要使用的抽象方法交给抽象类进行完成，这样接口实现类只需要对接口需要方法进行重写。</p><p>==第二步==：<strong>重写HttpServlet父类两个方法。doGet 或者 doPost</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.yechen;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;MyServlet 类针对浏览器发送 GET 请求方式处理&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;MyServlet 类针对浏览器发送 POST 请求方式处理&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>==第三步==<strong>：将Servlet接口实现类信息【注册】到Tomcat服务器</strong></p><p>设置 <code>webapp</code> 目录下的 <code>web.xml</code> 文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--将Servlet接口实现类类路径地址交给Tomcat--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--声明一个变量存储servlet接口实现类类路径--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>myServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--声明servlet接口实现类类路径--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>cn.yechen.MyServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--为了降低用户访问Servlet接口实现类难度，需要设置简短请求别名--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>myServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--设置简短请求别名,别名在书写时必须以&quot;/&quot;为开头--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/myServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>验证：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210304204243461.7avajmms9gs0.png" alt="image-20210304204243461"></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210304204257322.1fx98jwh69s0.png" alt="image-20210304204257322"></p><h3 id="四、Servlet-的生命周期"><a href="#四、Servlet-的生命周期" class="headerlink" title="四、Servlet 的生命周期"></a>四、Servlet 的生命周期</h3><ol><li><p> <strong>网站中所有的 Servlet 接口实现类的实例对象，只能由Http服务器负责创建。</strong>开发人员不能手动创建Servlet接口实现类的实例对象。</p></li><li><p>在==默认==的情况下，Http 服务器接收到<strong>对于当前 Servlet 接口实现类第一次请求时自动创建这个Servlet接口实现类的实例对象</strong>。</p></li><li><p>在==手动配置==情况下，可以要求Http服务器在启动时自动创建某个 Servlet 接口实现类的实例对象。</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在 web.xml 文件中设置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--通知Tomcat在启动时负责创建TwoServlet实例对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>在Http服务器运行期间，<strong>一个 Servlet 接口实现类只能被创建出一个实例对象</strong>。</li><li>在Http服务器<strong>关闭时刻</strong>，自动将网站中<strong>所有的 Servlet 对象进行销毁</strong>。</li></ol><p><strong>检验 默认和手动配置 情况下Http服务器对 Servlet 接口实现类对象的创建的时机：</strong></p><blockquote><p>可以使用如下方法快速新建一个 Servlet 接口实现类，并重写 doGet 和 doPost 方法，并在 web.xml 文件中注册。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210304211440309.6y8za393sls0.png" alt="image-20210304211440309"></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210304211553544.5hosp7zu6ds0.png" alt="image-20210304211553544"></p><p><strong>第一步</strong>：在两个 Servlet 接口实现类中写上构造方法，一边我们观察对象创建的时机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyServlet</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;MyServlet对象被创建了。&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;MyServlet 类针对浏览器发送 GET 请求方式处理&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;MyServlet 类针对浏览器发送 POST 请求方式处理&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyServlet02</span> <span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;MyServlet02对象被创建了。&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;MyServlet02 类针对浏览器发送 GET 请求方式处理&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;MyServlet02 类针对浏览器发送 POST 请求方式处理&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二步：将 MyServlet02 类在 web.xml 文件中的注册情况修改为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>MyServlet02<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>cn.yechen.MyServlet02<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--通知Tomcat在启动时负责创建TwoServlet实例对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>MyServlet02<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/myServlet02<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第三步：启动 Tomcat，观察输出</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210304212018094.5geps1oc7ok0.png" alt="image-20210304212018094"></p><p>当向浏览器输入 <code>http://localhost:8080/myWeb/myServlet</code> 时：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210304212302436.5mnb8z0jhag0.png" alt="image-20210304212302436"></p><h3 id="五、HttpServletResponse接口"><a href="#五、HttpServletResponse接口" class="headerlink" title="五、HttpServletResponse接口"></a>五、HttpServletResponse接口</h3><ol><li><p><strong>介绍：</strong></p><ul><li><code>HttpServletResponse</code> 接口来自于 Servlet 规范中，在Tomcat 中存在于 servlet-api.jar。</li><li>HttpServletResponse 接口实现类由 Http 服务器负责提供。</li><li>HttpServletResponse 接口负责将 doGet/doPost 方法执行结果写入到【响应体】交给浏览器。</li><li>开发人员习惯于将 HttpServletResponse 接口修饰的对象称为==响应对象==</li></ul></li><li><p><strong>主要功能:</strong></p></li></ol><blockquote><p>将执行结果以二进制形式写入到【响应体】</p></blockquote><p><strong>使用 IDEA 设置自动更新静态和动态资源到 Tomcat</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210304220015936.5gho4brugzg0.png" alt="image-20210304220015936"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet03</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 执行结果</span><br>        String result = <span class="hljs-string">&quot;Hello World&quot;</span>;<br>        <span class="hljs-comment">// 使用相应对象 response 将结果写入响应体中</span><br>        <span class="hljs-comment">// 通过响应对象，向 Tomcat 索要输出流对象</span><br>        PrintWriter out = response.getWriter();<br>        <span class="hljs-comment">//2.通过输出流，将执行结果以二进制形式写入到响应体</span><br>        out.write(result);<br>    &#125;<br>    <span class="hljs-comment">// doGet 方法执行完毕</span><br>    <span class="hljs-comment">// Tomcat 将响应包推送给浏览器</span><br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210304220725277.61eq0mqjeg00.png" alt="image-20210304220725277"></p><p><strong>但是当需要将一个 int 类型的数据进行输出的时候，会出现问题。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 问题描述： 浏览器接收到数据是2 ，不是50</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 问题原因：out.writer方法可以将【字符】，【字符串】，【ASCII码】写入到响应体，而数据 2 对应的 ASCII码就是 50</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 问题解决方案:  实际开发过程中，都是通过out.print()将真实数据写入到响应体</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet04</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">int</span> result = <span class="hljs-number">50</span>;<br>        <span class="hljs-comment">// 获取输出流</span><br>        PrintWriter out = response.getWriter();<br>        <span class="hljs-comment">// out.write(result);</span><br>        out.print(result);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>解决前</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210304221651642.4qs7g1uwe5q0.png" alt="image-20210304221651642"></p><p>解决后</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210304221559268.4k9nykxakv80.png" alt="image-20210304221559268"></p><blockquote><p>设置响应头中 [content-type] 属性值，从而控制浏览器使用对应编译器将响应体二进制数据编译为【文字，图片，视频，命令】</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 问题描述： Java&lt;br&gt;HTML&lt;br&gt;Mysql&lt;br&gt;</span><br><span class="hljs-comment"> *          浏览器在接收到响应结果时，将&lt;br&gt;作为文字内容在窗口展示出来，没有将&lt;br&gt;当做 HTML 标签命令来执行</span><br><span class="hljs-comment"> *          我&lt;br&gt;是&lt;br&gt;中&lt;br&gt;国&lt;br&gt;人&lt;br&gt;</span><br><span class="hljs-comment"> *          浏览器在接收到响应结果时,有有将中文编译出来，而是问号</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 问题原因：浏览器在接收到响应包之后，根据【响应头中content-type】属性的值，来采用对应【编译器】对【响应体中二进制内容】进行编译处理</span><br><span class="hljs-comment"> *         在默认的情况下，content-type属性的值“text” content-type=&quot;text&quot;，此时浏览器将会采用【文本编译器】对响应体二进制数据进行解析</span><br><span class="hljs-comment"> *         同时使用的编码格式是 charset=ISO-8859-1，不支持中文编码。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 解决方案：一定要在得到输出流之前，通过响应对象对响应头中content-type属性进行一次重新赋值用于指定浏览器采用正确编译器和编码格式（utf-8）。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet05</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 将结果换行输出</span><br>        String result = <span class="hljs-string">&quot;Java&lt;br&gt;HTML&lt;br&gt;Mysql&lt;br&gt;&quot;</span>;<br>        String result2 = <span class="hljs-string">&quot;我&lt;br&gt;是&lt;br&gt;中&lt;br&gt;国&lt;br&gt;人&lt;br&gt;&quot;</span>;<br>        <span class="hljs-comment">//设置响应头content-type</span><br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        <span class="hljs-comment">// 获取输出流</span><br>        PrintWriter out = response.getWriter();<br>        out.print(result);<br>        out.print(result2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>设置 <code>content-type</code> 前</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210304222251609.59vdxp900lo0.png" alt="image-20210304222251609"></p><p>设置 <code>content-type</code> 后</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210304222422535.4fmroqf6mxs0.png" alt="image-20210304222422535"></p><blockquote><p>设置响应头中【location】属性，将一个请求地址赋值给location.从而控制浏览器向指定服务器发送请求</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 浏览器在接收到响应包之后，如果发现响应头中存在location属性,自动通过地址栏向location指定网站发送请求</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * sendRedirect方法远程控制浏览器请求行为【请求地址，请求方式，请求参数】</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet06</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        String url = <span class="hljs-string">&quot;https://www.baidu.com/s?ie=utf-8&amp;word=java&quot;</span>;<br>        <span class="hljs-comment">//通过响应对象，将地址赋值给响应头中location属性</span><br>        response.sendRedirect(url);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>访问指定网页后会自动跳转至 location 属性指定的 url 地址</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210304223802873.7likzg2x12.png" alt="image-20210304223802873"></p><h3 id="六、HttpServletRequest接口"><a href="#六、HttpServletRequest接口" class="headerlink" title="六、HttpServletRequest接口"></a>六、HttpServletRequest接口</h3><ol><li><strong>介绍:</strong><ul><li><code>HttpServletRequest</code> 接口来自于 Servlet 规范中，在 Tomcat 中存在 servlet-api.jar。</li><li>HttpServletRequest 接口实现类由 Http 服务器负责提供。</li><li>HttpServletRequest 接口负责在 doGet/doPost 方法运行时<strong>读取Http请求协议包中信息</strong>。</li><li>开发人员习惯于将HttpServletRequest接口修饰的对象称为==请求对象==</li></ul></li><li><strong>作用:</strong></li></ol><blockquote><p>可以读取Http请求协议包中【请求行】信息</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet07</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 1.通过请求对象，读取【请求行】中【url】信息</span><br>        StringBuffer requestURL = request.getRequestURL();<br>        <span class="hljs-comment">// 2.通过请求对象，读取【请求行】中【method】信息</span><br>        String method = request.getMethod();<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 3.通过请求对象，读取【请求行】中uri信息</span><br><span class="hljs-comment">         *      URI：资源文件精准定位地址，在请求行并没有 URI 这个属性。</span><br><span class="hljs-comment">         *      实际上 URL 中截取一个字符串，这个字符串格式 &quot;/网站名/资源文件名&quot;</span><br><span class="hljs-comment">         *      URI 用于让 Http 服务器对被访问的资源文件进行定位</span><br><span class="hljs-comment">         */</span><br>        String requestURI = request.getRequestURI();<br><br>        <span class="hljs-comment">// 在控制台中输出请求包中的数据</span><br>        System.out.println(<span class="hljs-string">&quot;URL = &quot;</span> + requestURL);<br>        System.out.println(<span class="hljs-string">&quot;Method = &quot;</span> + method);<br>        System.out.println(<span class="hljs-string">&quot;URI = &quot;</span> + requestURI);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210305203505138.36i7m2se83y0.png" alt="image-20210305203505138"></p><blockquote><p>可以读取保存在Http请求协议包中【请求头】中请求参数信息</p></blockquote><p>通过 myServlet08.html 文件中的超链接访问 myServlet08 并携带参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/myWeb/myServlet08?username=zhangsan&amp;password=123456&quot;</span>&gt;</span>通过超链接访问 MyServlet08 并携带请求参数<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet08</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 1.通过请求对象获得【请求头】中【所有请求参数名】</span><br>        <span class="hljs-comment">// 将所有请求参数名称保存到一个枚举对象进行返回</span><br>        Enumeration&lt;String&gt; parameterNames = request.getParameterNames();<br>        <span class="hljs-comment">// 编历所有参数</span><br>        <span class="hljs-keyword">while</span> (parameterNames.hasMoreElements()) &#123;<br>            <span class="hljs-comment">// 获取参数名</span><br>            String s = parameterNames.nextElement();<br>            <span class="hljs-comment">// 根据参数名，通过 request 对象获取参数值</span><br>            String parameter = request.getParameter(s);<br>            <span class="hljs-comment">// 将参数信息打印到控制台</span><br>            System.out.println(<span class="hljs-string">&quot;参数名称：&quot;</span> + s + <span class="hljs-string">&quot; 参数值：&quot;</span> + parameter);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210305205204283.776gqm6py8k0.png" alt="image-20210305205204283"></p><blockquote><p>可以读取保存在Http请求协议包中【请求头】或者【请求体】中请求参数信息</p></blockquote><p>通过 myServlet09.html 文件中的表单以 GET 或 POST 方法访问 myServlet09 并携带参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/myWeb/myServlet09&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>            username：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            password：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;以 GET 方式访问 myServlet09&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/myWeb/myServlet09&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>            username：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            password：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;以 POST 方式访问 myServlet09&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *  问题：</span><br><span class="hljs-comment"> *      以 GET 方式发送中文参数时，得到正常结果</span><br><span class="hljs-comment"> *      以 POST 方式发送中文参数时，得到【乱码】“è?????????????·???”</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  原因:</span><br><span class="hljs-comment"> *      浏览器以 GET 方式发送请求,请求参数保存在【请求头】,在 Http 请求协议包到达 Http 服务器之后，第一件事就是进行解码</span><br><span class="hljs-comment"> *      请求头二进制内容由 Tomcat 负责解码，Tomcat9.0 默认使用 【utf-8】 字符集，可以解释一切国家文字</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      浏览器以 POST 方式发送请求，请求参数保存在【请求体】,在 Http 请求协议包到达 Http 服务器之后，第一件事就是进行解码</span><br><span class="hljs-comment"> *      请求体二进制内容由当前请求对象（request）负责解码。request默认使用 【ISO-8859-1】字符集，一个东欧语系字符集</span><br><span class="hljs-comment"> *      此时如果请求体参数内容是中文，将无法解码只能得到乱码</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  解决方案:</span><br><span class="hljs-comment"> *      在Post请求方式下，在读取请求体内容之前，应该通知请求对象使用 【utf-8】 字符集对请求体内容进行一次重新解码</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet09</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 通知请求对象使用 【utf-8】 字符集对请求体内容进行一次重新解码</span><br>        request.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-comment">// 1.通过请求对象获得【请求头】中【所有请求参数名】</span><br>        <span class="hljs-comment">// 将所有请求参数名称保存到一个枚举对象进行返回</span><br>        Enumeration&lt;String&gt; parameterNames = request.getParameterNames();<br>        <span class="hljs-keyword">while</span> (parameterNames.hasMoreElements()) &#123;<br>            String s = parameterNames.nextElement();<br>            String parameter = request.getParameter(s);<br>            System.out.println(<span class="hljs-string">&quot;参数名称：&quot;</span> + s + <span class="hljs-string">&quot; 参数值：&quot;</span> + parameter);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 1.通过请求对象获得【请求头】中【所有请求参数名】</span><br>        <span class="hljs-comment">// 将所有请求参数名称保存到一个枚举对象进行返回</span><br>        Enumeration&lt;String&gt; parameterNames = request.getParameterNames();<br>        <span class="hljs-keyword">while</span> (parameterNames.hasMoreElements()) &#123;<br>            String s = parameterNames.nextElement();<br>            String parameter = request.getParameter(s);<br>            System.out.println(<span class="hljs-string">&quot;参数名称：&quot;</span> + s + <span class="hljs-string">&quot; 参数值：&quot;</span> + parameter);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改前：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210305210601569.6pxwu1mbvmw.png" alt="image-20210305210601569"></p><p>修改后：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210305211014593.219v74ufx1ls.png" alt="image-20210305211014593"></p><blockquote><p>可以代替浏览器向Http服务器申请资源文件调用</p></blockquote><h3 id="七、欢迎资源文件"><a href="#七、欢迎资源文件" class="headerlink" title="七、欢迎资源文件"></a>七、欢迎资源文件</h3><ol><li><strong>存在原因：</strong>用户可以记住网站名，但是不会记住网站资源文件名。</li><li><strong>默认欢迎资源文件：</strong>用户发送了一个针对某个网站的【默认请求】<code>http://localhost:8080/myWeb</code>时，此时由 Http 服务器会自动从当前网站返回的资源文件 <code>index.html</code> ，相当于请求 <code>http://localhost:8080/myWeb/index.html</code></li><li><strong>Tomcat对于默认欢迎资源文件定位规则：</strong><code>D:\Environmental\Tomcat\apache-tomcat-9.0.41\conf\web.xml</code></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- ==================== Default Welcome File List ===================== --&gt;</span><br>  <span class="hljs-comment">&lt;!-- When a request URI refers to a directory, the default servlet looks  --&gt;</span><br>  <span class="hljs-comment">&lt;!-- for a &quot;welcome file&quot; within that directory and, if present, to the   --&gt;</span><br>  <span class="hljs-comment">&lt;!-- corresponding resource URI for display.                              --&gt;</span><br>  <span class="hljs-comment">&lt;!-- If no welcome files are present, the default servlet either serves a --&gt;</span><br>  <span class="hljs-comment">&lt;!-- directory listing (see default servlet configuration on how to       --&gt;</span><br>  <span class="hljs-comment">&lt;!-- customize) or returns a 404 status, depending on the value of the    --&gt;</span><br>  <span class="hljs-comment">&lt;!-- listings setting.                                                    --&gt;</span><br>  <span class="hljs-comment">&lt;!--                                                                      --&gt;</span><br>  <span class="hljs-comment">&lt;!-- If you define welcome files in your own application&#x27;s web.xml        --&gt;</span><br>  <span class="hljs-comment">&lt;!-- deployment descriptor, that list *replaces* the list configured      --&gt;</span><br>  <span class="hljs-comment">&lt;!-- here, so be sure to include any of the default values that you wish  --&gt;</span><br>  <span class="hljs-comment">&lt;!-- to use within your application.                                       --&gt;</span><br><br><span class="hljs-comment">&lt;!--这是Tomcat默认的会寻找的三个欢迎资源文件--&gt;</span><br><span class="hljs-comment">&lt;!--如果这三个资源不存在，同时在当前项目中没有自己设置欢迎资源文件，就会返回状态码 404（资源未找到）--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.html<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.htm<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>index.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li><strong>网站设置自定义默认文件定位规则，此时Tomcat自带定位规则将失效</strong></li></ol><p>在当前项目的  <code>webapp/WEB_INF/web.xml</code> 文件中设置自定义默认欢迎资源文件。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>user_login.html<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="八、HTTP-状态码"><a href="#八、HTTP-状态码" class="headerlink" title="八、HTTP 状态码"></a>八、HTTP 状态码</h3><ol><li><p><strong>介绍:</strong></p><ul><li>由<strong>三位数字组成</strong>的一个符号。</li><li>Http 服务器在推送响应包之前，根据本次请求处理情况将 Http ==状态码写入到响应包中状态行上==。</li><li>通过返回的状态码，浏览器可以可以输出不同结果：<ul><li>如果 Http 服务器针对本次请求，<strong>返回了</strong>对应的资源文件，<strong>就通过 Http 状态码通知浏览器应该如何处理这个结果。</strong></li><li>如果 Http 服务器针对本次请求，<strong>无法返回</strong>对应的资源文件，<strong>就通过 Http 状态码向浏览器解释不能提供服务的原因。</strong></li></ul></li></ul></li><li><p><strong>组成：100—599；分为5个大类</strong></p></li><li><p><strong>1XX：</strong>最有特征是是 <code>100</code> ，==通知浏览器本次返回的资源文件并不是一个独立的资源文件==，需要浏览器在接收响应包之后，继续向 Http 服务器索要依赖的其他资源文件</p></li><li><p><strong>2XX：</strong>最有特征 <code>200</code> ， ==通知浏览器本次返回的资源文件是一个完整独立资源文件==，浏览器在接收到之后不需要所要其他关联文件。</p></li><li><p><strong>3XX：</strong> 最有特征 <code>302</code> ，==通知浏览器本次返回的不是一个资源文件内容而是一个资源文件地址==，需要浏览器根据这个地址自动发起请求来索要这个资源文件。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 如：</span><br>response.sendRedirect(<span class="hljs-string">&quot;资源文件地址&quot;</span>);<br><span class="hljs-comment">// 写入到响应头中 location</span><br><span class="hljs-comment">// 而这个行为导致Tomcat将302状态码写入到状态行</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Servlet_302</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        response.sendRedirect(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// Tomcat在推送响应包之前，看到响应体是空，但是响应头location却存放了一个地址。</span><br><span class="hljs-comment">// 此时Tomcat将302状态码写入到状态行。</span><br><span class="hljs-comment">// 在浏览器接收到响应包之后，因为302状态码，浏览器不会读取响应体内容，自动根据响应头中location的地址发起第二次请求</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210306214424273.4j0ynxpu0a20.png" alt="image-20210306214424273"></p><ol start="6"><li><p><strong>4XX：</strong> <code>404</code> ，==通知浏览器，由于在服务端没有定位到被访问的资源文件因此无法提供帮助==</p><pre><code>          `405` ， 通知浏览器，在服务端已经定位到被访问的资源文件（Servlet）==但是这个Servlet对于浏览器采用的请求方式不能处理==</code></pre></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 只能针对浏览器发送POST请求方式进行处理，无法对GET方式进行处理</span><br><span class="hljs-comment">// 但是浏览器通过地址栏发送的请求一定是 GET，由于该 Servlet 中没有 GET 方法</span><br><span class="hljs-comment">// 因此这个 Servlet 对于浏览器采用的请求方式不能处理</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Servlet_405</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210306215246663.6cbar3vqnjk0.png" alt="image-20210306215246663"></p><ol start="7"><li><strong>5XX：</strong> <code>500</code> ，通知浏览器，在服务端已经定位到被访问的资源文件（Servlet），这个Servlet可以接收浏览器采用请求方式，==但是Servlet在处理请求期间，由于<strong>Java异常导致</strong>处理失败==</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Servlet_500</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 模拟一个空指针异常</span><br>        Map map = <span class="hljs-keyword">new</span> HashMap();<br>        <span class="hljs-keyword">int</span> i = (<span class="hljs-keyword">int</span>) map.get(<span class="hljs-string">&quot;key&quot;</span>);<br>        System.out.println(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210306215759387.49v7g8407os0.png" alt="image-20210306215759387"></p><h3 id="九、多个Servlet之间调用规则"><a href="#九、多个Servlet之间调用规则" class="headerlink" title="九、多个Servlet之间调用规则"></a>九、多个Servlet之间调用规则</h3><ol><li><strong>前提条件：</strong> 某些来自于浏览器发送请求，往往需要<strong>服务端中多个 Servlet 协同处理</strong>。但是浏览器一次只能访问一个 Servlet，<strong>导致用户需要手动通过浏览器发起多次请求才能得到服务</strong>。这样增加用户获得服务难度，导致用户放弃访问当前网站</li><li><strong>提高用户使用感受规则：</strong>  无论本次请求涉及到多少个Servlet,用户<strong>只需要手动通知浏览器发起 一次请求即可</strong></li><li><strong>多个Servlet之间调用规则：</strong><ol><li>==重定向解决方案==</li><li>==请求转发解决方案==</li></ol></li></ol><h3 id="十、重定向解决方案"><a href="#十、重定向解决方案" class="headerlink" title="十、重定向解决方案"></a>十、重定向解决方案</h3><ol><li><p><strong>工作原理：</strong>  用户第一次<strong>通过手动方式通知浏览器访问 OneServlet</strong>。 OneServlet 工作完毕后，将 TwoServlet地址写入到响应头<code> locatio</code> 属性中，导致Tomcat将302状态码写入到状态行。</p><p>在浏览器接收到响应包之后，会读取到 302 状态。此时浏览器自动根据响应头中 location 属性地址发起第二次请求，访问 TwoServlet 去完成请求中剩余任务</p></li><li><p><strong>实现命令：</strong></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 将地址写入到响应包中响应头中location属性</span><br>response.sendRedirect(<span class="hljs-string">&quot;请求地址&quot;</span>);<br></code></pre></td></tr></table></figure><ol start="3"><li><p><strong>特征：</strong>  </p><blockquote><p>（1）请求地址：</p><pre><code>        既可以把当前网站内部的资源文件地址发送给浏览器 （/网站名/资源文件名）        也可以把其他网站资源文件地址发送给浏览器(http://ip地址:端口号/网站名/资源文件名)         </code></pre></blockquote><blockquote><p>（2）请求次数：</p><pre><code>        浏览器至少发送两次请求，但是只有第一次请求是用户手动发送。后续请求都是浏览器自动发送的。</code></pre></blockquote><blockquote><p>（3）请求方式：</p><pre><code>        重定向解决方案中，**通过地址栏通知浏览器发起下一次请求**，因此通过重定向解决方案调用的资源文件接收的请求方式一定是 `GET`</code></pre></blockquote><blockquote><p>（4）缺点:</p><pre><code>        重定向解决方案需要在浏览器与服务器之间进行多次往返，**大量时间消耗在往返次数上，增加用户等待服务时间**</code></pre></blockquote></li></ol><h3 id="十一、请求转发解决方案"><a href="#十一、请求转发解决方案" class="headerlink" title="十一、请求转发解决方案"></a>十一、请求转发解决方案</h3><ol><li><p><strong>原理：</strong>  用户第一次通过手动方式要求浏览器访问 OneServlet。OneServlet 工作完毕后，==通过当前的请求对象（request）代替浏览器向 Tomcat 发送请求，申请调用 TwoServlet。==Tomcat 在接收到这个请求之后，自动调用 TwoServlet 来完成剩余任务</p></li><li><p><strong>实现命令：</strong>  </p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 1.通过当前请求对象生成资源文件申请报告对象</span><br>RequestDispatcher  report = request.getRequestDispatcher(<span class="hljs-string">&quot;/资源文件名&quot;</span>);<span class="hljs-comment">// 一定要以&quot;/&quot;为开头</span><br><span class="hljs-comment">// 2.将报告对象发送给Tomcat</span><br>report.forward(当前请求对象，当前响应对象);<br></code></pre></td></tr></table></figure><ol start="3"><li><p><strong>特征：</strong>  </p><blockquote><p>（1）请求次数：</p><pre><code>        在请求转发过程中，浏览器**只发送一次请求**</code></pre></blockquote><blockquote><p>（2）请求地址：</p><pre><code>        只能向 Tomcat 服务器申请调用**当前网站下资源文件地址**       `request.getRequestDispathcer(&quot;/资源文件名&quot;)`         ==不要写网站名==</code></pre></blockquote><blockquote><p>（3）请求方式：</p><pre><code>        在请求转发过程中，浏览器只发送一个了个 Http 请求协议包。**参与本次请求的所有Servlet共享同一个请求协议包**，因此这些Servlet接收的请求方式与浏览器发送的请求方式保持一致。</code></pre></blockquote><blockquote><p>（4）优点：</p><pre><code>        无论本次请求涉及到多少个Servlet,用户只需要手动通过浏览器发送一次请求。        Servlet 之间调用发生在服务端计算机上，**节省服务端与浏览器之间往返次数增加处理服务速度**</code></pre></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Servlet05</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;通过转发解决方案调用 servlet06&quot;</span>);<br>        <span class="hljs-comment">// 1.通过当前请求对象生成资源文件申请报告对象</span><br>        RequestDispatcher requestDispatcher = request.getRequestDispatcher(<span class="hljs-string">&quot;/servlet06&quot;</span>);<br>        <span class="hljs-comment">// 2.将报告对象发送给Tomcat</span><br>        requestDispatcher.forward(request, response);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Servlet06</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;servlet06 被调用了！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210306222328340.6z4s7wrnx540.png" alt="image-20210306222328340"></p><h3 id="十二、多个Servlet之间数据共享实现方案"><a href="#十二、多个Servlet之间数据共享实现方案" class="headerlink" title="十二、多个Servlet之间数据共享实现方案"></a>十二、多个Servlet之间数据共享实现方案</h3><ol><li><strong>数据共享：</strong>OneServlet 工作完毕后，将产生数据交给 TwoServlet 来使用，两个 Servlet 之间共享数据。</li><li><strong>共享方案：</strong><ul><li><code>ServletContext</code> 接口</li><li><code>Cookie</code> 类</li><li><code>HttpSession</code> 接口</li><li><code>HttpServletRequest</code> 接口</li></ul></li></ol><h3 id="十三、ServletContext-接口"><a href="#十三、ServletContext-接口" class="headerlink" title="十三、ServletContext 接口"></a>十三、ServletContext 接口</h3><ol><li><strong>介绍：</strong></li></ol><blockquote><p>（1）来自于 Servlet 规范中一个接口。在 Tomcat 中存在于 servlet-api.jar，在 Tomcat 中负责提供这个接口实现类。</p><p>（2）如果<strong>两个 Servlet 来自于同一个网站</strong>，彼此之间通过网站的 ServletContext 实例对象实现数据共享。</p><p>（3）开发人员习惯于将 ServletContext 对象称为【<strong>全局作用域对象</strong>】</p></blockquote><ol start="2"><li><strong>工作原理：</strong>   <strong>每一个网站都存在一个（也只有一个）全局作用域对象</strong>。这个全局作用域对象相当于一个Map。在这个网站中 OneServlet 可以将一个数据存入到全局作用域对象，当前网站中其他 Servlet 此时都可以从全局作用域对象得到这个数据进行使用。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210307105906290.6ymnzsfrbtc0.png" alt="image-20210307105906290"></p><ol start="3"><li><strong>全局作用域对象生命周期：</strong>  <ul><li>在 Http 服务器启动过程中，自动为当前网站在内存中创建一个全局作用域对象。</li><li>在 Http 服务器运行期间，一个网站只有一个全局作用域对象。</li><li>在 Http 服务器运行期间，全局作用域对象一直处于存活状态。</li><li>在 Http 服务器准备关闭的时候，Http 服务器负责将当前网站中的全局作用域对象进行销毁处理。</li></ul></li></ol><blockquote><p><strong>全局作用域对象的生命周期贯穿于网站的整个运行期间。</strong></p></blockquote><ol start="4"><li><strong>实现命令：</strong>  ==前提是两个 Servlet 存在于一个网站中==</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 添加数据</span><br>OneServlet &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;<br>        <span class="hljs-comment">// 通过 请求对象（request）向 Tomcat 索要当前网站中的 全局作用域对象</span><br>        ServletContext application = request.getServletContext();<br>        <span class="hljs-comment">// 以（“key”，“value”）的形式将数据添加到全局作用域对象中，作为共享数据</span><br>        application.setAttribute(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;values1&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 获取数据</span><br>TwoServlet &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;<br>        <span class="hljs-comment">// 通过 请求对象（request）向 Tomcat 索要当前网站中的 全局作用域对象</span><br>        ServletContext application = request.getServletContext();<br>        <span class="hljs-comment">// 通过 key 获取全局作用域对象中的对应的 value</span><br>        Object value = applicaton.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li><strong>实际使用：</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InputServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 通过 请求对象（request）向 Tomcat 索要当前网站中的 全局作用域对象</span><br>        ServletContext application = request.getServletContext();<br>        <span class="hljs-comment">// 以（“key”，“value”）的形式将数据添加到全局作用域对象中，作为共享数据</span><br>        application.setAttribute(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;我是从 InputServlet 中传递过去的数据！&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 通过 请求对象（request）向 Tomcat 索要当前网站中的 全局作用域对象</span><br>        ServletContext application = request.getServletContext();<br>        <span class="hljs-comment">// 通过 key 获取对应 value</span><br>        Object value = application.getAttribute(<span class="hljs-string">&quot;key1&quot;</span>);<br>        System.out.println(value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先访问 InputServlet 在访问 OutputServlet，输出：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210307112013198.17l8iv55ki74.png" alt="image-20210307112013198"></p><h3 id="十四、Cookie"><a href="#十四、Cookie" class="headerlink" title="十四、Cookie"></a>十四、Cookie</h3><ol><li><strong>介绍：</strong>  </li></ol><blockquote><p>（1）Cookie 是来自于 Servlet 规范中的一个工具类，存在于 Tomcat 提供的 servlet-api.jar 中。</p><p>（2）如果两个 Servlet 来自于同一个网站，并且为同一个浏览器（用户）提供服务，此时借助 Cookie 对象进行数据共享。</p><p>（3）<strong>Cookie 存放当前用户的私人数据</strong>，在共享数据过程中提高服务质量。</p><p>（4）在现实生活场景中， Cookie 相当于用户在服务端得到【会员卡】</p></blockquote><ol start="2"><li><strong>原理：</strong>  用户通过浏览器第一次向 【MyWeb】 网站发送请求申请 OneServlet。==OneServlet在运行期间创建一个Cookie存储与当前用户相关数据==。OneServlet工作完毕后，==将Cookie写入到响应头交还给当前浏览器。浏览器收到响应响应包之后，将cookie存储在浏览器的缓存==。一段时间之后，用户通过【同一个浏览器】再次向【myWeb网站】发送请求申请 TwoServlet 时。==浏览器需要无条件的将myWeb网站之前推送过来的Cookie，写入到请求头发送过去==，此时 TwoServlet 在运行时，就可以通过读取请求头中 cookie 中信息，得到OneServlet提供的共享数据。</li><li><strong>实现命令：</strong>   同一个网站 OneServlet 与  TwoServlet 借助于 Cookie 实现数据共享</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">OneServlet &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;<br>        <span class="hljs-comment">// 创建一个 cookie 对象，保存当前用户的共享数据</span><br>        Cookie cookie1 = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;abc&quot;</span>);<br>        Cookie cookie2 = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;def&quot;</span>);<br>        <span class="hljs-comment">// cookie 相当于一个 map，只能存放键值对，并且键值对的类型只能是 String,键值对中的 key 不能是中文</span><br>        <span class="hljs-comment">// 将 cookie 写入到响应头中，传给浏览器</span><br>        response.addCookie(cookie1);<br>        response.addCookie(cookie2);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// OneServlet 执行结束后，将 cookie 信息存储在浏览器的缓存中，当浏览器请求访问 TwoServlet 是，浏览器将缓存中的 cookie 信息取出放入请求包中</span><br><br>TwoServlet &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;<br>        <span class="hljs-comment">// 调用请求对象从请求头中得到的浏览器返回的 cookie 对象</span><br>        Cookie[] cookieArray = request.getCookies();<br>        <span class="hljs-comment">// 循环编历数据得到每一个 cookie 的 key 和 value</span><br>        <span class="hljs-keyword">for</span> (Cookie cookie : cookieArray) &#123;<br>            <span class="hljs-comment">// 读取 key</span><br>            String key = cookie.getName();<br>            <span class="hljs-comment">// 读取 value</span><br>            String value = cookie.getValue();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li><strong>Cookie销毁时机：</strong>  <ul><li>在默认情况下，Cookie 对象存放在浏览器的缓存中。因此只要浏览器关闭，Cookie 对象就被销毁掉。</li><li><strong>在手动设置情况下，可以要求浏览器将接收的 Cookie 存放在客户端计算机上硬盘上，同时需要指定Cookie 在硬盘上存活时间</strong>。在存活时间范围内，关闭浏览器，关闭客户端计算机，关闭服务器，都不会导致 Cookie 被销毁。在存活时间到达时，Cookie自动从硬盘上被删除。</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">cookie.setMaxAge(<span class="hljs-number">60</span>); <span class="hljs-comment">//cookie在硬盘上存活1分钟</span><br></code></pre></td></tr></table></figure><ol start="5"><li><strong>实际使用：</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OutputCookieServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 创建一个 cookie 对象，保存当前用户的共享数据</span><br>        Cookie cookie1 = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;abc&quot;</span>);<br>        Cookie cookie2 = <span class="hljs-keyword">new</span> Cookie(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;def&quot;</span>);<br>        <span class="hljs-comment">// cookie 相当于一个 map，只能存放键值对，并且键值对的类型只能是 String,键值对中的 key 不能是中文</span><br>        <span class="hljs-comment">// 将 cookie 写入到响应头中，传给浏览器</span><br>        response.addCookie(cookie1);<br>        response.addCookie(cookie2);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210309200412332.6jthf5uuxgg0.png" alt="image-20210309200412332"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InputCookieServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 调用请求对象从请求头中得到的浏览器返回的 cookie 对象</span><br>        Cookie[] cookieArray = request.getCookies();<br>        <span class="hljs-comment">// 循环编历数据得到每一个 cookie 的 key 和 value</span><br>        <span class="hljs-keyword">for</span> (Cookie cookie : cookieArray) &#123;<br>            <span class="hljs-comment">// 读取 key</span><br>            String key = cookie.getName();<br>            <span class="hljs-comment">// 读取 value</span><br>            String value = cookie.getValue();<br>            System.out.println(<span class="hljs-string">&quot;key = &quot;</span> + key + <span class="hljs-string">&quot; value = &quot;</span> + value);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210309200545967.4ztj5cbh3540.png" alt="image-20210309200545967"></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210309200708748.9fm9b4rnr0w.png" alt="image-20210309200708748"></p><h3 id="十五、HttpSession-接口"><a href="#十五、HttpSession-接口" class="headerlink" title="十五、HttpSession 接口"></a>十五、HttpSession 接口</h3><ol><li><strong>介绍：</strong>  </li></ol><blockquote><p>（1）HttpSession 接口来自于 Serlvet 规范下的一个接口。存在于 Tomcat 中 servlet-api.jar 中。</p><p>（2）如果两个 Servlet 来自于同一个网站，并且为同一个浏览器对象（用户）提供服务，此时借助 HttpSession对象进行数据共享。</p><p>（3）开发人员习惯将 HttpSession 接口修饰的对象称为 ==会话作用域对象==</p></blockquote><ol start="2"><li><strong>==面试题== HttpSession 和 Cookie 区别：</strong></li></ol><ul><li>存储位置：一个在天上，一个在地上<ul><li>Cookie：存放在客户端计算机（浏览器的内存或者硬盘）中。</li><li>HttpSession：存放再服务端计算机的内存中。</li><li>数据类型：<ul><li>Cookie：存储的共享数据类型只能是 String。</li><li>HttpSession：存储的共享数据可以是任意类型的数据（Object）。</li></ul></li></ul></li><li>数据数量：<ul><li>Cookie：一个 Cookie 对象只能存储一个共享数据。</li><li>HttpSession：使用 Map 集合存储共享数据，所以可以存储任意数量的共享数据。</li><li>参照物：<ul><li>Cookie：相当于客户在客户端的 ==会员卡==</li><li>HttpSession：相当于客户在服务端的 ==私人保险柜==</li></ul></li></ul></li></ul><ol start="3"><li><strong>实现命令：</strong>  同一个网站下 OneServlet 将数据传递给 TwoServlet</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">OneServlet &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletReqiest request, HttpServletResponse response)</span> </span>&#123;<br>        <span class="hljs-comment">// 调用请求对象向 Tomcat 索要当前用户在服务端的私人储物柜</span><br>        HttpSession session = request.getSession();<br>        <span class="hljs-comment">// 将数据添加到用户的私人存储柜</span><br>        session.setAttibute(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;abc&quot;</span>);<br>    &#125;<br>&#125;<br><br>TwoServlet &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletReqiest request, HttpServletResponse response)</span> </span>&#123;<br>        <span class="hljs-comment">// 调用请求对象向 Tomcat 索要当前用户在服务端的私人储物柜</span><br>        HttpSession session = request.getSession();<br>        <span class="hljs-comment">// 将数据添加到用户的私人存储柜</span><br>        Object value = session.getAttribute(<span class="hljs-string">&quot;key&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li><p><strong>Http 服务器如何将用户与 HttpSession 关联起来：</strong>  ==使用 Cookie==</p><p>Tomcat 在创建一个 HttpSession 对象的时候，自动为这个 HttpSession 对象生成一个<strong>唯一的编号</strong>， Tomcat 将编号存储为 Cookie 对象，<strong>key 为 JSESSIONID，value 为 唯一编号</strong>，推送到浏览器缓存，当用户第二次来访问的时候，Tomcat 根据请求头中的 JSESSIONID 确认用户是否有 HttpSession，以及哪一个 HttpSession 是当前用户。</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210310204203874.7ejbzrl4p5g0.png" alt="image-20210310204203874"></p></li><li><p><code>getSession()</code>  与  <code>getSession(false)</code> 的区别</p><ul><li><p>getSession()：</p><p>如果当前用户在服务端中<strong>已经存在了 HttpSession 对象（私人储物柜）</strong>，要求 Tomcat 将这个私人储物柜进行<strong>返回</strong>。</p><p>如果当前用户在服务端中<strong>尚未有 HttpSession 对象（私人储物柜）</strong>，要求 Tomcat 为当前用户==创建一个全新的 HttpSession 对象并返回==。</p></li><li><p>getSession(false)：</p><p>如果当前用户在服务端中<strong>已经存在了 HttpSession 对象（私人储物柜）</strong>，要求 Tomcat 将这个私人储物柜进行<strong>返回</strong>。</p><p>如果当前用户在服务端中<strong>尚未有 HttpSession 对象（私人储物柜）</strong>，==此时该方法返回 null，不会创建新的 HttpSession 对象返回==。</p></li></ul></li><li><p><strong>HttpSession销毁时机：</strong>  </p><ul><li><p>用户与 HttpSession 关联时使用的 Cookie 只能存放在浏览器的缓存中，在浏览器关闭的时候，缓存删除，Cookie 对象被销毁，用户和 HttpSession 对象之间的联系被切断，由于 Tomcat 无法检测浏览器何时关闭，因此浏览器关闭时 Tomcat 并不会将浏览器关联的 HttpSession 对象销毁。</p></li><li><p>Tomcat 为每一个 HttpSession 对象设置 ==空闲时间==，默认为 <strong>30分钟</strong>，当当前的 HttpSession 对象空闲时间到达 30 分钟，Tomcat 就会销毁这个对象。</p><ul><li><p><strong>可以自己手动设置 HttpSession 空闲时间：</strong>  </p><p>在当前网站 / webapps / WEB_INFO / web.xml 文件中添加</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--设置当前网站中每一个 HttpSession 对象的空闲时间为 5分钟--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>5<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>实际操作：</strong></p><p><code>index.html</code>：商品展示页面（网站首页）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;2&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>商品名称<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>商品单价<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>供货商<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>加入购物车<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>华为笔记本pro13<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>7000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>华为<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/myWeb/one?goodsName=华为笔记本pro13&quot;</span>&gt;</span>加入购物车<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>小米手机11<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>5000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>小米<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/myWeb/one?goodsName=小米手机11&quot;</span>&gt;</span>加入购物车<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>MacBookPro<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>11000<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Apple<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/myWeb/one?goodsName=MacBookPro&quot;</span>&gt;</span>加入购物车<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;4&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/myWeb/two&quot;</span>&gt;</span>查看我的购物车<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210310210117263.38dutp7w9s20.png" alt="image-20210310210117263"></p><p><code>OneServlet</code>：将商品加入购物车</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OneServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 调用请求对象，读取e请求头参数，得到用户选择商品名</span><br>        String goodsName = request.getParameter(<span class="hljs-string">&quot;goodsName&quot;</span>);<br>        <span class="hljs-comment">// 调用请求对象，向Tomcat索要当前用户在服务端的私人储物柜</span><br>        HttpSession session = request.getSession();<br>        <span class="hljs-comment">// 将用户选购商品添加到当前用户私人储物柜</span><br>        <span class="hljs-comment">// 获取 session 对象中 key 为 goodsName 的 value</span><br>        Integer goodsNum = (Integer) session.getAttribute(goodsName);<br>        <span class="hljs-comment">// 两种情况</span><br>        <span class="hljs-keyword">if</span> (goodsNum == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 当购物车中没有当前商品时</span><br>            session.setAttribute(goodsName, <span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 当前购物车中已经有当前商品，对商品数量 +1</span><br>            session.setAttribute(goodsName, goodsNum + <span class="hljs-number">1</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>TwoServlet</code>：查看我的购物车</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TwoServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 调用请求对象，向 Tomcat 索要当前用户在服务端私人储物柜</span><br>        HttpSession session = request.getSession();<br>        <span class="hljs-comment">// 将 session 中所有的 key 读取出来，存放一个枚举对象</span><br>        Enumeration&lt;String&gt; attributeNames = session.getAttributeNames();<br><br>        <span class="hljs-comment">// 获取向输出流获取对象</span><br>        response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>        PrintWriter out = response.getWriter();<br>        <span class="hljs-keyword">while</span> (attributeNames.hasMoreElements()) &#123;<br>            String goodsName = attributeNames.nextElement();<br>            <span class="hljs-keyword">int</span> goodsNum = (<span class="hljs-keyword">int</span>) session.getAttribute(goodsName);<br>            out.println(<span class="hljs-string">&quot;&lt;font style=\&quot;color:red; font-size:40px\&quot;&gt;商品名称：&quot;</span> + goodsName + <span class="hljs-string">&quot;&amp;nbsp&amp;nbsp&amp;nbsp商品数量：&quot;</span> + goodsNum + <span class="hljs-string">&quot;&lt;/font&gt;&lt;br&gt;&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="十六、HttpServletResquest-接口实现数据共享"><a href="#十六、HttpServletResquest-接口实现数据共享" class="headerlink" title="十六、HttpServletResquest 接口实现数据共享"></a>十六、HttpServletResquest 接口实现数据共享</h3><ol><li><strong>介绍：</strong>  </li></ol><blockquote><p>（1）在同一个网站中，如果两个 Servlet 之间通过【<strong>请求转发</strong>】方式进行调用，彼此之间共享同一个请求协议包。而一个请求协议包只对应一个请求对象，因此 Servlet 之间共享同一个请求对象，此时可以利用这个请求对象在两个 Servlet 之间实现数据共享</p><p>（2）在请求对象实现 Servlet 之间数据共享功能时，开发人员将请求对象称为【<strong>请求作用域对象</strong>】</p></blockquote><ol start="2"><li><strong>命令实现：</strong>   OneServlet通过请求转发申请调用TwoServlet时，需要给TwoServlet提供共享数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">OneServlet &#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;<br>        <span class="hljs-comment">// 将数据添加到【请求作用域对象】中</span><br>        request.setAttribute(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;abc&quot;</span>);<br>        <span class="hljs-comment">// 向 Tomcat 申请调用 TwoSevlet</span><br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/two&quot;</span>).forword(request, response);<br>    &#125;    <br>&#125;<br><br>TwoServlet &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;<br>        <span class="hljs-comment">// 从当前请求对象得到从 OneServelt 写入的共享数据</span><br>        Object value = request.getAttribute(<span class="hljs-string">&quot;key&quot;</span>);<br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="十八、监听器接口"><a href="#十八、监听器接口" class="headerlink" title="十八、监听器接口"></a>十八、监听器接口</h3><ol><li><strong>介绍：</strong> </li></ol><blockquote><p>（1）一组来自于 Servlet 规范下接口，共有 8 个接口。在 Tomcat 存在 servlet-api.jar 包。</p><p>（2）<strong>监听器接口需要由开发人员亲自实现</strong>，Http 服务器提供 jar 包并没有对应的实现类。</p><p>（3）监听器接口用于监控【<strong>作用域对象生命周期变化时刻</strong>】以及【<strong>作用域对象共享数据变化时刻</strong>】</p></blockquote><ol start="2"><li><p><strong>作用域对象：</strong>  </p><ul><li>在 Servlet 规范中，认为<strong>在服务端内存中</strong>可以在某些条件下为两个 Servlet 之间提供<strong>数据共享方案的对象</strong>，被称为==作用域对象==。</li><li><strong>Servlet规范下作用域对象：</strong><ul><li><code>ServletContext</code> ：全局作用与对象；</li><li><code>HttpSession</code> ：会话作用域对象；</li><li><code>HttpServletRequest</code> ：请求作用域对象；</li></ul></li></ul></li><li><p><strong>监听器接口实现类开发规范（三步）：</strong>  </p><ol><li><p>根据监听的实际情况，选择对应的监听器接口进行实现。</p></li><li><p>重写监听器接口中的监听事件处理方法。</p></li><li><p>在 web.xml 文件中将监听器实现类注册到 Http 服务器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br><span class="hljs-comment">&lt;!--将监听器实现类注册到 Http 服务器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>监听器实现类的完整类名<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p><code>ServletContextListener</code> 接口：</p><ul><li><p><strong>作用：</strong> 通过这个接口合法的监测全局作用域对象<strong>被初始化的时刻以及被销毁的时刻</strong>。</p></li><li><p><strong>监听事件处理方法：</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在全局作用域对象被 Http 服务器初始化时被调用</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextInitialized</span><span class="hljs-params">(ServletContextEvent sce)</span> </span>&#123;<br><br>&#125;<br><br><span class="hljs-comment">// 在全局作用域对象被 Http 服务器销毁的时候触发调用</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">contextDestroyed</span><span class="hljs-params">(ServletContextEvent sce)</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>ServletContextAttributeListener</code> 接口：</p><ul><li><p><strong>作用：</strong>  通过这个接口合法的检测全局作用域对象<strong>共享数据变化时刻</strong>。</p></li><li><p><strong>监听事件处理方法：</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 在全局作用域对象添加共享数据时被调用</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">attributeAdded</span><span class="hljs-params">(ServletContextAttributeEvent event)</span> </span>&#123;<br><br>&#125;<br><br><span class="hljs-comment">// 在全局作用域对象更新共享数据时被调用</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">attributeRemoved</span><span class="hljs-params">(ServletContextAttributeEvent event)</span> </span>&#123;<br><br>&#125;<br><br><span class="hljs-comment">// 在全局作用域对象删除共享数据时被调用</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">attributeReplaced</span><span class="hljs-params">(ServletContextAttributeEvent event)</span> </span>&#123;<br><br>&#125;<br><br><span class="hljs-comment">// 全局作用域对象添加、更新、删除共享数据的方法</span><br>ServletContext application = request.getServletContext();<br><span class="hljs-comment">// 添加</span><br>application.setAttribute(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-number">100</span>);<br><span class="hljs-comment">// 更新</span><br>application.setAttribute(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-number">200</span>);<br><span class="hljs-comment">// 删除</span><br>application.removeAttribute(<span class="hljs-string">&quot;key&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="十九、过滤器接口（Filter）"><a href="#十九、过滤器接口（Filter）" class="headerlink" title="十九、过滤器接口（Filter）"></a>十九、过滤器接口（Filter）</h3><ol><li><strong>介绍：</strong>  </li></ol><blockquote><p>（1）来自于 Servlet 规范下的接口，在 Tomcat 中存在于 servlet-api.jar 包。</p><p>（2）Filter 接口实现类由开发人员负责提供，Http 服务器不负责提供。</p><p>（3）Filter 接口在 Http 服务器调用资源文件之前，对 Http 服务器进行拦截。</p></blockquote><ol start="2"><li><strong>具体作用：</strong>  <ul><li>==拦截 Http 服务器，帮助 Http 服务器检测当前请求合法性==</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 编写一个类继承 Filter，重写 doFilter 方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        <span class="hljs-comment">// 通过拦截请求对象得到请求包参数信息，从而得到访问用户的真实年龄</span><br>        String age = servletRequest.getParameter(<span class="hljs-string">&quot;age&quot;</span>);<br>        <span class="hljs-comment">// 根据年龄，帮助 Http 服务器来判断本次请求的合法性</span><br>        <span class="hljs-keyword">if</span> (Integer.parseInt(age) &lt;= <span class="hljs-number">75</span>) &#123;<br>            <span class="hljs-comment">// 将拦截的请求对象和相应对象交还给 Tomcat，由 Tomcat 继续调用资源文件</span><br>            filterChain.doFilter(servletRequest, servletResponse);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 过滤器代替 Http 服务器拒绝本次请求</span><br>            servletResponse.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);<br>            PrintWriter out = servletResponse.getWriter();<br>            out.println(<span class="hljs-string">&quot;&lt;center&gt;&lt;font style=&#x27;color:red;font-size:40px&#x27;&gt;大爷，珍爱生命啊!&lt;/font&gt;&lt;/center&gt;&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>   将过滤器注册到 <code>web.xml</code> 文件中</p>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--将过滤器类文件路径交给 Tomcat--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>myFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>cn.yechen.fliter.MyFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-comment">&lt;!--通知 Tomcat 在调用何种资源文件时需要被当前过滤器拦截--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>myFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/mm.jpg<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>==拦截 Http 服务器，对当前请求进行增强操作==</li></ul><p>因为通过 POST 请求方式获取的资源保存在请求体中，请求对象在解析数据的时候默认采用 <code>iso-8859-1</code> ，这是一种东欧字符集，不支持中文。所以每次使用 POST 请求时都要设置请求对象的编码格式，<strong>可以使用过滤器方式对编码方式进行设置，简化代码</strong>。</p><p>   <strong>控制浏览器以 POST 方式发起请求</strong></p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/myWeb/one&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;以 POST 方式提交&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/myWeb/two&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;以 POST 方式提交&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>   <strong>两个 Servlet</strong></p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OneServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// 直接从【请求对象】中取出请求参数</span><br>        String username = request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;OneServelt 从请求体得到参数 &quot;</span>+ username);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>   <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TwoServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span> void doPost(<span class="hljs-type">HttpServletRequest</span> request, <span class="hljs-type">HttpServletResponse</span> response) <span class="hljs-keyword">throws</span> <span class="hljs-type">ServletException</span>, <span class="hljs-type">IOException</span> &#123;<br>        <span class="hljs-comment">// 直接从【请求对象】中取出请求参数</span><br>        <span class="hljs-type">String</span> username = request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;TwoServelt 从请求体得到参数 &quot;</span>+ username);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>   <strong>过滤器，对所有资源进行排查，将字符集设置为 utf-8</strong></p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFilter02</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        <span class="hljs-comment">// 通知拦截的请求对象，使用 UTF-8 字符集对当前请求体信息进行一次重新编辑</span><br>        servletRequest.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>        <span class="hljs-comment">// 将【请求对象】和 【相应对象】重新交给 Tomcat</span><br>        filterChain.doFilter(servletRequest, servletResponse);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>   <strong>将 Servlet 和 过滤器注册到 web.xml 文件中</strong></p>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>OneServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>cn.yechen.controller.OneServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>OneServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/one<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>TwoServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>cn.yechen.controller.TwoServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>TwoServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/two<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-comment">&lt;!--将过滤器类文件路径交给 Tomcat--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>myFilter02<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>cn.yechen.fliter.MyFilter02<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-comment">&lt;!--通知 tomcat 在调用所有资源文件之前都需要调用 MyFilter02 进行拦截--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>myFilter02<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/image-20210313221847093.2n0k1upx3v80.png" alt="image-20210313221847093"></p><ol start="3"><li><p><strong>Filter接口实现类开发步骤：（三步）</strong>  </p><ul><li>创建一个 java 类实现 Filter 接口。</li><li>重写 Filter 接口中的 doFilter 方法。</li><li>在 web.xml 文件中将过滤器注册到 Http 服务器中。</li></ul></li><li><p><strong>Filter拦截地址格式：</strong> </p><ul><li>命令格式：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>过滤器对象名称<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>过滤器完整类名<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-comment">&lt;!--拦截地址通知Tomcat在调用何种资源文件之前需要调用OneFilter过滤进行拦截--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>过滤器对象名称<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/拦截地址<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>要求 Tomcat 在调用==某一个具体文件==之前，来调用 过滤器 拦截：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>拦截的文件的具体地址<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>要求Tomcat在调用==某一个文件夹下所有的资源文件==之前，来调用 过滤器 拦截：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/文件夹/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>要求 Tomcat 在调用==任意文件夹下某种类型文件==之前，来调用 过滤器 拦截：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.jpg<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>要求 Tomcat 在调用==网站中任意文件==时，来调用 过滤器 拦截：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="互联网通信流程图"><a href="#互联网通信流程图" class="headerlink" title="互联网通信流程图"></a>互联网通信流程图</h2><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210424/%E7%AC%AC%E4%B8%89%E7%89%88%E4%BA%92%E8%81%94%E7%BD%91%E9%80%9A%E4%BF%A1%E6%B5%81%E7%A8%8B%E5%9B%BE.6ihflst0vho0.png" alt="第三版互联网通信流程图"></p>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb</title>
    <link href="/2021/09/13/JavaWeb-2021-09-13-JavaWeb/"/>
    <url>/2021/09/13/JavaWeb-2021-09-13-JavaWeb/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><h3 id="1-1-前言"><a href="#1-1-前言" class="headerlink" title="1.1 前言"></a>1.1 前言</h3><p>web开发：</p><ul><li>web，网页的意思， <a href="http://www.baidu.com/">www.baidu.com</a></li><li>静态 web：<ul><li>html , css</li><li>提供给所有人看到数据始终不会发生变化！</li></ul></li><li>动态 web：<ul><li>淘宝，京东，几乎所有网站都是；</li><li>提供给所有人看到的数据始终会发生变化，每个人在不同事件、不同地点看到的信息时不同的！</li><li>技术栈：Servlet \ JSP \ ASP \ PHP</li></ul></li></ul><p>==在 Java 中，动态 Web 资源开发的技术统称为 JavaWeb== </p><h3 id="1-2-web-应用程序"><a href="#1-2-web-应用程序" class="headerlink" title="1.2 web 应用程序"></a>1.2 web 应用程序</h3><p><strong>web 应用程序：可以提供浏览器访问的程序：</strong></p><ul><li>a.html、b.html、… 多个 web 资源，这些 web 资源可以被外界访问，对外界提供服务；</li><li>我们能访问到的任何一个页面或者资源，都存在与这个世界的某一个角落的计算机上</li><li>URL</li><li>这个统一的 Web 资源会被放在同一个文件夹下，这就是一个 web 应用程序 —&gt; Tomcat服务器</li><li>一个 Web 应用由多部分组成<ul><li>html 、 css 、 js</li><li>jsp 、 servlet</li><li>java程序</li><li>jar包</li><li>配置文件（Properties）</li></ul></li></ul><p>web 应用程序编写完毕之后，若想提供给外界访问，需要一个服务器来统一管理</p><h3 id="1-3-静态-Web"><a href="#1-3-静态-Web" class="headerlink" title="1.3 静态 Web"></a>1.3 静态 Web</h3><ul><li><p><em>.htm、</em>.html ，这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取</p><p><img src="https://i.loli.net/2021/02/01/eksUPZfuXMdVaxY.png" alt="image-20210201151842947"></p></li><li><p>静态 web 存在的缺点：</p><ul><li>Web 页面无法动态更新，所有用户看到的都是同一个页面<ul><li>轮播图、点击特效（这是伪动态）</li><li>实现伪动态：JavaScript、VBScript</li></ul></li><li>它无法和数据库交互（数据无法持久化，用户无法交互）</li></ul></li></ul><h3 id="1-4-动态-Web"><a href="#1-4-动态-Web" class="headerlink" title="1.4 动态 Web"></a>1.4 动态 Web</h3><p>页面会动态展示：“Web的页面展示的效果因人而异”；</p><p><img src="https://i.loli.net/2021/02/01/ygZihtaJSdRD2CW.png" alt="image-20210201152241521"></p><p>缺点</p><ul><li>假如服务器的动态 web 资源出现了错误，我们需要重新编写<strong>后台程序</strong>，重新发布：<ul><li>停机维护</li></ul></li></ul><p>优点：</p><ul><li><p>Web页面可以动态更新，所有用户看到都不是同一个页面</p></li><li><p>它可以与数据库交互 （数据持久化：注册，商品信息，用户信息……..）</p><p><img src="https://i.loli.net/2021/02/01/Exhn7kOTpYQ3H8G.png" alt="image-20210201152710944"></p></li></ul><h2 id="2、Web-服务器"><a href="#2、Web-服务器" class="headerlink" title="2、Web 服务器"></a>2、Web 服务器</h2><h3 id="2-1-技术讲解"><a href="#2-1-技术讲解" class="headerlink" title="2.1 技术讲解"></a>2.1 技术讲解</h3><p><strong>ASP：</strong></p><ul><li>微软：国内最早流行的就是 ASP；</li><li>在 HTML 中嵌入了 VB 的脚本，ASP + COM；</li><li>在 ASP 开发中，基本一个页面都有几千行代码，页面及其混乱，维护成本高</li><li>主要使用 C#</li></ul><p><strong>PHP：</strong></p><ul><li>PHP 开服速度很快，功能很强大，跨平台，代码简单</li><li>无法承载大访问量的情况，有局限性</li></ul><p><strong>JSP/Servlet:</strong></p><ul><li><p>是 sun 公司主推 B/S（浏览器和服务器） 架构</p></li><li><p>基于 Java 语言的</p></li><li><p>可以承载高并发、高可用、高性能带来的影响</p></li><li><p>语法像 ASP，加强市场的竞争力度</p></li></ul><h3 id="2-2-web服务器"><a href="#2-2-web服务器" class="headerlink" title="2.2 web服务器"></a>2.2 web服务器</h3><p>服务器是一种被动的操作，用来处理一些用户的请求和给用户的一些相应信息</p><p><strong>IIS：</strong> 微软的，windows 中自带的</p><p><strong>Tomcat：</strong> </p><p><img src="https://i.loli.net/2021/02/01/eMNZKPVuC8avJhY.png" alt="image-20210201155032470"></p><p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且<strong>免费</strong>，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，<strong>在中小型系统和并发访问用户不是很多的场合下被普遍使用</strong>，是开发和调试JSP 程序的首选。对于一个初学Javaweb的人来说，它是最佳的选择</p><p>Tomcat 实际上运行JSP 页面和Servlet。Tomcat最新版本为<strong>9.0.41</strong>（2021/02/01）</p><p>……</p><p>下载 Tomcat：</p><ol><li>安装 或 解压</li><li>了解配置文件及目录结构</li><li>作用</li></ol><h2 id="3、Tomcat"><a href="#3、Tomcat" class="headerlink" title="3、Tomcat"></a>3、Tomcat</h2><h3 id="3-1-安装-Tomcat"><a href="#3-1-安装-Tomcat" class="headerlink" title="3.1 安装 Tomcat"></a>3.1 安装 Tomcat</h3><p><a href="https://tomcat.apache.org/">tomcat官网</a></p><p><img src="https://i.loli.net/2021/02/01/8oPOlrnHvjmVsUL.png" alt="image-20210201160415776"></p><h3 id="3-2-Tomcat-启动和配置"><a href="#3-2-Tomcat-启动和配置" class="headerlink" title="3.2 Tomcat 启动和配置"></a>3.2 Tomcat 启动和配置</h3><p><strong>文件夹信息</strong></p><p><img src="https://i.loli.net/2021/02/01/wbz7PUYAts1QrW9.png" alt="image-20210201161241671"></p><p><strong>启动 、关闭 Tomcat</strong></p><p><img src="https://i.loli.net/2021/02/01/2iHx1hGyLugEptQ.png" alt="image-20210201161649752"></p><p><strong>访问测试</strong>：<a href="http://localhost:8080/">http://localhost:8080</a></p><p>可能遇到的问题：</p><ol><li><p>Java 环境变量没有配置</p></li><li><p>闪退问题：需要配置兼容性</p></li><li><p>乱码问题：配置文件中设置（修改 conf /logging.properties 中的 java.util.logging.ConsoleHandler.encoding，将其值修改为 GBK）（其实也没太重要，只是显示有问题）</p><p>原图：</p><p><img src="https://i.loli.net/2021/02/01/emoNubGdwvR2MJW.png" alt="image-20210201162559283"></p><p>修改后：</p><p><img src="https://i.loli.net/2021/02/01/sqIrKRm4gBZM7cL.png" alt="image-20210201162634240"></p></li></ol><h3 id="3-3-配置"><a href="#3-3-配置" class="headerlink" title="3.3 配置"></a>3.3 配置</h3><p><img src="https://i.loli.net/2021/02/01/GMTDKYvSIbe1k3Z.png" alt="image-20210201162947752"></p><p><strong>可以配置启动的端口号</strong></p><ul><li>tomcat默认端口号为：8080</li><li>mysql：3306</li><li>http：80</li><li>https：443</li></ul><p><img src="https://i.loli.net/2021/02/01/tqfE8KG4PjMY9pe.png" alt="image-20210201164300693"></p><p><strong>可以配置主机的名称</strong></p><ul><li>默认的主机名称为：localhost —&gt; 对应IP:127.0.0.1</li><li>默认的网站应用存放的位置为：webapps</li></ul><p><img src="https://i.loli.net/2021/02/01/MY8nxGrWdbVZBOv.png" alt="image-20210201165115952"></p><h4 id="高难度面试题："><a href="#高难度面试题：" class="headerlink" title="高难度面试题："></a>高难度面试题：</h4><p><strong>请你谈一谈网站是如何进行访问的？</strong></p><ol><li><p>输入一个域名，点击回车</p></li><li><p>先检查本机的 C:\Windows\System32\drivers\etc\hosts 配置文件中有没有这个域名的映射</p><ol><li><p>有，直接返回对应的 ip 地址</p><p><img src="https://i.loli.net/2021/02/01/9RCJEz87fGxYm42.png" alt="image-20210201170039775"></p></li><li><p>没有，去 DNS 服务器找，找到的话就返回，找不到就返回找不到</p></li></ol><p><img src="https://i.loli.net/2021/02/01/sXn7aH2ktRiVlN5.png" alt="image-20210201170712282"></p></li></ol><h3 id="3-4-发布一个-web-网站"><a href="#3-4-发布一个-web-网站" class="headerlink" title="3.4 发布一个 web 网站"></a>3.4 发布一个 web 网站</h3><p>不会就先模仿</p><ul><li>将自己写的网站，放到服务器（Tomcat）中指定的 web 应用文件夹（webapps）下，就可以访问了</li></ul><p>网站应该有的结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">--webapps ： Tomcat服务器的 web 目录<br>    -ROOT<br>    -yechen-ops ： 网站的目录名<br>    -WEB-INF<br>    -Classes ： java程序<br>    -lib ： web 应用所依赖的 jar 包<br>    -web.xml ： 网站的配置文件<br>    -index.html ： 默认的首页<br>    -<span class="hljs-keyword">static</span> ： 静态资源文件<br>    -css<br>    -js<br>    -img<br>    ......<br></code></pre></td></tr></table></figure><h2 id="4、HTTP（还不大懂）"><a href="#4、HTTP（还不大懂）" class="headerlink" title="4、HTTP（还不大懂）"></a>4、HTTP（还不大懂）</h2><h3 id="4-1-什么是-HTTP"><a href="#4-1-什么是-HTTP" class="headerlink" title="4.1 什么是 HTTP"></a>4.1 什么是 HTTP</h3><p>HTTP（超文本传输协议）是一个简单的 请求 - 相应 协议，它通常运行在 TCP 之上</p><ul><li>文本：html，字符串, ……</li><li>超文本：图片、音乐、视频、定位、地图……</li><li>默认端口：80</li></ul><p>Https：安全的</p><ul><li>默认端口：443</li></ul><h3 id="4-2-两个时代"><a href="#4-2-两个时代" class="headerlink" title="4.2 两个时代"></a>4.2 两个时代</h3><ul><li><strong>http1.0</strong><ul><li>HTTP/1.0：客户端可以与 web服务端连接后，只能获得一个 web 资源</li></ul></li><li><strong>http2.0</strong><ul><li>HTTP/1.1：客户端可以与 web服务端连接后，可以获得多个 web 资源</li></ul></li></ul><h3 id="4-3-HTTP-请求"><a href="#4-3-HTTP-请求" class="headerlink" title="4.3 HTTP 请求"></a>4.3 HTTP 请求</h3><ul><li>客户端 —&gt; 发请求（Request） —&gt; 服务器</li></ul><p>以百度为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Request URL:https:<span class="hljs-comment">//www.baidu.com/ 请求地址 </span><br>Request Method:GET get方法/post方法 <br>Status Code:<span class="hljs-number">200</span> OK 状态码：<span class="hljs-number">200</span> <br>Remote（远程） Address:<span class="hljs-number">14.215</span><span class="hljs-number">.177</span><span class="hljs-number">.39</span>:<span class="hljs-number">443</span>远程地址<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept:text/html <br>Accept-Encoding:gzip, deflate, br <br>Accept-Language:zh-CN,zh;q=<span class="hljs-number">0.9</span> 语言 <br>Cache-Control:max-age=<span class="hljs-number">0</span> <br>Connection:keep-alive<br></code></pre></td></tr></table></figure><h4 id="4-3-1-请求行"><a href="#4-3-1-请求行" class="headerlink" title="4.3.1 请求行"></a>4.3.1 请求行</h4><ul><li>请求行中的请求方式：GET</li><li>请求方式： <strong>Get</strong> 、 <strong>Post</strong><ul><li>Get：请求能够携带的参数比较小，大小有限制，会在浏览器的 URL 地址栏上显示数据内容，不安全，但高效</li><li>Post：请求能够携带的参数无限制，大小无限制，不会在浏览器的 URL 地址栏上显示数据内容，安全，但不高效</li></ul></li></ul><h4 id="4-3-2-请求行"><a href="#4-3-2-请求行" class="headerlink" title="4.3.2 请求行"></a>4.3.2 请求行</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept：告诉浏览器，它支持的数据类型<br>Accept-Encoding：支持那种编码格式 <br>Accept-Language：告诉浏览器，它的语言环境 <br>Cache-Control：缓存控制<br>Connection：告诉浏览器，请求是断开还是保持连接<br>HOST：主机<br>......<br></code></pre></td></tr></table></figure><h3 id="4-4-HTTP相应"><a href="#4-4-HTTP相应" class="headerlink" title="4.4 HTTP相应"></a>4.4 HTTP相应</h3><ul><li>服务器 —&gt; 相应 —&gt; 客户端</li></ul><p>以百度为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Cache-Control: <span class="hljs-keyword">private</span>缓存控制<br>Connection: keep-alive连接<br>Content-Encoding: gzip编码<br>Content-Type: text/html;类型<br></code></pre></td></tr></table></figure><h4 id="4-4-1-相应体"><a href="#4-4-1-相应体" class="headerlink" title="4.4.1 相应体"></a>4.4.1 相应体</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Accept：告诉浏览器，它支持的数据类型<br>Accept-Encoding：支持那种编码格式 <br>Accept-Language：告诉浏览器，它的语言环境 <br>Cache-Control：缓存控制<br>Connection：告诉浏览器，请求是断开还是保持连接<br>HOST：主机<br>Refresh：告诉客户端，多久刷新一次<br>Localhost：让网页重新定位<br></code></pre></td></tr></table></figure><h4 id="4-4-2-相应状态码（重点）"><a href="#4-4-2-相应状态码（重点）" class="headerlink" title="4.4.2 相应状态码（重点）"></a>4.4.2 相应状态码（重点）</h4><p>2XX：请求相应成功（200）</p><p>3XX：请求重定向</p><ul><li>重定向：你重新到我给你的新位置去</li></ul><p>4XX：找不到资源（404）</p><p>5XX：服务器代码错误（500）（502 网关错误）</p><p><strong>常见面试题：</strong></p><p>当你的浏览器地址栏中输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p><p><a href="https://www.zhihu.com/question/34873227">找的一个回答</a></p><h2 id="5、Maven"><a href="#5、Maven" class="headerlink" title="5、Maven"></a>5、Maven</h2><p><strong>我为什么要学习这个技术</strong></p><ol><li>在 JavaWeb 开发中，需要使用大量的 jar 包，我们需要手动去导入</li><li>如何能够让一个东西自动帮我们导入和配置这个 jar 包</li></ol><p>由此 Maven 诞生了</p><h3 id="5-1-Maven项目架构管理工具"><a href="#5-1-Maven项目架构管理工具" class="headerlink" title="5.1 Maven项目架构管理工具"></a>5.1 Maven项目架构管理工具</h3><p>我们目前就就是用来方便导入 jar 包的</p><p>Maven的核心思想：<strong>约定大于配置</strong></p><ul><li>有约束，不要去违反</li></ul><p>Maven会规定好你该如何去编写我们的 Java 代码，必须要按照这个规范来</p><h3 id="5-2-下载安装-Maven"><a href="#5-2-下载安装-Maven" class="headerlink" title="5.2 下载安装 Maven"></a>5.2 下载安装 Maven</h3><p><a href="https://maven.apache.org/">Maven官网</a></p><p><img src="https://i.loli.net/2021/02/01/ZqSmxKpRQ8UHaod.png" alt="image-20210201204538495"></p><h3 id="5-3-配置环境变量"><a href="#5-3-配置环境变量" class="headerlink" title="5.3 配置环境变量"></a>5.3 配置环境变量</h3><p>配置如下：</p><ul><li>M2_HOME：maven目录下的 bin 目录</li><li>MAVEN_HOME：maven的目录</li><li>在系统的 path 中配置 %MAVEN_HOME%\bin</li></ul><p>确保配置成功</p><p><img src="https://i.loli.net/2021/02/01/rfiYc8XJzEPuk1A.png" alt="image-20210201212204477"></p><h3 id="5-4-阿里云镜像"><a href="#5-4-阿里云镜像" class="headerlink" title="5.4 阿里云镜像"></a>5.4 阿里云镜像</h3><ul><li>镜像（mirrors）：<ul><li>作用：加速我们的下载速度</li></ul></li><li>国内建议使用阿里云的镜像，在 <strong>conf/setting.xml</strong> 文件下的 **mirrors **标签下配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public <span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>或者是（其实都一样）<br><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-5-本地仓库"><a href="#5-5-本地仓库" class="headerlink" title="5.5 本地仓库"></a>5.5 本地仓库</h3><p><strong>建立一个本地仓库</strong>（LocalRepository）</p><p><img src="https://i.loli.net/2021/02/01/2xLRIT7Bia4smMX.png" alt="image-20210201213820943"></p><p>在 <strong>conf/setting.xml</strong> 文件下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\Environmental\Maven\apache-maven-3.6.3\maven-repo<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-6-在IDEA中使用-Maven"><a href="#5-6-在IDEA中使用-Maven" class="headerlink" title="5.6 在IDEA中使用 Maven"></a>5.6 在IDEA中使用 Maven</h3><ol><li><p>启动 IDEA</p></li><li><p>创建一个 MavenWeb（使用模板的） 项目</p><p><img src="https://i.loli.net/2021/02/01/VTo4xOESeiwUuNL.png" alt="image-20210201214810205"></p><p><img src="https://i.loli.net/2021/02/01/RGDgMYQBr4VouXE.png" alt="image-20210201215025855"></p></li></ol><p><img src="https://i.loli.net/2021/02/01/Thk1Kv8LHOYn9dr.png" alt="image-20210201215634720"></p><p><img src="https://i.loli.net/2021/02/01/pU5dXJsaKCQFjTV.png" alt="image-20210201215854686"></p><p>最后设置完点 finish</p><p><img src="https://i.loli.net/2021/02/01/VGHRqLf1ID8ZWlE.png" alt="image-20210201220028700"></p><ol start="3"><li><p>等待项目构建成功</p><p><img src="https://i.loli.net/2021/02/01/3bcaLPsJtNhMGde.png" alt="image-20210201220512686"></p></li><li><p>观察 Maven仓库中多了那些东西</p></li><li><p>IDEA中的 Maven 设置</p><p><strong>注意：IDEA项目创建成功之后，看一眼 Maven 的配置</strong></p><p><img src="https://i.loli.net/2021/02/01/xozmckFMIfnuGR6.png" alt="image-20210201221514502"></p></li></ol><p><img src="https://i.loli.net/2021/02/01/246tMWUFkYBimbC.png" alt="image-20210201221836454"></p><ol start="6"><li>到这里，Maven 在 IDEA 中的配置就基本 OK 了！</li></ol><h3 id="5-7-创建一个普通的-Maven-项目（不勾模板）"><a href="#5-7-创建一个普通的-Maven-项目（不勾模板）" class="headerlink" title="5.7 创建一个普通的 Maven 项目（不勾模板）"></a>5.7 创建一个普通的 Maven 项目（不勾模板）</h3><p><img src="https://i.loli.net/2021/02/01/FfMi48Zsmaur1xL.png" alt="image-20210201222451893"></p><p><strong>这是干净的 Maven 项目</strong></p><p><img src="https://i.loli.net/2021/02/01/7yYhXMZpEJUQb42.png" alt="image-20210201225642870"></p><p>这个只有在 Web 应用下才会有！</p><p><img src="https://i.loli.net/2021/02/01/x7e623hbl9pw8uX.png" alt="image-20210201225857449"></p><h3 id="5-8-标记文件夹功能"><a href="#5-8-标记文件夹功能" class="headerlink" title="5.8 标记文件夹功能"></a>5.8 标记文件夹功能</h3><p><strong>第一种</strong></p><p><img src="https://img-blog.csdnimg.cn/20210201232103845.png" alt="20210201232103845.png"></p><p><img src="https://img-blog.csdnimg.cn/20210201232103900.png" alt="20210201232103900.png"></p><p>第二种</p><p><img src="https://img-blog.csdnimg.cn/20210201232407953.png" alt="20210201232407953.png"></p><p><img src="https://img-blog.csdnimg.cn/20210201232821875.png" alt="20210201232821875.png"></p><h3 id="5-9-在-IDEA-中配置-Tomcat及其使用"><a href="#5-9-在-IDEA-中配置-Tomcat及其使用" class="headerlink" title="5.9 在 IDEA 中配置 Tomcat及其使用"></a>5.9 在 IDEA 中配置 Tomcat及其使用</h3><p><img src="https://img-blog.csdnimg.cn/20210201233434161.png" alt="20210201233434161.png"></p><p><img src="https://img-blog.csdnimg.cn/20210202115926252.png" alt="20210202115926252.png"></p><p><img src="https://img-blog.csdnimg.cn/20210201235351393.png" alt="20210201235351393.png"></p><p>解决警告问题：</p><ul><li>为什么会有这个问题：我们访问一个网站，需要指定一个文件夹的名字</li></ul><p><img src="https://img-blog.csdnimg.cn/20210202120053873.png" alt="20210202120053873.png"></p><p><img src="https://img-blog.csdnimg.cn/20210202120142793.png" alt="20210202120142793.png"></p><p><img src="https://img-blog.csdnimg.cn/20210202000907983.png" alt="20210202000907983.png"></p><p>​    </p><p><img src="https://img-blog.csdnimg.cn/20210202120229123.png" alt="20210202120229123.png"></p><h3 id="5-10-pom文件"><a href="#5-10-pom文件" class="headerlink" title="5.10 pom文件"></a>5.10 pom文件</h3><p>pom.xml 是Maven的核心配置文件</p><p><img src="https://img-blog.csdnimg.cn/20210202120306118.png" alt="image-20210202114913988"></p><p><strong>这是使用 Maven 模板生成的项目的 pom.xml 文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br><span class="hljs-comment">&lt;!--Maven版本和头文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--这里就是我们刚才配置的 GAV--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.yechen-ops<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javaweb-01-maven<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    项目的打包方式：</span><br><span class="hljs-comment">    jar：Java 应用</span><br><span class="hljs-comment">    wer：JavaWeb 应用</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>javaweb-01-maven Maven Webapp<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://www.example.com<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--配置--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--项目的默认构建编码--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--编码版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.7<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--依赖--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--具体的jar包配置文件--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--项目构建的用的东西--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span> javaweb-01-maven<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><span class="hljs-comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-clean-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.22.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-war-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-install-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20210202144510712.png" alt="image-20210202144445974"></p><p><strong>由于 Maven 的约定大于配置，所以我们之后可能遇到我们写的配置文件（比如在 java 目录下添加了资源文件），无法被导出或者生效问题，解决方案：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 在build中配置Resources, 来防止我们资源导出失败的问题 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-11-IDEA的骚操作（查看依赖jar包关系图）"><a href="#5-11-IDEA的骚操作（查看依赖jar包关系图）" class="headerlink" title="5.11 IDEA的骚操作（查看依赖jar包关系图）"></a>5.11 IDEA的骚操作（查看依赖jar包关系图）</h3><p><img src="https://img-blog.csdnimg.cn/20210202145820296.png" alt="image-20210202145756356"></p><h3 id="5-13-解决遇到的问题"><a href="#5-13-解决遇到的问题" class="headerlink" title="5.13 解决遇到的问题"></a>5.13 解决遇到的问题</h3><ol><li><p>Maven 3.6.2创建创建项目报错</p><p><img src="https://img-blog.csdnimg.cn/20210202151746177.png" alt="image-20210202151731674"></p><ul><li>解决方法：降级</li></ul></li><li><p>Tomcat闪退</p><ul><li>解决方法：正确配置 java 环境</li></ul></li><li><p>IDEA中每次都要重复配置Maven</p><ul><li><p>解决方法：在 IDEA 的全局默认配置中去配置</p><p><img src="https://img-blog.csdnimg.cn/20210202152256647.png" alt="image-20210202152241116"></p><p><img src="https://img-blog.csdnimg.cn/20210202152522229.png" alt="image-20210202152510049"></p></li></ul></li><li><p> Maven项目中Tomcat无法配置</p></li><li><p> maven默认web项目中的web.xml版本问题</p></li></ol><p>   <img src="https://img-blog.csdnimg.cn/20210202153301568.png" alt="image-20210202153248883"></p><ul><li>替换 web.xml 版本和 tomcat 一致</li></ul>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span><br><span class="hljs-string"><span class="hljs-tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">metadata-complete</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ol start="6"><li><p>Maven仓库的使用</p><p><a href="https://mvnrepository.com/">Maven仓库</a></p><p><img src="https://img-blog.csdnimg.cn/20210202154742297.png" alt="image-20210202154725819"></p></li></ol><p><img src="https://img-blog.csdnimg.cn/20210202154936922.png" alt="image-20210202154901458"></p><p><img src="https://img-blog.csdnimg.cn/20210202163245149.png" alt="image-20210202163231928"></p><h2 id="6、Servlet"><a href="#6、Servlet" class="headerlink" title="6、Servlet"></a>6、Servlet</h2><p><strong>Servlet 接口 Sun 公司有两个默认的实现类：==HttpServlet== 和 ==GenericServlet==</strong></p><h3 id="6-1-Servlet"><a href="#6-1-Servlet" class="headerlink" title="6.1 Servlet"></a>6.1 Servlet</h3><ul><li>Servlet 就是 sun 公司开发 <strong>动态 web</strong> 的一门技术</li><li>Sun 公司在 API 中提供了一个接口叫做：Servlet，如果你想开发一个 Servlet 程序，只需要完成两个小步骤：<ul><li>编写一个类实现 Servlet 接口</li><li>把开发好的 Java 类部署到服务器中</li></ul></li></ul><p><strong>把实现了 Servlet 接口的程序叫做：Servlet</strong></p><h3 id="6-2-HelloServlet"><a href="#6-2-HelloServlet" class="headerlink" title="6.2 HelloServlet"></a>6.2 HelloServlet</h3><ol><li><p>构建一个普通的 Maven 项目，删掉里面的 src 目录，以后我们的学习就在这个项目里建立 Moudel</p></li><li><p>关于Maven 父子工程的理解：</p><ul><li><p>在父项目中的 pom.xml 中会出现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>servlet01<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在子项目中的 pom.xml 中会出现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javaweb-02-servlet<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.yechen-ops<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>父项目中的 jar 包子项目可以直接使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">son extends father<br></code></pre></td></tr></table></figure></li></ul></li><li><p>Maven 环境优化</p><ol><li>[修改 web.xml 为最新的](###5.13 解决遇到的问题) 第 5 点</li><li>[将 Maven 的结构搭建完整](###5.8 标记文件夹功能)</li></ol></li><li><p>编写一个 Servlet 程序</p><ol><li>编写一个普通类</li><li>实现 Servlet 接口，我们就直接继承 HttpServlet 类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br><br>    <span class="hljs-comment">// 由于get或者post只是请求实现的不同方式，可以相互调用，业务逻辑都一样</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-comment">// ServletOutputStream outputStream = resp.getOutputStream();</span><br>        PrintWriter writer = resp.getWriter();<span class="hljs-comment">// 响应流</span><br>        writer.println(<span class="hljs-string">&quot;Hello,Servlet!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPut</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        doGet(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编写 Servlet 的映射</p><p>为什么要映射：我们写的是 Java 程序，但是要通过浏览器访问，而浏览器需要连接 web 服务器，所以我们需要在 web 服务中注册我们写的 servlet，还需要给他一个浏览器能够访问的路径。</p><p><strong>在 web.xml 中配置（这一步太重要了）</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册Servlet--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>cn.yechen.servlet.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-comment">&lt;!--Servlet的请求路径--&gt;</span><br><span class="hljs-comment">&lt;!--一个Servlet对应一个Mapping（映射）--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>hello<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>[配置 Tomcat](###5.9 在 IDEA 中配置 Tomcat及其使用)</p><ul><li><p>出现问题：没有Artifact</p><p><img src="https://img-blog.csdnimg.cn/20190223213215388.png"></p></li><li><p><a href="https://www.cnblogs.com/gbb123/p/6782227.html">解决方法</a></p></li></ul></li><li><p>启动测试</p><ul><li><p>出现问题：Tomcat 报 404 错误</p><ul><li>解决方法：<a href="https://www.cnblogs.com/gbb123/p/6782227.html">链接</a>中的第二步    <a href="https://blog.csdn.net/eaphyy/article/details/72513914">链接</a></li></ul><p><img src="https://img-blog.csdnimg.cn/20210202233327213.png" alt="image-20210202233220297"></p></li></ul></li></ol><h3 id="6-3-Servlet-原理"><a href="#6-3-Servlet-原理" class="headerlink" title="6.3 Servlet 原理"></a>6.3 Servlet 原理</h3>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA 原生常用快捷键</title>
    <link href="/2021/09/13/JavaWeb-2021-09-13-IDEA-%E5%8E%9F%E7%94%9F%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2021/09/13/JavaWeb-2021-09-13-IDEA-%E5%8E%9F%E7%94%9F%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><table><thead><tr><th align="center"></th><th align="center">功能</th><th align="center">快捷键</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><strong>执行（run）</strong></td><td align="center">shift + F10</td></tr><tr><td align="center">2</td><td align="center"><strong>提示补全 (Second Basic Completion)</strong></td><td align="center">Ctrl + Alt + 空格</td></tr><tr><td align="center">3</td><td align="center"><strong>单行注释（Comment with Line Comment）</strong></td><td align="center">Ctrl + /</td></tr><tr><td align="center">4</td><td align="center"><strong>多行注释（Comment with Block Comment）</strong></td><td align="center">Ctrl + Shift + /</td></tr><tr><td align="center">5</td><td align="center"><strong>向下复制一行 (Duplicate Line or Selection)</strong></td><td align="center">Ctrl + D</td></tr><tr><td align="center">6</td><td align="center"><strong>删除一行或选中行（Delete Line）</strong></td><td align="center">Crtl + Y</td></tr><tr><td align="center">7</td><td align="center"><strong>向下移动行(Move Statement Down)</strong></td><td align="center">Ctrl + Shift + 向下箭头</td></tr><tr><td align="center">8</td><td align="center"><strong>向上移动行(Move Statement Up)</strong></td><td align="center">Ctrl + Shift + 向上箭头</td></tr><tr><td align="center">9</td><td align="center"><strong>向下开始新的一行(Start New Line)</strong></td><td align="center">Shift + Enter</td></tr><tr><td align="center">10</td><td align="center"><strong>向上开始新的一行 (Start New Line Before Current)</strong></td><td align="center">Ctrl + Alt + Enter</td></tr><tr><td align="center">11</td><td align="center"><strong>如何查看源码 (class)</strong></td><td align="center">Ctrl + 选中指定的结构 或 Ctrl + N 搜索</td></tr><tr><td align="center">12</td><td align="center"><strong>万能解错 / 生成返回值变量</strong></td><td align="center">Alt + Enter</td></tr><tr><td align="center">13</td><td align="center"><strong>退回到前一个编辑的页面（Back）</strong></td><td align="center">Ctrl + Alt + 向左箭头</td></tr><tr><td align="center">14</td><td align="center"><strong>进入到下一个编辑的页面(针对于上条) (forward)</strong></td><td align="center">Ctrl + Alt + 向右箭头</td></tr><tr><td align="center">15</td><td align="center"><strong>查看继承关系(Type Hierarchy)</strong></td><td align="center">Ctrl + H</td></tr><tr><td align="center">16</td><td align="center"><strong>格式化代码(Reformat Code)</strong></td><td align="center">Ctrl + Alt + L</td></tr><tr><td align="center">17</td><td align="center"><strong>提示方法参数类型(Parameter Info)</strong></td><td align="center">Ctrl + P</td></tr><tr><td align="center">18</td><td align="center"><strong>复制代码</strong></td><td align="center">Ctrl + C</td></tr><tr><td align="center">19</td><td align="center"><strong>撤销</strong></td><td align="center">Ctrl + Z</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">21</td><td align="center"><strong>剪切</strong></td><td align="center">Ctrl + X</td></tr><tr><td align="center">22</td><td align="center"><strong>粘贴</strong></td><td align="center">Ctrl + V</td></tr><tr><td align="center">23</td><td align="center"><strong>保存</strong></td><td align="center">Ctrl + S</td></tr><tr><td align="center">24</td><td align="center"><strong>全选</strong></td><td align="center">Ctrl + A</td></tr><tr><td align="center">25</td><td align="center"><strong>选中行数，整体向后移</strong></td><td align="center">Tab</td></tr><tr><td align="center">26</td><td align="center"><strong>选中行数，整体向前移</strong></td><td align="center">Shift + Tab</td></tr><tr><td align="center">27</td><td align="center"><strong>查看类的结构（File Structure）</strong></td><td align="center">Ctrl + F12</td></tr><tr><td align="center">28</td><td align="center"><strong>重构：修改变量名与方法名（Rename）</strong></td><td align="center">Shift + F6</td></tr><tr><td align="center">29</td><td align="center"><strong>大写转小写/小写转大写（Toggle Case）</strong></td><td align="center">Ctrl + Shift + U</td></tr><tr><td align="center">30</td><td align="center"><strong>生成构造器/get/set/toString</strong></td><td align="center">Alt + Insert</td></tr><tr><td align="center">31</td><td align="center"><strong>查看文档说明(Quick Documentation)</strong></td><td align="center">Ctlrl + Q</td></tr><tr><td align="center">32</td><td align="center"><strong>收起所有的方法(Collapse All)</strong></td><td align="center">Ctrl + Shift + 减号</td></tr><tr><td align="center">33</td><td align="center"><strong>打开所有方法(Expand All)</strong></td><td align="center">Ctrl + Shift + 加号</td></tr><tr><td align="center">34</td><td align="center"><strong>打开代码所在硬盘文件夹(show in explorer)</strong></td><td align="center">需要自己设置</td></tr><tr><td align="center">35</td><td align="center"><strong>生成 try-catch 等(Surround With)</strong></td><td align="center">Ctrl + Alt + T</td></tr><tr><td align="center">36</td><td align="center"><strong>局部变量抽取为成员变量(Introduce Field)</strong></td><td align="center">Ctrl + Alt + F</td></tr><tr><td align="center">37</td><td align="center"><strong>查找（全局）</strong></td><td align="center">Ctrl + F</td></tr><tr><td align="center">38</td><td align="center"><strong>查找文件</strong></td><td align="center">double Shift</td></tr><tr><td align="center">39</td><td align="center"><strong>查看类的继承结构图(Show UML Diagram)</strong></td><td align="center">Ctrl + Alt + Shift + U</td></tr><tr><td align="center">40</td><td align="center"><strong>查看方法的多层重写结构(Method Hierarchy)</strong></td><td align="center">Ctrl + Shift + H</td></tr><tr><td align="center">41</td><td align="center"><strong>添加到收藏(Add To Favorites）</strong></td><td align="center">需要自己设置</td></tr><tr><td align="center">42</td><td align="center"><strong>抽取方法(Extract Method)</strong></td><td align="center">Ctrl + Alt + M</td></tr><tr><td align="center">43</td><td align="center"><strong>打开最近修改的文件(Recently Files)</strong></td><td align="center">Ctrl + E</td></tr><tr><td align="center">44</td><td align="center"><strong>关闭当前打开的代码栏(Close)</strong></td><td align="center">Ctrl + F4</td></tr><tr><td align="center">45</td><td align="center"><strong>关闭打开的所有代码栏(close all)</strong></td><td align="center">需要自己设置</td></tr><tr><td align="center">46</td><td align="center"><strong>快速搜索类中的错误(next highlighted error)</strong></td><td align="center">F2</td></tr><tr><td align="center">47</td><td align="center"><strong>选择要粘贴的内容(Show in Explorer)</strong></td><td align="center">Ctrl + Alt + Shift + E</td></tr><tr><td align="center">48</td><td align="center"><strong>查找方法在哪里被调用(Call Hierarchy)</strong></td><td align="center">Ctrl + Alt + H</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Http网络协议包</title>
    <link href="/2021/09/13/JavaWeb-2021-09-13-Http%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%8C%85/"/>
    <url>/2021/09/13/JavaWeb-2021-09-13-Http%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一、网络协议包："><a href="#一、网络协议包：" class="headerlink" title="一、网络协议包："></a>一、网络协议包：</h3><ol><li>在网络中传递信息都是以 ==二进制== 形式存在的。</li><li>接收方【浏览器/服务器】在接收信息后，要做第一件事就是将【二进制数据】进行编译【文字，图片，视频，命令】</li><li>传递信息数据量往往比较巨大，导致接收方很难在一组连续二进制得到对应数据</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">比如 浏览器发送一个请求： http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">100.2</span>:<span class="hljs-number">8080</span>/index.html<br>这个请求信息以二进制形式发送 <span class="hljs-number">01010101010110101010101101010</span><br>Http服务器很难从二进制数据得到相关信息<br></code></pre></td></tr></table></figure><ol start="4"><li>==网络协议包是一组有规律二进制数据，在这组数据存在提供了一些固定空间。==每一个空间专门存放特定信息，这样接收方在接收网络协议包之后 就可以到固定空间得到对应信息，网络协议包出现极大降低了接收方对接收二进制数据编译难度</li></ol><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">如：<br>【<span class="hljs-number">0000</span>（<span class="hljs-built_in">ip</span>地址）<span class="hljs-number">0000</span>（端口号）<span class="hljs-number">0000</span>（资源文件名）<span class="hljs-number">0000</span>】<br></code></pre></td></tr></table></figure><h3 id="二、常见的网络协议："><a href="#二、常见的网络协议：" class="headerlink" title="二、常见的网络协议："></a>二、常见的网络协议：</h3><ol><li><strong>FTP 网络协议包</strong></li><li><strong>Http 网络协议包</strong></li></ol><h3 id="三、Http-网络协议包："><a href="#三、Http-网络协议包：" class="headerlink" title="三、Http 网络协议包："></a>三、Http 网络协议包：</h3><blockquote><p><strong>在基于B/S结构下互联网通信过程中，所有在网络中传递信息都是保存在Http网络协议包。</strong></p></blockquote><p>分类：</p><ul><li>Http 请求协议包</li><li>Http 相应协议包</li></ul><h3 id="四、Http-请求协议包"><a href="#四、Http-请求协议包" class="headerlink" title="四、Http 请求协议包"></a>四、Http 请求协议包</h3><blockquote><p><strong>在浏览器准备发送请求时，负责创建一个Http请求协议包，浏览器将请求信息以二进制形式保存在Http请求协议包中的各个空间，由浏览器负责将Http请求协议包推送到指定服务端计算机</strong></p></blockquote><p><strong>Http 请求协议包按照自上而下划分，分为4个空间：</strong></p><ul><li>请求行：<ul><li>url:请求地址（<a href="http://192.168.100.2:8080/index.html%EF%BC%89">http://192.168.100.2:8080/index.html）</a></li><li> method:请求方式（POST/GET）</li></ul></li><li> 请求头：</li><li>请求参数信息【<strong>如果使用 GET 请求方式</strong>】</li><li>空白行：<ul><li>没有任何内容，起到隔离作用</li></ul></li><li> 请求体：</li><li>请求参数信息【<strong>如果使用 POST 请求方式</strong>】</li></ul><h3 id="五、Http-响应协议包"><a href="#五、Http-响应协议包" class="headerlink" title="五、Http 响应协议包"></a><strong>五、Http 响应协议包</strong></h3><blockquote><p><strong>Http服务器在定位到被访问的资源文件之后。负责创建一个Http响应协议包。</strong><br><strong>Http服务器将定位文件内容或则文件命令以二进制形式写入到Http响应协议包各个空间。</strong><br><strong>由Http服务器负责将Http响应协议包推送回发起请求的浏览器上。</strong></p></blockquote><p><strong>Http 相应协议包按照自上而下划分，分为4个空间：</strong></p><ul><li><p> 状态行：</p></li><li><p>Http 状态码</p></li><li><p>响应头：</p><ul><li>content-type: 指定浏览器采用对应编译器，对响应体二进制数据进行解析</li></ul></li><li><p>空白行：</p><ul><li>没有任何内容，起到隔离作用</li></ul></li><li><p>响应体：</p><ul><li>可能被访问<strong>静态资源文件内容</strong></li><li>可能被访问的<strong>静态资源文件命令</strong></li><li>可能被访问的<strong>动态资源文件运行结果</strong></li><li>==都是以二进制形式==        </li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EL表达式</title>
    <link href="/2021/09/13/JavaWeb-2021-09-13-EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2021/09/13/JavaWeb-2021-09-13-EL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一、第一章EL工具包介绍"><a href="#一、第一章EL工具包介绍" class="headerlink" title="一、第一章EL工具包介绍"></a>一、第一章EL工具包介绍</h3><ul><li>由 Java 技术开发的一个 jar 包。</li><li>作用是降低 JSP 文件开发时 Java 命令的开发强度。</li><li>Tomcat 服务器本身自带了 EL 工具包，位置是 <code>D:\Environmental\Tomcat\apache-tomcat-9.0.41\lib\el-api.jar</code></li></ul><h3 id="二、传统-JSP-文件主要的开发步骤"><a href="#二、传统-JSP-文件主要的开发步骤" class="headerlink" title="二、传统 JSP 文件主要的开发步骤"></a>二、传统 JSP 文件主要的开发步骤</h3><ul><li>第一步：从指定的作用域对象中读取处理结果。</li><li>第二步：将得到的数据进行类型的强转。</li><li>第三步：将转换后的数据写入响应体中，进行输出。</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--第一步：从指定的作用域对象中读取处理结果。--&gt;<br>&lt;%<br><span class="hljs-comment">// 第二步：将得到的数据进行类型的强转。</span><br>String value = (String) request.getAttribute(<span class="hljs-string">&quot;key&quot;</span>);<br>%&gt;<br>&lt;!--第三步：将转换后的数据写入响应体中，进行输出。--&gt;<br>value是：&lt;%=value%&gt;<br></code></pre></td></tr></table></figure><h3 id="三、EL-表达式"><a href="#三、EL-表达式" class="headerlink" title="三、EL 表达式"></a>三、EL 表达式</h3><ol><li>命令格式：  <code>$&#123;作用域对象别名.共享数据名&#125;</code></li><li>命令作用：  <ul><li>EL 表达式是 EL 工具包提供一种<strong>特殊命令格式</strong>【表达式命令格式】。</li><li>EL 表达式在 JSP 文件上使用。</li><li>负责在 JSP 文件上从作用域对象读取指定的共享数据并输出到响应体。</li></ul></li></ol><h3 id="四、EL-表达式作用域对象别名"><a href="#四、EL-表达式作用域对象别名" class="headerlink" title="四、EL 表达式作用域对象别名"></a>四、EL 表达式作用域对象别名</h3><p><strong>JSP 文件中可以使用的作用域对象：</strong></p><ul><li><code>ServletContext application</code>（<strong>全局作用域对象</strong>）</li><li><code>HttpSession session</code>（<strong>会话作用域对象</strong>）</li><li><code>HttpServletRequest request</code>（<strong>请求作用域对象</strong>）</li><li><code>PageContext pageContext</code>（<strong>当前页作用域对象</strong>）</li></ul><blockquote><ol><li><p>当前页作用域对象，这是JSP文件独有的作用域对象。Servlet 中不存在。</p></li><li><p>在当前页作用域对象存放的共享数据 <strong>仅能在当前JSP文件中使用</strong> ，不能共享给其他Servlet或则其他JSP文件。</p></li><li><p>真实开发过程，主要用于 <code>JSTL</code> 标签与 JSP 文件之间数据共享数据。<br> <code>JSTL-------&gt;pageContext----&gt;JSP</code></p></li></ol></blockquote><p><strong>EL 表达式中作用域对象的别名</strong></p><table><thead><tr><th align="center">作用域对象</th><th align="center">别名</th></tr></thead><tbody><tr><td align="center">application</td><td align="center">applicationScope</td></tr><tr><td align="center">session</td><td align="center">sessionScope</td></tr><tr><td align="center">request</td><td align="center">requestScope</td></tr><tr><td align="center">pageContext</td><td align="center">pageScope</td></tr></tbody></table><h3 id="五、EL表达式将引用对象属性写入到响应体"><a href="#五、EL表达式将引用对象属性写入到响应体" class="headerlink" title="五、EL表达式将引用对象属性写入到响应体"></a>五、EL表达式将引用对象属性写入到响应体</h3><ol><li><p><strong>命令格式：</strong> <code>$&#123;作用域对象别名.共享数据名.属性名&#125;</code></p></li><li><p><strong>命令作用：</strong> 从作用域对象读取指定共享数据关联的引用对象的属性值。并自动将属性的结果写入到响应体</p></li><li><p>EL 表达式没有提供遍历集合方法，因此无法从作用域对象读取集合内容输出。</p></li></ol><h3 id="六、EL表达式简化版"><a href="#六、EL表达式简化版" class="headerlink" title="六、EL表达式简化版"></a>六、EL表达式简化版</h3><ol><li><p><strong>命令格式：</strong> <code>$&#123;共享数据名&#125;</code></p></li><li><p><strong>命令作用：</strong> EL表达式允许开发人员开发时<strong>省略作用域对象别名</strong>。</p></li><li><p><strong>工作原理：</strong></p><p>首先到【<code>pageContext</code>】定位共享数据，如果存在直接读取输出并结束执行。</p><p>如果在【pageContext】没有定位成功，到【<code>request</code>】定位共享数据，如果存在直接读取输出并结束执行。</p><p>如果在【request】没有定位成功，到【<code>session</code>】定位共享数据，如果存在直接读取输出并结束执行。</p><p>如果在【session】没有定位成功，到【<code>application</code>】定位共享数据，如果存在直接读取输出并结束执行。</p><p>如果在【application】没有定位成功，返回<code>null</code>。</p><p><code>pageContext---&gt;request---&gt;session---&gt;application</code></p></li><li><p><strong>存在隐患：</strong></p><ul><li>容易降低程序执行速度【南辕北辙】</li><li>容易导致数据定位错误</li></ul></li><li><p><strong>应用场景：</strong>   设计目的，就是<strong>简化从 pageContext 读取共享数据</strong>并输出难度。</p></li><li><p><strong>EL表达式简化版尽管存在很多隐患，但是在实际开发过程中，开发人员为了节省时间，一般都使用简化版，拒绝使用标准版。</strong></p></li></ol><h3 id="七、EL表达式—–支持运算表达式"><a href="#七、EL表达式—–支持运算表达式" class="headerlink" title="七、EL表达式—–支持运算表达式"></a>七、EL表达式—–支持运算表达式</h3><p><strong>在 JSP 文件有时需要将读取共享数据进行一番运算之后，将运算结果写入到响应体。</strong></p><p>==运算表达式：==</p><ol><li><strong>数学运算：</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// OneServlet.java</span><br><span class="hljs-meta">@WebServlet(name = &quot;OneServlet&quot;, urlPatterns = &quot;/one&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OneServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        ServletContext application = request.getServletContext();<br>        application.setAttribute(<span class="hljs-string">&quot;key1&quot;</span>, <span class="hljs-string">&quot;25&quot;</span>);<br>        application.setAttribute(<span class="hljs-string">&quot;key2&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>);<br>        <span class="hljs-comment">// 请求转发</span><br>        request.getRequestDispatcher(<span class="hljs-string">&quot;/index_1.jsp&quot;</span>).forward(request, response);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;!--index_1.jsp--&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;!--出现了 “+” ，会自动将其他类型转换为 数字类型--&gt;<br>两数之和为：$&#123;key1 + key2&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>关系运算：</strong></li></ol><table><thead><tr><th align="center">关系运算符</th><th align="center">EL 表达式中的代号</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">gt</td></tr><tr><td align="center">&gt;=</td><td align="center">ge</td></tr><tr><td align="center">&lt;</td><td align="center">lt</td></tr><tr><td align="center">&lt;=</td><td align="center">le</td></tr><tr><td align="center">==</td><td align="center">eq</td></tr><tr><td align="center">!=</td><td align="center">!=</td></tr></tbody></table><ol start="3"><li><strong>逻辑运算：</strong>  &amp;&amp;   ||    ！</li></ol><h3 id="八、EL表达式提供内置对象"><a href="#八、EL表达式提供内置对象" class="headerlink" title="八、EL表达式提供内置对象"></a>八、EL表达式提供内置对象</h3><ul><li><p>==<strong>命令格式: ${param.请求参数名}</strong>==</p><p>命令作用：通过请求对象读取当前其请求包中的请求参数内容，并将请求参数内容写入到相应体中。</p></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsp">index.jsp<br>&lt;!--发送请求：  Http:<span class="hljs-comment">//localhost:8080/myWeb/index.jsp?userName=mike&amp;password=123--&gt;</span><br>userName=$&#123;param.userName&#125;<br>password=$&#123;param.password&#125;<br></code></pre></td></tr></table></figure><ul><li><p>==<strong>命令格式：${paramValues.请求参数名[下标]}</strong>==</p><p>命令作用：如果浏览器发送的请求参数是<strong>一个请求参数关联多个值</strong>，此时可以通过<code>paramVaues</code> 读取请求参数下指定位置的值并写入到响应体。</p></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">index.jsp<br>&lt;!--http:<span class="hljs-comment">//localhost:8080/myWeb/index_2.jsp?pageNo=1&amp;pageNo=2&amp;pageNo=3--&gt;</span><br>pageNo01=$&#123;paramValues.pageNo[<span class="hljs-number">0</span>]&#125;&lt;!--输出：pageNo01=<span class="hljs-number">1</span>--&gt;<br>pageNo02=$&#123;paramValues.pageNo[<span class="hljs-number">1</span>]&#125;&lt;!--输出：pageNo02=<span class="hljs-number">2</span>--&gt;<br>pageNo03=$&#123;paramValues.pageNo[<span class="hljs-number">2</span>]&#125;&lt;!--输出：pageNo03=<span class="hljs-number">3</span>--&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC</title>
    <link href="/2021/09/13/SSM%E6%A1%86%E6%9E%B6-2021-09-13-SpringMVC/"/>
    <url>/2021/09/13/SSM%E6%A1%86%E6%9E%B6-2021-09-13-SpringMVC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-SpringMVC-概述"><a href="#1-SpringMVC-概述" class="headerlink" title="1. SpringMVC 概述"></a>1. SpringMVC 概述</h2><h3 id="1-1-SpringMVC-简介"><a href="#1-1-SpringMVC-简介" class="headerlink" title="1.1 SpringMVC 简介"></a>1.1 SpringMVC 简介</h3><blockquote><p>SpringMVC 是一个基于Java 的实现了 MVC 设计模式的请求驱动类型的轻量级 Web 框架，通过把 Model，View，Controller 分离，将 web 层进行职责解耦，把复杂的 web 应用分成逻辑清晰的几部分，简化开发，减少出错，方便组内开发人员之间的配合。</p></blockquote><ul><li><strong>Model（模型）</strong>：数据模型，<strong>提供要展示的数据</strong>。</li><li><strong>VIew（视图）</strong>：为用户呈现数据的<strong>页面</strong>。</li><li><strong>Controller（控制器）</strong>：接受用户请求，调用业务逻辑层产生合适的数据（Model），同时传递数据给视图层（View）呈现给用户，也就是说控制器做了个<strong>调度员</strong>的工作。</li></ul><h3 id="1-2-SpringMVC-优点"><a href="#1-2-SpringMVC-优点" class="headerlink" title="1.2 SpringMVC 优点"></a>1.2 SpringMVC 优点</h3><ul><li>基于 MVC 架构，功能分工明确，解耦合。</li><li>容易理解，上手快，使用简单。</li><li>作 为 Spring 框 架 一 部 分 ， 能 够 使 用 Spring 的 IoC 和 Aop 。 方 便 整 合 Strtus，MyBatis，Hiberate，JPA 等其他框架。</li><li>SpringMVC 强化注解的使用，在控制器，Service，Dao 都可以使用注解，方便灵活。</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等。</li></ul><h2 id="2-第一个-SpringMVC-项目"><a href="#2-第一个-SpringMVC-项目" class="headerlink" title="2. 第一个 SpringMVC 项目"></a>2. 第一个 SpringMVC 项目</h2><p><strong>Step00</strong>：创建 Maven 管理的 JavaWeb 项目，添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- servlet 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- jsp 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- springmvc 依赖，包含了 spring 核心依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210717/image.4mmxodccz4i0.png" alt="依赖列表"></p><p><strong>Step01：在 web.xml 文件中注册中央调度器 DispatcherServlet</strong></p><p>DispatcherServlet 对象在创建过程中会创建出 SpringMVC 容器对象，并将容器放入上下文域对象中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">DispatcherServlet 在 init() 中 &#123;<br>    <span class="hljs-comment">//创建容器，读取配置文件</span><br>    WebApplicationContext ctx = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;springmvc.xml&quot;</span>);<br>    <span class="hljs-comment">//把容器对象放入到 ServletContext 中</span><br>    getServletContext().setAttribute(key, ctx);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 注册中央调度器 DispatcherServlet --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 指定初始化是加载配置文件的路径 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>关于 <code>&lt;init-param&gt;</code> 标签：DispatcherServlet 初始化是会读取 SpringMVC 配置文件，文件的默认路径是 /WEB-INF/当前servlet的name-servlet.xml（当前即为：/WEB-INF/springmvc-servlet.xml），因此我们需要更改这个默认路径。</p><p>关于 <code>&lt;load-on-startup&gt;</code> 标签：DispatcherServlet 初始化需要在 Tomcat 启动后就创建，load-on-startup 表示 tomcat 启动后创建对象的顺序，值是一个大于等于 0 的整数，数值越小，tomcat 创建对象的时机越早。</p><p>关于 <code>&lt;url-pattern&gt; </code> 标签：可以使用两种值</p><ol><li>使用扩展名方式， 语法 *.xxxx , xxxx是自定义的扩展名。 常用的方式 *.do, *.action, *.mvc 等等</li><li>“/“，匹配所有的请求（不包括.jsp）；”/*“ 匹配所有的请求；（包括.jsp）[解释](###5.5 详细了解 url-pattern )</li></ol><p><strong>Step02：编写处理器 Handler</strong></p><p>编写一个类，继承 Controller 接口，实现 handleRequest() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">handleRequest</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">// 1.接受数据</span><br>        <span class="hljs-comment">// 2.处理数据</span><br>        <span class="hljs-comment">// 3.封装数据</span><br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        <span class="hljs-comment">// 指定数据</span><br>        modelAndView.addObject(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;Hello SpringMVC&quot;</span>);<br>        <span class="hljs-comment">// 指定视图（因为之后会在配置文件中视图解析器，所以这里直接写上视图名称即可）</span><br>        <span class="hljs-comment">// 框架会使用视图解析器中的指定的 前缀 + 视图名称 + 后缀，拼接出完整路径</span><br>        modelAndView.setViewName(<span class="hljs-string">&quot;hello&quot;</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">            4、返回结果</span><br><span class="hljs-comment">            之后会将数据一个个放入 request 域中，即 request.setAttribute(key, value);</span><br><span class="hljs-comment">            将视图请求转发，即 request.getRequestDispatcher(&quot;路径&quot;).forward(request, response);</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ModelAndView</code>：表示本次请求的处理结果</p><ul><li>Model：数据，请求处理完成之后，要显示给用户的数据</li><li>View：视图，响应的页面，如 jsp 等</li></ul><p><strong>Step03：创建 SpringMVC 配置文件 springmvc.xml</strong></p><p>在 springmvc.xml 文件中配置 Handler，处理器映射器，处理器适配器，以及视图解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置 Handler --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;/hello.do&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.controller.HelloController&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置处理器映射器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置处理器适配器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 声明视图解析器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置前缀：视图文件的路径，注意路径前后都有 / --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/view/&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置后缀：视图文件的扩展名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>注：处理器映射器，处理器适配器，以及视图解析器也可以不创建，SpringMVC 给我们提供了一个 DispatcherServlet.properties 文件。系统会首先加载这里面的配置，如果我们没有配置，那么就默认使用这个文件的配置；如果我们配置了，那么就优先使用我们手动配置的。</p><p>处理器适配器默认：org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter</p><p>处理器映射器默认：org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping</p><p>视图解析器默认：org.springframework.web.servlet.view.InternalResourceViewResolver</p></blockquote><p><strong>Step04：编写发送请求（index.jsp）和显示请求结果的页面（hello.jsp）</strong></p><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;p&gt;第一个springmvc项目&lt;/p&gt;<br>&lt;p&gt;&lt;a href=<span class="hljs-string">&quot;hello.do&quot;</span>&gt;发起hello.<span class="hljs-keyword">do</span>的请求&lt;/a&gt; &lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>WEB-INF/view/hello.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Hello&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h3&gt;msg数据：$&#123;msg&#125;&lt;/h3&gt;&lt;br/&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><strong>Step05：启动 Tomcat，测试</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210717/image.7csih3e1p980.png" alt="image"></p><p><img src="../../../AppData/Roaming/Typora/typora-user-images/image-20210717165703213.png" alt="image-20210717165703213"></p><p><a href="https://www.cnblogs.com/ysocean/p/7375405.html">详细的其他配置</a></p><h2 id="3-SpringMVC-执行流程"><a href="#3-SpringMVC-执行流程" class="headerlink" title="3. SpringMVC 执行流程"></a>3. SpringMVC 执行流程</h2><h3 id="3-1-SpringMVC-组件及作用"><a href="#3-1-SpringMVC-组件及作用" class="headerlink" title="3.1 SpringMVC 组件及作用"></a>3.1 SpringMVC 组件及作用</h3><ol><li><strong>DispatcherServlet</strong>（中央控制器 / 前端控制器）：在创建时会读取 SpringMVC 配置文件，创建 SpringMVC 容器，作用有接受请求，响应结果，相当于转发器，中央处理器，有 了 DispatcherServlet，减少了其他组件之间的耦合度。</li><li><strong>HandlerMapping</strong>（处理器映射器）：根据请求的 URL，找到对应的 处理器对象（<code>Object handler</code>），并返回处理器执行链对象（<code>HandlerExecutionChain</code>）给 DispatcherServlet。SpringMVC 提供了多种不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</li><li><strong>HandlerExecutionChain</strong>：处理器执行链，保存了处理器引射器找到的处理器对象（<code>Object handler</code>），和项目中的有拦截器，以集合方式保存（<code>List&lt;HandlerInterceptor&gt; interceptorList</code>）。</li><li><strong>HandlerAdapter</strong>（处理器适配器）：将各种 Controller 适配成 DispatcherServlet 可以使用的 Handler，通过特定规则（HandlerAdapter 要求的规则）去执行 Handler。通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</li><li><strong>Handler</strong>（处理器 / 控制器）：<strong>需要程序员编写</strong>，编写 Handler 时需要按照 HandlerAdapter 的要求去做，这样HandlerAdapter 才可以正确执行 Handler。Handler 是继 DispatcherServlet 前端控制器的<strong>后台控制器</strong>，在DispatcherServlet 控制下对用户请求进行处理，Handler 涉及业务需求，所以需要工程师针对用户需求进行开发，最终返回业务数据。</li><li><strong>ViewResolver</strong>（视图解析器）：进行视图解析，根据逻辑视图名解析成真正的视图 View。ViewResolver 负责将处理结果生成 View 视图，ViewResolver 首先根据逻辑视图名解析成具体的<strong>页面地址</strong>，然后对 <strong>View 进行渲染</strong>，将处理结果通过页面展示给用户。SpringMVC 提供了很多类型 View 视图，包括：jstlView、freemarkerView、pdfView、jsp、html 等。</li><li><strong>View</strong>（视图）：<strong>需要程序员编写</strong>，View 是一个接口，实现类支持不同的类型（jsp、html、freemarker、pdf等）</li></ol><h3 id="3-2-SpringMVC执行流程"><a href="#3-2-SpringMVC执行流程" class="headerlink" title="3.2 SpringMVC执行流程"></a>3.2 SpringMVC执行流程</h3><p>（1）用户发送请求至前端控制器 DispatcherServlet。</p><p>（2）DispatcherServlet 收到请求之后，调用处理器映射器 HandlerMapping，请求获取 Handler。</p><p>（3）处理器映射器根据请求的 URI 找到具体的处理器 Handler， 生成处理器对象及处理器拦截器（如果有则生成），一并返回到 DispatcherServlet。</p><p>（4）DispatcherServlet 调用处理器适配器 HandlerAdapter，请求执行 Handler。</p><p>（5）HandlerAdapter 进过适配调用，具体处理器 Handler 开始处理业务逻辑。</p><p>（6）Handler 执行完成返回 ModelAndView 对象到 HandlerAdapter。</p><p>（7）HandlerAdapter 将 Handler 的执行结果 ModelAndView 返回到 DispatcherServlet。</p><p>（8）DispatcherServlet 将 ModelAndView 传给视图解析器 ViewResolve 进行解析。</p><p>（9）ViewResolve 解析 ModelAndView 后将具体的 View 对象返回给 DispatcherServlet。</p><p>（10）DispatcherServlet 对返回的 View 进行渲染视图，即将模型数据填充值视图。</p><p>（11）DispatcherServlet 将视图响应给用户。</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210717/20180708224853769.4o539igoso40.png" alt="20180708224853769"></p><p><img src="../../../AppData/Roaming/Typora/typora-user-images/image-20210717172929063.png" alt="image-20210717172929063"></p><p>上图来源于  <a href="http://www.coderead.cn/p/spring/map/file/Mvc%E6%97%B6%E5%BA%8F%E5%9B%BE.svg">源码阅读网</a></p><h2 id="4-使用注解简化开发"><a href="#4-使用注解简化开发" class="headerlink" title="4. 使用注解简化开发"></a>4. 使用注解简化开发</h2><p>虽然通过 SpringMVC 已经简化了一部分的开发，但是还不够，比如每次发送一个请求都要在后台对应创建一个控制器，还要在 springmvc 配置文件中配置请求路径，将控制器注册到容器中，这还是不方便，于是注解式开发出现了。</p><p>所谓 SpringMVC 的注解式开发是指，在代码中通过对类与方法的注解，便可完成处理器在 springmvc 容器的注册。注解式开发是重点。</p><p>web.xml 与之前没有差别</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 注册中央调度器 DispatcherServlet --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改配置文件 springmvc.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 开启注解扫描 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;cn.yechen.controller&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 声明视图解析器，帮助开发人员设置视图文件的路径 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置前缀：视图文件的路径，注意路径前后都有 / --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/view/&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置后缀：视图文件的扩展名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改处理器类，使用 <code>@Controller</code> 注解，将类配置到 springmvc 容器中</p><p>使用 <code>@RequestMapping</code> 注解指定请求 URI 路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    @Controller 创建处理器对象（声明 bean），对象放在 springmvc 容器中，可以处理请求</span><br><span class="hljs-comment">    能处理请求的都是控制器（处理器），MyController 能处器理请求，叫做后端控制器（back controller）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        自定义方法处理用户提交的请求（类似 Servlet 中的 doGet, doPost 方法）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        @RequestMapping 为请求映射，value 属性是是请求的 uri 地址，是一个数组，可以对应多个请求地址</span><br><span class="hljs-comment">        作用是将请求地址和对应处理方法绑定在一起，一个请求指定一方法，一个方法可以有多个请求</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@RequestMapping(value = &#123;&quot;/some.do&quot;&#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doSome</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 1.接受数据</span><br>        <span class="hljs-comment">// 2.处理数据</span><br>        <span class="hljs-comment">// 3.封装数据</span><br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        <span class="hljs-comment">// 指定数据</span><br>        modelAndView.addObject(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;Hello SpringMVC Annotations&quot;</span>);<br>        modelAndView.addObject(<span class="hljs-string">&quot;fun&quot;</span>, <span class="hljs-string">&quot;执行 doSome 方法&quot;</span>);<br>        <span class="hljs-comment">// 指定视图</span><br>        modelAndView.setViewName(<span class="hljs-string">&quot;some&quot;</span>)；<br>        <span class="hljs-comment">// 4.返回结果    </span><br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br><br>    <span class="hljs-comment">// 处理另外的请求</span><br>    <span class="hljs-meta">@RequestMapping(value = &#123;&quot;/other.do&quot;,&quot;/second.do&quot;&#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doOther</span><span class="hljs-params">()</span></span>&#123;<br>        ModelAndView mv  = <span class="hljs-keyword">new</span> ModelAndView();<br>        mv.addObject(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;====Hello SpringMVC Annotations====&quot;</span>);<br>        mv.addObject(<span class="hljs-string">&quot;fun&quot;</span>,<span class="hljs-string">&quot;执行的是 doOther 方法&quot;</span>);<br>        mv.setViewName(<span class="hljs-string">&quot;other&quot;</span>);<br>        <span class="hljs-keyword">return</span> mv;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>请求页 index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;p&gt;第一个springmvc项目&lt;/p&gt;<br>    &lt;p&gt;&lt;a href=<span class="hljs-string">&quot;some.do&quot;</span>&gt;发起some.<span class="hljs-keyword">do</span>的请求&lt;/a&gt; &lt;/p&gt;<br>    &lt;p&gt;&lt;a href=<span class="hljs-string">&quot;other.do&quot;</span>&gt;发起other.<span class="hljs-keyword">do</span>的请求&lt;/a&gt; &lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>响应页 WEB-INF/view/some.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h3&gt;/WEB-INF/view/some.jsp 从 request 作用域获取数据&lt;/h3&gt;&lt;br/&gt;<br>&lt;h3&gt;msg数据：$&#123;msg&#125;&lt;/h3&gt;&lt;br/&gt;<br>&lt;h3&gt;fun数据：$&#123;fun&#125;&lt;/h3&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>响应页 WEB-INF/view/other.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h3&gt;/WEB-INF/view/other.jsp从request作用域获取数据&lt;/h3&gt;&lt;br/&gt;<br>&lt;h3&gt;msg数据：$&#123;msg&#125;&lt;/h3&gt;&lt;br/&gt;<br>&lt;h3&gt;fun数据：$&#123;fun&#125;&lt;/h3&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>测试：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210717/image.5rftkn8vgb40.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210717/image.1127bfvbfx40.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210717/image.touc8sbtz1c.png" alt="image"></p><h2 id="5-SpringMVC-注解式开发"><a href="#5-SpringMVC-注解式开发" class="headerlink" title="5. SpringMVC 注解式开发"></a>5. SpringMVC 注解式开发</h2><h3 id="5-1-Controller-注解"><a href="#5-1-Controller-注解" class="headerlink" title="5.1 @Controller 注解"></a>5.1 @Controller 注解</h3><p>@Controller 创建处理器对象（声明 bean），对象放在 springmvc 容器中，可以处理请求</p><p>能处理请求的都是控制器（处理器），MyController 能处器理请求，叫做后端控制器（back controller）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCotroller</span> </span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-RequestMapping-注解"><a href="#5-2-RequestMapping-注解" class="headerlink" title="5.2 @RequestMapping 注解"></a>5.2 @RequestMapping 注解</h3><p>通过 <code>@RequestMapping</code>  注解可以定义处理器对于请求的映射规则。</p><p>该注解可以注解在方法上，也可以注解在类上，但意义是不同的。value 属性值常以“/”开始。</p><p><strong>@RequestMapping 的 value 属性用于定义所匹配请求的 URI</strong>。但对于注解在方法上与类上，其 value 属性所指定的 URI，意义是不同的。</p><ul><li>一个 @Controller 所注解的类中，可以定义多个处理器方法。当然，不同的处理器方法所匹配的 URI 是不同的。这些不同的 URI 被指定在注解于方法之上的 @RequestMapping 的 value 属性中。</li><li>但若这些请求具有相同的 URI 部分，则这些相同的 URI，可以被抽取到注解在类之上的@RequestMapping 的 value 属性中。此时的这个 URI 表示模块的名称。</li><li>URI 的请求是相对于 Web 的根目录。换个角度说，要访问处理器的指定方法，必须要在方法指定 URI 之前加上处理器类前定义的模块名称。</li></ul><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    @RequestMapping 放到类上面时，value 表示所有请求地址的公共部分，叫做模块名称</span><br><span class="hljs-comment">    放到方法上时，表示当前请求的具体功能</span><br><span class="hljs-comment">    类上路径和方法上路径组合在一起，就是这个请求路径的 URI 了</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@RequestMapping(value = &quot;/some.do&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doSome</span><span class="hljs-params">()</span> </span>&#123;<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        modelAndView.addObject(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;测试 @RequestMapping&quot;</span>);<br>        modelAndView.addObject(<span class="hljs-string">&quot;method&quot;</span>, <span class="hljs-string">&quot;some.do&quot;</span>);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;show&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>    <br>    <span class="hljs-meta">@RequestMapping(value = &quot;/other.do&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doOther</span><span class="hljs-params">()</span> </span>&#123;<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        modelAndView.addObject(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;测试 @RequestMapping&quot;</span>);<br>        modelAndView.addObject(<span class="hljs-string">&quot;method&quot;</span>, <span class="hljs-string">&quot;other.do&quot;</span>);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;show2&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时需要调用 doSome() 这个方法，请求路径的 URI 就是 /test/some.do 了</p><p><strong>@RequestMapping 还可以指定请求提交的方式</strong></p><p>@RequestMapping 有一个属性 method，表示请求的方式，它的值是 RequestMethod 类的枚举值，可以设置不同的请求方式。以下是 RequestMethod  类源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">RequestMethod</span> </span>&#123;<br>    GET,<br>    HEAD,<br>    POST,<br>    PUT,<br>    PATCH,<br>    DELETE,<br>    OPTIONS,<br>    TRACE;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">RequestMethod</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;<br><br><br>    <span class="hljs-comment">// 当 method 没有设置的时候，请求方式是不受限制的</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/some.do&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doSome</span><span class="hljs-params">()</span> </span>&#123;<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        modelAndView.addObject(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;测试 @RequestMapping&quot;</span>);<br>        modelAndView.addObject(<span class="hljs-string">&quot;method&quot;</span>, <span class="hljs-string">&quot;some.do&quot;</span>);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;show&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br><br>    <span class="hljs-comment">// 指定请求方式是 POST 方式</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/other.do&quot;, method = RequestMethod.POST)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doOther</span><span class="hljs-params">()</span> </span>&#123;<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        modelAndView.addObject(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;测试 @RequestMapping&quot;</span>);<br>        modelAndView.addObject(<span class="hljs-string">&quot;method&quot;</span>, <span class="hljs-string">&quot;other.do&quot;</span>);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;show2&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然 SpringMVC 还提供了一些类似 @RequestMapping 的注解，只是已经指定好了请求方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span><br><span class="hljs-meta">@PostMapping</span><br><span class="hljs-meta">@PutMapping</span><br><span class="hljs-meta">@DeleteMapping</span><br>......<br></code></pre></td></tr></table></figure><h3 id="5-3-处理器方法的参数"><a href="#5-3-处理器方法的参数" class="headerlink" title="5.3 处理器方法的参数"></a>5.3 处理器方法的参数</h3><p>处理器方法可以包含以下四类参数，这些参数会在系统调用时由系统自动赋值，即程序员可在方法内直接使用。</p><ul><li>HttpServletRequest</li><li>HttpServletResponse</li><li>HttpSession</li><li>请求中所携带的请求参数</li></ul><h4 id="5-3-1-接收-HttpServletRequest、HttpServletResponse、HttpSession"><a href="#5-3-1-接收-HttpServletRequest、HttpServletResponse、HttpSession" class="headerlink" title="5.3.1 接收 HttpServletRequest、HttpServletResponse、HttpSession"></a>5.3.1 接收 HttpServletRequest、HttpServletResponse、HttpSession</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParameterController</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        方法形参可以携带</span><br><span class="hljs-comment">            HttpServletRequest、</span><br><span class="hljs-comment">            HttpServletResponse、</span><br><span class="hljs-comment">            HttpSession、</span><br><span class="hljs-comment">            请求中所携带的参数</span><br><span class="hljs-comment">        这些参数会在系统调用时由系统自动赋值，可以在方法上直接使用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// 测试：请求路径 /test/1.do?name=&quot;yechen&quot;</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/1.do&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">test1</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, HttpSession session)</span> </span>&#123;<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        modelAndView.addObject(<span class="hljs-string">&quot;msg&quot;</span>, request.getParameter(<span class="hljs-string">&quot;name&quot;</span>));<br>        modelAndView.setViewName(<span class="hljs-string">&quot;showParameter&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>展示页面 showParameter.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;showParameter&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h2&gt;$&#123;msg&#125;&lt;/h2&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>测试：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210718/image.25g4f3fqj280.png" alt="image"></p><p><img src="../../../AppData/Roaming/Typora/typora-user-images/image-20210718103236296.png" alt="image-20210718103236296"></p><h4 id="5-3-2-逐个接受请求参数"><a href="#5-3-2-逐个接受请求参数" class="headerlink" title="5.3.2 逐个接受请求参数"></a>5.3.2 逐个接受请求参数</h4><p><strong>要求：</strong></p><p>处理器方法的形参名要和请求中参数名一致，同名的请求参数自动赋值给同名的形参如请求路径为 /test/2.do?name=yechen&amp;age=18，方法形参中有 name 属性就赋值 yechen，age 属性就赋值 18</p><p><strong>框架内部接收请求参数过程：</strong></p><ol><li><p>使用 request 对象接收请求参数<br>String strName = request.getParameter(“name”);<br>String strAge = request.getParameter(“age”);</p></li><li><p>SpringMVC 框架通过 DispatcherServlet 调用处理器的对应方法</p><p>调用方法时，按名称对应，把接收的参数赋值给形参<br>doSome（strName，Integer.valueOf(strAge)）<br>框架会提供类型转换的功能，能把 String 转为 int ，long ， float， double 等类型。</p></li></ol><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ParameterController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/2.do&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">test2</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-comment">// 方法内部就可以直接使用这些参数，不用向 servlet 中一样一个个从 request 中获取参数了</span><br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        modelAndView.addObject(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;name = &quot;</span>+name+<span class="hljs-string">&quot;，age = &quot;</span>+age);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;showParameter&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写前端请求表单 index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;index&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;form action=<span class="hljs-string">&quot;test/2.do&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>        &lt;table&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;姓名&lt;/td&gt;<br>                &lt;td&gt; &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span>&gt;&lt;/td&gt;<br>            &lt;/tr&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt; 年龄&lt;/td&gt;<br>                &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;age&quot;</span>&gt;&lt;/td&gt;<br>            &lt;/tr&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;&lt;/td&gt;<br>                &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;&lt;/td&gt;<br>            &lt;/tr&gt;<br>        &lt;/table&gt;<br>    &lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>测试：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210718/image.71278lfemd80.png" alt="image"></p><p><strong>存在的问题1</strong>：在当前表单中没有在 age 栏中填入值，那么 age 的值就是“”，无法转换为方法中设置的 int 类型，就会报出 400 错误，<strong>400状态码是客户端错误， 表示提交请求参数过程中，发生了问题</strong>，这里就是类型转换出错。</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210718/image.dv4ojrgbpow.png" alt="image"></p><p>同时控制台也会出现：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210718/image.5ja79ke4r4w0.png" alt="image"></p><p>解决方法：</p><ol><li>前端判断值，没有填或类型不对都都不能提交。</li><li>处理器方法中 age 类型改为包装类型 Integer 或直接 String</li></ol><p><strong>存在问题2</strong>：当表单提交中存在中文时，并且提交方式为 POST，显示存在乱码。</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210718/image.2w7sfsqukmi0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210718/image.1ec5b821nw68.png" alt="image"></p><p>解决方法：SpringMVC 对于请求参数中中文乱码的问题，给出了专门的字符过滤器 CharacterEncodingFilter，我可以在 web.xml 文件中注册过滤器，来直接使用它。当然也可以自己写一个过滤器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置 SpringMVC 中自带的乱码过滤器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置项目使用的字符编码 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 强制请求对象（HttpServletRequest）使用 encoding 编码的值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceRequestEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 强制响应对象（HttpServletResponse）使用 encoding 编码的值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210718/image.2w7sfsqukmi0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210718/image.1l6lpfbedveo.png" alt="image"></p><p>分析一下 CharacterEncodingFilter 中核心方法</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210718/image.1rq86ljw4f5s.png" alt="image"></p><h4 id="5-3-3-校正请求参数名-RequestParam"><a href="#5-3-3-校正请求参数名-RequestParam" class="headerlink" title="5.3.3 校正请求参数名@RequestParam"></a>5.3.3 校正请求参数名@RequestParam</h4><p>所谓校正请求参数名，是指若请求 URL 所携带的参数名称与处理方法中指定的参数名不相同时，则需在处理方法参数前，添加一个注解 @RequestParam (“请求参数名”)，指定请求 URL 所携带参数的名称。该注解是对处理器方法参数进行修饰的。value 属性指定请求参数的名称。</p><p>@RequestParam 只能使用在逐个接收参数的情况下。</p><p>例如请求页面表单</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;form action=<span class="hljs-string">&quot;test/3.do&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    &lt;table&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;姓名&lt;/td&gt;<br>            &lt;td&gt; &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;userName&quot;</span>&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt; 年龄&lt;/td&gt;<br>            &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;userAge&quot;</span>&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/table&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>处理方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/3.do&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">test3</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>    <span class="hljs-comment">// 方法内部就可以直接使用这些参数，不用向 servlet 中一样一个个从 request 中获取参数了</span><br>    ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>    modelAndView.addObject(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;name = &quot;</span>+name+<span class="hljs-string">&quot;，age = &quot;</span>+age);<br>    modelAndView.setViewName(<span class="hljs-string">&quot;showParameter&quot;</span>);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></td></tr></table></figure><p>但此时请求的参数名方法形参的名称不一致，值是不能赋上的，因此可以使用 @RequestParam 注解在参数前面，value 属性指定请求参数名称，将请求参数和形参一一绑定，这样就可以对应赋值了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/3.do&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">test3</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;userName&quot;)</span> String name, <span class="hljs-meta">@RequestParam(&quot;userAge&quot;)</span> <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>    <span class="hljs-comment">// 方法内部就可以直接使用这些参数，不用向 servlet 中一样一个个从 request 中获取参数了</span><br>    ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>    modelAndView.addObject(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;name = &quot;</span>+name+<span class="hljs-string">&quot;，age = &quot;</span>+age);<br>    modelAndView.setViewName(<span class="hljs-string">&quot;showParameter&quot;</span>);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210718/image.33q672lf3pa0.png" alt="image"></p><p>@RequestParam 还有一个属性 required，是一个 boolean，表示请求中是否一定包包含该参数，默认值是 true，即在请求中一定要包含当前参数，请求参数不存在是，服务器会报出 400  错误。</p><p>当请求参数可以没有时，可以将当前参数的 required 属性设置为 false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/3.do&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">test3</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;userName&quot;, required = false)</span> String name, </span></span><br><span class="hljs-params"><span class="hljs-function">                              <span class="hljs-meta">@RequestParam(value = &quot;userAge&quot;, required = false)</span> <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br><br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="5-3-4-对象参数接收"><a href="#5-3-4-对象参数接收" class="headerlink" title="5.3.4 对象参数接收"></a>5.3.4 对象参数接收</h4><p>当接受的参数很多的时候，在方法中一个个写上形参很麻烦，此时就可以用对象来接收请求参数。</p><p>将处理器方法的参数定义为一个对象，只要保证请求参数名与这个对象的属性同名即可。</p><p>编写请求表单</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsp">对象接收参数<br>&lt;form action=<span class="hljs-string">&quot;test/4.do&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    &lt;table&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;姓名&lt;/td&gt;<br>            &lt;td&gt; &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span>&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt; 年龄&lt;/td&gt;<br>            &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;age&quot;</span>&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt; 邮箱&lt;/td&gt;<br>            &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;email&quot;</span>&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/table&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p>定义一个 vo 类，用来接受参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;User 的无参构造方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        System.out.println(<span class="hljs-string">&quot;User setName() 方法执行&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(Integer age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        System.out.println(<span class="hljs-string">&quot;User setAge() 方法执行&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getEmail</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setEmail</span><span class="hljs-params">(String email)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.email = email;<br>        System.out.println(<span class="hljs-string">&quot;User setEmail() 方法执行&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写处理器方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@RequestMapping(&quot;/4.do&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">test4</span><span class="hljs-params">(User user)</span> </span>&#123;<br>    ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>    modelAndView.addObject(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;name = &quot;</span>+user.getName()+<span class="hljs-string">&quot;，age = &quot;</span>+user.getAge()+<span class="hljs-string">&quot;，email = &quot;</span>+user.getEmail());<br>    modelAndView.setViewName(<span class="hljs-string">&quot;showParameter&quot;</span>);<br>    <span class="hljs-keyword">return</span> modelAndView;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210718/image.4p399yhjp5w0.png" alt="image"></p><p>同时观察控制台</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210718/image.4jv3cholaj20.png" alt="image"></p><p>表明 SpringMVC 在内部会通过 User 类的无参构造方法创建对象，并通过 set 方法为参数一个个赋值。</p><h3 id="5-4-处理器方法的返回值"><a href="#5-4-处理器方法的返回值" class="headerlink" title="5.4 处理器方法的返回值"></a>5.4 处理器方法的返回值</h3><p>使用 @Controller 注解的处理器的处理器方法，其返回值常用的有四种类型：</p><ol><li><p>ModelAndView</p></li><li><p>String</p></li><li><p>无返回值 void</p></li><li><p>返回自定义类型对象</p></li></ol><p>根据不同的情况，使用不同的返回值。</p><h4 id="5-4-1-返回-ModelAndView"><a href="#5-4-1-返回-ModelAndView" class="headerlink" title="5.4.1 返回 ModelAndView"></a>5.4.1 返回 ModelAndView</h4><p>若处理器方法处理完后，<strong>需要跳转到其它资源，且又要在跳转的资源间传递数据</strong>，此时处理器方法返回 ModelAndView 比较好。当然，若要返回 ModelAndView，则处理器方法中需要定义 ModelAndView 对象。</p><p>在使用时，若该处理器方法只是进行跳转而不传递数据，或只是传递数据而并不向任何资源跳转（如对页面的 Ajax 异步响应），此时若返回 ModelAndView，则将总是有一部分多余：要么 Model 多余，要么 View 多余。即此时返回 ModelAndView 将不合适。</p><h4 id="5-4-2-返回-String"><a href="#5-4-2-返回-String" class="headerlink" title="5.4.2 返回 String"></a>5.4.2 返回 String</h4><p>返回的字符串可以指定要转发的逻辑视图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/test1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 直接返回逻辑视图的名称（因为在配置文件中已经配置好了视图解析器）</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;show1&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接返回逻辑视图名称前提是在 springmvc 配置文件中配置了视图解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/view/&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当然不指定视图解析器，方法中就要返回视图的路径了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/test1&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/WEB-INF/view/show1.jsp&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>show1.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;show1&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>返回值为 String 的处理器方法跳转到 show1.jsp<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>测试：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210718/image.2gxh357andc0.png" alt="image"></p><p>当然如果跳转的页面需要处理器方法传递值，可以在方法中使用 HttpServletRequest 对象，将数据保存在 request 域对象中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test2&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test2</span><span class="hljs-params">(HttpServletRequest request, String name)</span> </span>&#123;<br>    <span class="hljs-comment">// 传递参数</span><br>    request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;从前端传递过来的参数：&quot;</span>+name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;show2&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>show2.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;show2&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h2&gt;$&#123;msg&#125;&lt;/h2&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210718/image.1il5s5i6c6dc.png" alt="image"></p><h4 id="5-4-3-无返回值-void"><a href="#5-4-3-无返回值-void" class="headerlink" title="5.4.3 无返回值 void"></a>5.4.3 无返回值 void</h4><p>对于处理器方法返回 void 的应用场景，AJAX 响应.</p><p>若处理器对请求处理后，<strong>无需跳转到其它任何资源</strong>，此时可以让处理器方法返回 void。</p><p>使用 AJAX 异步请求：</p><p><strong>step0：导入 jackson 依赖，引入 jquery</strong> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引入 jquery</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%-- 引入 jquery --%&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;http://code.jquery.com/jquery-1.11.1.min.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>step1：编写请求页面 index.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> %&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;AJAX&lt;/title&gt;<br>    &lt;!-- 引入 jquery --&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;http://code.jquery.com/jquery-1.11.1.min.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        $(function () &#123;<br>            $(<span class="hljs-string">&quot;#ajaxBtn&quot;</span>).click(function () &#123;<br>                $.ajax(&#123;<br>                    url : <span class="hljs-string">&quot;test/test3&quot;</span>,<br>                    data : &#123;<br>                        name : <span class="hljs-string">&quot;yechen&quot;</span>,<br>                        age : <span class="hljs-string">&quot;20&quot;</span><br>                    &#125;,<br>                    type : <span class="hljs-string">&quot;get&quot;</span>,<br>                    dataType : <span class="hljs-string">&quot;json&quot;</span>,<br>                    success : function (data) &#123;<br>                        alert(<span class="hljs-string">&quot;data = &#123;name = &quot;</span>+data.name+<span class="hljs-string">&quot;, age = &quot;</span>+data.age+<span class="hljs-string">&quot;&#125;&quot;</span>)<br>                    &#125;<br>                &#125;)<br>            &#125;)<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;!-- 发送 AJAX 请求的按钮 --&gt;<br>    &lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;发起ajax请求&quot;</span> id=<span class="hljs-string">&quot;ajaxBtn&quot;</span>&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><strong>step2：编写处理器方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test3&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">(User user, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>    <span class="hljs-comment">// 将获取的 User 对象转成 json 字符串</span><br>    ObjectMapper objectMapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>    String json = objectMapper.writeValueAsString(user);<br><br>    <span class="hljs-comment">// 使用 response 输出数据到浏览器</span><br>    PrintWriter writer = response.getWriter();<br>    writer.println(json);<br>    writer.flush();<br>    writer.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>step3：运行测试</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210718/image.785m78x4w5s0.png" alt="image"></p><h4 id="5-4-4-返回对象-Object"><a href="#5-4-4-返回对象-Object" class="headerlink" title="5.4.4 返回对象 Object"></a>5.4.4 返回对象 Object</h4><p>处理器方法也可以返回 Object 对象。这个 Object 可以是 Integer，String，自定义对象，Map，List 等。但返回的对象不是作为逻辑视图出现的，而是作为直接在页面<strong>显示的数据出现</strong>的。</p><p>相当于将我们之间无返回的方法中的步骤全部省略，对象转为 json 字符串、使用 response 输出数据到浏览器这些都由框架内部完成了，我们只要返回处理好的对象就行。于是对于上一个例子，处理器方法就能简化为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test4&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">test4</span><span class="hljs-params">(User user)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> user;<br>&#125;<br></code></pre></td></tr></table></figure><p>将 Object 数据转化为 JSON 数据，需要由消息转换器 <code>HttpMessageConverter</code> 完成。而转换器的开启，需要由 <code>&lt;mvc:annotation-driven/&gt;</code>来完成。</p><p>而将 JSON 数据返回浏览器，需要使用 <code>@ResponseBody</code> 注解，将转换后的 JSON 数据放入到响应体中。</p><p><strong>内部原理</strong>：</p><p><code>&lt;mvc:annotation-driven/&gt;</code> 注解驱动实现的功能是：完成 Java 对象到 JSON、XML、text、二进制等数据格式的转换。具体功能是由 <code>HttpMessageConverter</code>（消息转换器）接口的具体实现类来处理数据的。</p><p><code>HttpMessageConverter</code> 中定义了 Java 对象转为 JSON、XML 等数据格式的方法，并且有许多实现类，分别完成不同的类型转换。</p><p>其中有方法就是用来判断 Java 对象是否可以装换成指定的数据，有方法用来完成数据转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 指示此转换器是否可以写入给定的类。</span><br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">canWrite</span><span class="hljs-params">(Class&lt;?&gt; clazz, <span class="hljs-meta">@Nullable</span> MediaType mediaType)</span></span>;<br><br><span class="hljs-comment">// 将给定的对象写入给定的输出消息</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(T t, <span class="hljs-meta">@Nullable</span> MediaType contentType, HttpOutputMessage outputMessage)</span></span><br><span class="hljs-function"><span class="hljs-keyword">throws</span> IOException, HttpMessageNotWritableException</span>;<br></code></pre></td></tr></table></figure><p><code>&lt;mvc:annotation-driven/&gt;</code> 在配置文件中指定后，在容器初始化时，会自动创建八个 HttpMessageConverter 的实现，来实现不同数据的转换。具体八个实现类如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210718/image.6rsb5ai47qo0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210718/image.2t9xvqxti520.png" alt="image"></p><p><code>MappingJackson2HttpMessageConverter</code> 类是我们经常使用到的，是使用了 Jackson 工具来将 Java 对象转换为 JSON 格式字符串的。</p><p><code>@ResponseBody</code> 注解放在处理器方法的上方，通过 HttpServletResponse 输出数据，响应 AJAX 请求，其取代的就是之间的响应数据部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用 response 输出数据到浏览器</span><br>PrintWriter writer = response.getWriter();<br>writer.println(json);<br></code></pre></td></tr></table></figure><h5 id="例子一：返回自定义对象-User"><a href="#例子一：返回自定义对象-User" class="headerlink" title="例子一：返回自定义对象 User"></a><strong>例子一：返回自定义对象 User</strong></h5><p>请求页面 index3.jsp，没有请求参数</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> %&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;AJAX&lt;/title&gt;<br>    &lt;!-- 引入 jquery --&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;http://code.jquery.com/jquery-1.11.1.min.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        $(function () &#123;<br>            $(<span class="hljs-string">&quot;#ajaxBtn&quot;</span>).click(function () &#123;<br>                $.ajax(&#123;<br>                    url : <span class="hljs-string">&quot;object/returnUser&quot;</span>,<br>                    type : <span class="hljs-string">&quot;get&quot;</span>,<br>                    dataType : <span class="hljs-string">&quot;json&quot;</span>,<br>                    success : function (data) &#123;<br>                        alert(<span class="hljs-string">&quot;name = &quot;</span>+data.name+<span class="hljs-string">&quot;, age = &quot;</span>+data.age+<span class="hljs-string">&quot;，email = &quot;</span>+data.email)<br>                    &#125;<br>                &#125;)<br>            &#125;)<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;index3.jsp 发起ajax请求 返回一个 User&quot;</span> id=<span class="hljs-string">&quot;ajaxBtn&quot;</span>&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>springmvc 配置文件中加入注解驱动</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>注意这个注解驱动的限制文件是</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;<br>xsi:schemaLocation=&quot;http://www.springframework.org/schema/mvc<br>        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;<br></code></pre></td></tr></table></figure><p>编写处理器方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/object&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectController</span> </span>&#123;<br><br>    <span class="hljs-comment">// 返回自定义的类 User</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/returnUser&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">UserTest</span><span class="hljs-params">()</span> </span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setName(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        user.setAge(<span class="hljs-number">18</span>);<br>        user.setEmail(<span class="hljs-string">&quot;1234567@qq.com&quot;</span>);<br>        <span class="hljs-comment">// 返回后会被框架转换为 JSON 格式字符串</span><br>        <span class="hljs-keyword">return</span> user;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210718/image.75wrzz03dek0.png" alt="image"></p><p>执行流程：</p><ol><li>框架会把处理器方法返回的 user 对象作为参数，调用容器中生成的 HttpMessageConverter 接口实现类的 canWrite() 方法，由于这些实现类都保存在一个 <code>ArrayLis&lt;HttpMessageConverter&gt;</code> 集合中，因此编历集合即可找到能处理 user 类型数据的实现类，即 <code>MappingJackson2HttpMessageConverter</code></li><li>之后就会调用 <code>MappingJackson2HttpMessageConverter</code> 的 write() 方法，将 user 对象转换为 JSON 字符串，其中就用到了 Jackson 工具。</li><li>最后框架会根据注解 @ResponseBody，将 JSON 字符串输出到浏览器，AJAX 请求处理完成。</li></ol><h5 id="例子二：返回自定义对象列表-List-lt-User-gt"><a href="#例子二：返回自定义对象列表-List-lt-User-gt" class="headerlink" title="例子二：返回自定义对象列表 List&lt;User&gt;"></a><strong>例子二：返回自定义对象列表 List&lt;User&gt;</strong></h5><p>请求页面 index4.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> %&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;AJAX&lt;/title&gt;<br>    &lt;!-- 引入 jquery --&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;http://code.jquery.com/jquery-1.11.1.min.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        $(function () &#123;<br>            $(<span class="hljs-string">&quot;#ajaxBtn&quot;</span>).click(function () &#123;<br>                $.ajax(&#123;<br>                    url : <span class="hljs-string">&quot;object/returnList&quot;</span>,<br>                    type : <span class="hljs-string">&quot;get&quot;</span>,<br>                    dataType : <span class="hljs-string">&quot;json&quot;</span>,<br>                    success : function (data) &#123;<br>                        <span class="hljs-keyword">var</span> msg = <span class="hljs-string">&quot;&quot;</span>;<br>                        <span class="hljs-comment">// 编历 json 数组</span><br>                        $.each(data, function (index, element) &#123;<br>                            msg += <span class="hljs-string">&quot;name = &quot;</span>+element.name+<span class="hljs-string">&quot;, age = &quot;</span>+element.age+<span class="hljs-string">&quot;，email = &quot;</span>+element.email+<span class="hljs-string">&quot;\n&quot;</span>;<br>                        &#125;)<br>                        alert(msg);<br>                    &#125;<br>                &#125;)<br>            &#125;)<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;index4.jsp 发起ajax请求 返回一个 UserList&quot;</span> id=<span class="hljs-string">&quot;ajaxBtn&quot;</span>&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>编写处理器方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/object&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectController</span> </span>&#123;<br>    <span class="hljs-comment">// 返回 User 列表</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/returnList&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">ListTest</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;User&gt; userList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        user.setAge(<span class="hljs-number">18</span>);<br>        user.setEmail(<span class="hljs-string">&quot;1234567@qq.com&quot;</span>);<br><br>        User user1 = <span class="hljs-keyword">new</span> User();<br>        user1.setName(<span class="hljs-string">&quot;李四&quot;</span>);<br>        user1.setAge(<span class="hljs-number">20</span>);<br>        user1.setEmail(<span class="hljs-string">&quot;987654321@qq.com&quot;</span>);<br><br>        userList.add(user);<br>        userList.add(user1);<br>        <span class="hljs-comment">// 返回后会被框架转换为 JSON 格式的数组</span><br>        <span class="hljs-keyword">return</span> userList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210719/image.5t5j0kqmli8.png" alt="image"></p><h5 id="例子三：返回文本-String"><a href="#例子三：返回文本-String" class="headerlink" title="例子三：返回文本 String"></a><strong>例子三：返回文本 String</strong></h5><p>这里返回的 String 表示的数据，不是视图。</p><p>区分返回值是数据还是视图，就看处理器方法上有没有 @ResponseBody 注解，如果有 @ResponseBody  注解，返回值就是数据，反之就是视图。</p><p>请求页面 index5.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span> %&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;AJAX&lt;/title&gt;<br>    &lt;%-- 引入 jquery --%&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;http://code.jquery.com/jquery-1.11.1.min.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        $(function () &#123;<br>            <span class="hljs-comment">// 由于返回的是文本数据，所以这里 dataType 就不能写 json，因为后端不能把 String 类型数据转换为 json 字符串</span><br>            <span class="hljs-comment">// 所有这里可以不写 dataType 或者将 dataType 设置为 text</span><br>            $(<span class="hljs-string">&quot;#ajaxBtn&quot;</span>).click(function () &#123;<br>                $.ajax(&#123;<br>                    url : <span class="hljs-string">&quot;object/returnString&quot;</span>,<br>                    type : <span class="hljs-string">&quot;get&quot;</span>,<br>                    success : function (data) &#123;<br>                        alert(<span class="hljs-string">&quot;返回的是文本数据：&quot;</span>+data);<br>                    &#125;<br>                &#125;)<br>            &#125;)<br>        &#125;)<br>    &lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;input type=<span class="hljs-string">&quot;button&quot;</span> value=<span class="hljs-string">&quot;index5.jsp 发起ajax请求 返回一个 String 文本&quot;</span> id=<span class="hljs-string">&quot;ajaxBtn&quot;</span>&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>处理器方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/object&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectController</span> </span>&#123;<br><br>    <span class="hljs-comment">// 返回 String 字符串，是数据，不是视图</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/returnString&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">StringTest</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello SpringMVC，返回对象 String，表示数据&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：</p><p><img src="../../../AppData/Roaming/Typora/typora-user-images/image-20210719115203671.png" alt="image-20210719115203671"></p><p>这里为什么会出现中文乱码呢？是因为服务器响应文本默认的编码格式是 ISO-8859-1，不支持中文编码。</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210719/image.52eofvqhjp80.png" alt="image"></p><p>那么怎么解决呢？我们可以自己在 @RequestMapping 注解中增加一个属性 <code>produces</code>，使用这个属性就可以指定新的 contextType</p><p>修改控制器方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/object&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObjectController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/returnString&quot;, produces = &quot;text/plain;charset=UTF-8&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">StringTest</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello SpringMVC，返回对象 String，表示数据&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210719/image.6m0cqcgxg0k0.png" alt="image"></p><p>此时响应编码是</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210719/image.3hgk5m7clv20.png" alt="image"></p><p><img src="../../../AppData/Roaming/Typora/typora-user-images/image-20210719121021800.png" alt="image-20210719121021800"></p><p>执行流程：</p><ol><li>框架会把处理器方法返回的 String 作为参数，调用容器中生成的 HttpMessageConverter 接口实现类的 canWrite() 方法，由于这些实现类都保存在一个 <code>ArrayLis&lt;HttpMessageConverter&gt;</code> 集合中，因此编历集合即可找到能处理 String 类型数据的实现类，即 <code>StringHttpMessageConverter</code></li><li>之后就会调用 <code>StringHttpMessageConverter</code> 的 write() 方法，按照默认（或自己指定）的编码方式处理数据。</li><li>最后框架会根据注解 @ResponseBody，将处理好的数据返回给浏览器，AJAX 请求处理完成。</li></ol><h3 id="5-5-详细了解-url-pattern"><a href="#5-5-详细了解-url-pattern" class="headerlink" title="5.5 详细了解 url-pattern"></a>5.5 详细了解 url-pattern</h3><h4 id="5-5-1-Tomcat-中的-Servlet"><a href="#5-5-1-Tomcat-中的-Servlet" class="headerlink" title="5.5.1 Tomcat 中的 Servlet"></a>5.5.1 Tomcat 中的 Servlet</h4><p>在Tomcat 安装目录下的 conf 目录下存在一个 web.xml 文件，在其中注册了两个 Servlet，是 Tomcat 用来处理静态文件和 jsp 文件的，直接上源代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 处理所有静态文件的 servlet --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>debug<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>listings<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-comment">&lt;!-- The mapping for the default servlet --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>jsp<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.apache.jasper.servlet.JspServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>fork<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>xpoweredBy<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-comment">&lt;!-- The mappings for the JSP servlet --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>jsp<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.jspx<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对 DefaultServlet 的描述：<strong>服务静态资源和未映射的其他 Servlet 的请求</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210719/image.4utmz5lq4uw0.png" alt="image"></p><p>对 JspServlet 的描述：<strong>处理 jsp 文件的请求</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210719/image.4mly8a1xthc0.png" alt="image"></p><h4 id="5-5-2-servlet-容器对-url-的匹配过程"><a href="#5-5-2-servlet-容器对-url-的匹配过程" class="headerlink" title="5.5.2 servlet 容器对 url 的匹配过程"></a>5.5.2 servlet 容器对 url 的匹配过程</h4><p>当一个请求发送到 servlet 容器的时候，容器先会将请求的 url 减去当前应用上下文的路径作为 servlet 的映射 url，比如我访问的是 <a href="http://localhost/test/aaa.html%EF%BC%8C%E6%88%91%E7%9A%84%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87%E6%98%AF">http://localhost/test/aaa.html，我的应用上下文是</a> test，容器会将 <a href="http://localhost/test">http://localhost/test</a> 去掉， 剩下的 /aaa.html 部分拿来做 servlet 的映射匹配。这个映射匹配过程是有顺序的，而且当有一个 servlet 匹配成功以后，就不会去理会剩下的servlet了。其匹配规则和顺序如下：</p><ol><li><pre><code>**精确路径匹配**。例子：比如 servletA 的 url-pattern为 /test，servletB 的 url-pattern为 /* ，这个时候，如果我访问的url为 http://localhost/test ，这个时候容器就会先进行精确路径匹配，发现 /test 正好被 servletA 精确匹配，那么就去调用 servletA，也不会去理会其他的 servlet了。</code></pre></li><li><pre><code>**最长路径匹配**。例子：servletA 的 url-pattern 为 /test/\*，而 servletB 的 url-pattern 为/test/a/*，此时访问 http://localhost/test/a 时，容器会选择路径最长的 servlet 来匹配，也就是这里的servletB。</code></pre></li><li><pre><code>**扩展匹配**。如果 url 最后一段包含扩展，容器将会根据扩展选择合适的 servlet。例子：servletA 的 url-pattern：*.action</code></pre></li><li><pre><code>如果前面三条规则都没有找到一个 servlet，容器会根据 url 选择对应的请求资源。容器会将请求丢给defaultServlet（什么是defaultServlet？后面会讲）。</code></pre></li></ol><p>根据这个规则表，就能很清楚的知道servlet的匹配过程，所以定义servlet的时候也要考虑url-pattern的写法，以免出错。</p><p><strong>举个例子：</strong></p><ul><li>当 &lt;url-pattern&gt;/*&lt;/url-pattern&gt; 时，指定的 Servlet 会拦截所有请求包括静态资源请求、动态资源请求和 jsp 文件请求。能处理就处理，不能处理就报错。</li><li>当 &lt;url-pattern&gt;/&lt;/url-pattern&gt; 时，指定的 Servlet 会拦截除 .jsp 结尾的请求，其他包括静态资源和动态资源的请求，都会交给当前指定的 Servlet 来处理。而 .jsp 结尾的请求就会由 Tomcat 中的 JspServlet 来处理。</li><li>当 &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;时，指定当前 Servlet 只会处理以 .do 结尾的动态资源请求，静态资源会由 Tomcat 中的 DefaultServlet 来处理，.jsp 结尾的请求就会由 Tomcat 中的 JspServlet 来处理。</li></ul><blockquote><p>总结：在 servlet 容器对 url 的匹配过程中，会优先根据当前项目中 web.xml 文件中指定的 Servlet 的 url-pattern 来匹配路径，如果路径匹配上了，当前 Servlet 就会拦截该请求并处理，若是没有匹配到，就由Tomat 中的两个 Servlet 来分别处理静态资源和 jsp 文件。</p></blockquote><h4 id="5-5-3-测试-访问静态资源"><a href="#5-5-3-测试-访问静态资源" class="headerlink" title="5.5.3 测试 / 访问静态资源"></a>5.5.3 测试 / 访问静态资源</h4><p>我们之前在 web.xml 文件中注册 DispatcherServlet 指定的 url-pattern 是 “/“，由于访问的都是动态资源和 jsp 页面，所以没有出现资源不能访问的情况，但是当我们要访问静态资源的时候，就会出现问题。</p><p><strong>先准备一下环境：</strong></p><p>先在项目中加入一些静态资源（html，js，css，image 等）</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210719/image.1poru0wo7zgg.png" alt="image"></p><p>编写请求页面 index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;测试 url-pattern&lt;/title&gt;<br>    &lt;!-- 在这里会引入静态资源 --&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;js/jquery-1.11.1-min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;!-- 这里会访问动态资源 --&gt;<br>&lt;form action=<span class="hljs-string">&quot;test/first.do&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;table&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;姓名&lt;/td&gt;<br>            &lt;td&gt; &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span>&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt; 年龄&lt;/td&gt;<br>            &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;age&quot;</span>&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/table&gt;<br>&lt;/form&gt;<br>&lt;br/&gt;<br>&lt;!-- 在这里会引入静态资源 --&gt;<br>&lt;img src=<span class="hljs-string">&quot;images/1.jpg&quot;</span> alt=<span class="hljs-string">&quot;第一张图片&quot;</span>&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>编写一个处理器方法，处理动态请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;<br><br><br>    <span class="hljs-meta">@RequestMapping(&quot;/first.do&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">first</span><span class="hljs-params">(String name, Integer age)</span> </span>&#123;<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        String msg = <span class="hljs-string">&quot;name = &quot;</span> + name + <span class="hljs-string">&quot;，age = &quot;</span> + age;<br>        modelAndView.addObject(<span class="hljs-string">&quot;msg&quot;</span>,  msg);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;show&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>动态请求结果展示页面</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;展示数据&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h3&gt;$&#123;msg&#125;&lt;/h3&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>此时 url-pattern 设置为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br></code></pre></td></tr></table></figure><p>访问 index.jsp，<strong>可以观察到 jsp 页面是成功访问了的</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210719/image.451pon9u18g0.png" alt="image"></p><p>可以观察到静态资源没有被引进来</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210719/image.5ayrtjaq4r00.png" alt="image"></p><p>再点击提交按钮，提交表单，访问动态资源</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210719/image.dsyp57b6vsw.png" alt="image"></p><blockquote><p>原因也是非常好理解的，由于指定了 <code>&lt;url-pattern&gt;/&lt;/url-pattern&gt;</code>，所以 DispatcherServlet 会拦截所有动态和静态资源的请求，对于动态资源，DispatcherServlet 可以处理，因为我们已经写好了对应路径的处理器方法；但是对于静态资源，DispatcherServlet 默认是没有处理静态资源的能力的，同时又不能将请求再交给 DefaultServlet  来完成，所以静态资源不能访问到。</p></blockquote><h4 id="5-5-3-静态资源访问"><a href="#5-5-3-静态资源访问" class="headerlink" title="5.5.3 静态资源访问"></a>5.5.3 静态资源访问</h4><p>&lt;url-pattern&gt; 的值并不是说写为 “/“ 后，静态资源就无法访问了。经过一些配置后，该问题也是可以解决的。</p><p><strong>（1）使用 &lt;mvc:default-servlet-handler/&gt;</strong></p><p>声明了 &lt;mvc:default-servlet-handler /&gt; 后 ， springmvc 框架会在容器中创建 <code>DefaultServletHttpRequestHandler</code> 处理器对象。<strong>它会像一个检查员，对进入 DispatcherServlet 的 URL 进行筛查，如果发现是静态资源的请求，就将该请求转由 Web 应用服务器默认的 Servlet 处理</strong>。Tomcat 中的默认 Servlet 就是之前提到的 DefaultServlet 啦。</p><p>&lt;mvc:default-servlet-handler/&gt; 表示使用 DefaultServletHttpRequestHandler 处理器对象。而该处理器调用 Tomcat 的 DefaultServlet 来处理静态资源的访问请求。</p><p>springmvc 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;cn.yechen.controller&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/view/&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此时 url-pattern</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试访问 index.jsp，图片进来了</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210719/image.wbyivliw6kg.png" alt="image"></p><p>其他静态资源也进来了</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210719/image.488ot8laulw.png" alt="image"></p><p>再点击提交按钮，提交表单，访问动态资源，也成功了</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210719/image.5pjl3d9rpvo0.png" alt="image"></p><p><strong>（2）使用 &lt;mvc:resources/&gt;</strong></p><p>在 Spring3.0 版本后，Spring 定义了专门用于处理静态资源访问请求的处理器 <code>ResourceHttpRequestHandler</code>。并且添加了<code>&lt;mvc:resources/&gt;</code>标签，<strong>专门用于解决静态资源无法访问问题，不再依赖 Tomcat 服务器</strong>。</p><p>&lt;mvc:resources/&gt; 中有两个属性：</p><ol><li>mapping：访问静态资源的 URI 地址，使用通配符 ** 表示多级目录</li><li>location：静态资源在项目中的位置</li></ol><p>根据上面例子，我要访问 image、html、js 目录下是静态资源，在配置文件中就可以这样写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/images/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/images/&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/html/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/html/&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/js/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/js/&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>静态资源都加载了</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210719/image.43j9gochs4u0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210719/image.18txtlroi3nk.png" alt="image"></p><p>为了简化配置，可以将静态资源都放在一个目录下，这样只要配置一个 &lt;mvc:resources/&gt; 了</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210719/image.6i41j0um0080.png" alt="image"></p><p>配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:resources</span> <span class="hljs-attr">mapping</span>=<span class="hljs-string">&quot;/static/**&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;/static/&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="6-请求转发与重定向"><a href="#6-请求转发与重定向" class="headerlink" title="6. 请求转发与重定向"></a>6. 请求转发与重定向</h2><p>当处理器对请求处理完毕后，向其它资源进行跳转时，有两种跳转方式：<strong>请求转发与重定向</strong>。</p><p>而根据所要跳转的资源类型，又可分为两类：跳转到页面与跳转到其它处理器。</p><p>注意，对于请求转发的页面，可以是 WEB-INF 中页面；而重定向的页面，是不能为 WEB-INF 中的页面的，因为重定向相当于用户再次发出一次请求，而<strong>用户是不能直接访问 WEB-INF 中资源</strong>的。</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.5kv43rusa9c0.png" alt="image"></p><p>SpringMVC 框架把原来 Servlet 中的请求转发和重定向操作进行了封装。现在可以使用简单的方式实现转发和重定向。</p><p><strong>环境准备：</strong></p><p>springmvc 配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 组件扫描 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;cn.yechen.controller&quot;</span>/&gt;</span><br>    <br><span class="hljs-comment">&lt;!-- 视图解析器，指定视图位置和扩展名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/view/&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>web.xml </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 注册 DispatcherServlet --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 拦截动态资源和静态资源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 配置 SpringMVC 中自带的乱码过滤器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置项目使用的字符编码 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 强制请求对象（HttpServletRequest）使用 encoding 编码的值 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceRequestEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 强制响应对象（HttpServletResponse）使用 encoding 编码的值 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发起请求的页面 index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%<br>    String basePath = request.getScheme() + <span class="hljs-string">&quot;://&quot;</span> + request.getServerName() + <span class="hljs-string">&quot;:&quot;</span> +    request.getServerPort() + request.getContextPath() + <span class="hljs-string">&quot;/&quot;</span>;<br>%&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;<br>    &lt;title&gt;发起请求&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;form action=<span class="hljs-string">&quot;test.do&quot;</span>&gt;<br>        &lt;table&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;姓名：&lt;/td&gt;<br>                &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span>&gt;&lt;/td&gt;<br>            &lt;/tr&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;年龄：&lt;/td&gt;<br>                &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;age&quot;</span>&gt;&lt;/td&gt;<br>            &lt;/tr&gt;<br>            &lt;tr&gt;<br>                &lt;td&gt;&lt;/td&gt;<br>                &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;发起请求&quot;</span>&gt;&lt;/td&gt;<br>            &lt;/tr&gt;<br>        &lt;/table&gt;<br>    &lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>响应页面 show.jsp </p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%<br>    String basePath = request.getScheme() + <span class="hljs-string">&quot;://&quot;</span> + request.getServerName() + <span class="hljs-string">&quot;:&quot;</span> +    request.getServerPort() + request.getContextPath() + <span class="hljs-string">&quot;/&quot;</span>;<br>%&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;<br>    &lt;title&gt;展示数据&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h2&gt;myName = $&#123;myName&#125;&lt;/h2&gt;<br>&lt;h2&gt;myAge = $&#123;myAge&#125;&lt;/h2&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="6-1-请求转发"><a href="#6-1-请求转发" class="headerlink" title="6.1 请求转发"></a>6.1 请求转发</h3><p>当我们指定了视图解析器，处理器方法最后要跳转的路径也符合视图解析器（即 show.jsp 在 /WEB-INF/view 目录下），我们可以直接使用 modelAndView.setViewName(“名称”);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/test.do&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">forwardTest</span><span class="hljs-params">(String name, String age)</span> </span>&#123;<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        modelAndView.addObject(<span class="hljs-string">&quot;myName&quot;</span>, name);<br>        modelAndView.addObject(<span class="hljs-string">&quot;myAge&quot;</span>, age);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;show&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是我们之前就在使用的。</p><p>但当我要转发是视图不在视图解析器解析中指定的路径下时，这种方法就不行了。</p><p>所以在处理器方法返回 ModelAndView 时，只要在 setViewName() 指定的视图前添加 <strong>forward:<strong>，此时的视图不再与视图解析器一同工作，这样可以在配置了解析器时指定不同位置的视图。</strong>视图页面必须写出相对于项目根的路径</strong>。forward 操作不需要视图解析器。</p><p><strong>另：处理器方法返回 String, 同时是为了跳转视图，在视图路径前面加入 forward: 视图完整路径。</strong></p><p>测试：将 show.jsp 放在 webapp 根目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;<br>&lt;%<br>    String basePath = request.getScheme() + &quot;://&quot; + request.getServerName() + &quot;:&quot; + request.getServerPort() + request.getContextPath() + &quot;/&quot;;<br>%&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>展示数据<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>webapp 下的 show.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>myName = $&#123;myName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>myAge = $&#123;myAge&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>处理器方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/test.do&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">test</span><span class="hljs-params">(String name, String age)</span> </span>&#123;<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        modelAndView.addObject(<span class="hljs-string">&quot;myName&quot;</span>, name);<br>        modelAndView.addObject(<span class="hljs-string">&quot;myAge&quot;</span>, age);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;forward:/show.jsp&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.n3xs5iui5jk.png" alt="image"></p><h3 id="6-2-重定向"><a href="#6-2-重定向" class="headerlink" title="6.2 重定向"></a>6.2 重定向</h3><p>和请求转发写法类似，也是忽略视图解析器的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">modelAndView.setViewName(<span class="hljs-string">&quot;redirect:/show.jsp&quot;</span>);<br></code></pre></td></tr></table></figure><p>但此时 show.jsp 中是不能获取到数据的 </p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.4c2o12f7svi0.png" alt="image"></p><p>这是因为重定向过程中浏览器发送了两次请求，我们在处理器方法中是将数据保存在第一次请求的 request 域中，但是 show.jsp 是从第二次请求的 request 域中获取数据的，因此不能获取到数据。</p><p>但我们可以观察测试的地址栏，发现请求路径后是存在参数传递的，这是 SpringMVC 做的工作，会将处理器方法中向 request 域中保存的值，以参数的形式带到重定向路径后面，作为请求参数。</p><p>因此我们就可以在 show.jsp 中接受参数</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;h2&gt;webapp 下的 show.jsp&lt;/h2&gt;<br>&lt;h2&gt;myName = $&#123;param.myName&#125;&lt;/h2&gt;<br>&lt;h2&gt;myAge = $&#123;param.myAge&#125;&lt;/h2&gt;<br></code></pre></td></tr></table></figure><p>其中 <code>$&#123;param.myName&#125;</code> 是等价于 <code>&lt;%=request.getParameter(&quot;myName&quot;)%&gt;</code> ，即从request 对象中获取参数</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.6n0vtf0qk0w0.png" alt="image"></p><p>尝试访问一下 WEB-INF/view 下的 show.jsp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">modelAndView.setViewName(<span class="hljs-string">&quot;redirect:/WEB-INF/view/show.jsp&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.1ioer9j35l5s.png" alt="image"></p><blockquote><p>总结：</p><p>当返回值是 ModelAndView 是，可以在 setViewName() 方法参数前加上 <strong>forward:</strong> 和 <strong>redirect:<strong>，分别表示请求转发和重定向，此时访问的</strong>资源路径要写全</strong>，视图解析器配置不起作用。</p><p>当返回值是 String 时，同样在返回路径前加上 <strong>forward:</strong>  或 **redirect:**，资源路径写全。</p></blockquote><h2 id="7-异常处理"><a href="#7-异常处理" class="headerlink" title="7. 异常处理"></a>7. 异常处理</h2><p>一般在方法中出现异常，都是在方法中使用 try catch 捕捉异常或者直接抛出，在处理器方法中，只能直接处理掉。</p><p>一般项目异常处理要进行的操作：</p><ol><li>把发生的异常记录到数据库或者日志文件中。记录日志发生的时间、发生异常的方法、异常的内容。</li><li>发送通知。把异常的信息通过邮件、短信方式发送给相关人员。</li><li>给用户友好的提示</li></ol><p>当这些异常处理操作都写在方法的 catch 语句块中，就会使方法臃肿，业务和异常处理耦合在一起了，同时多个方法都要处理异常，写的时候也麻烦。</p><p>SpringMVC 中给出了解决办法。</p><p><strong>SpringMVC 框架采用的是统一的、全局的异常处理，把  Controller 中所有异常处理都集中于一个地方。</strong></p><p>采用的使用 AOP 思想，将业务逻辑和异常处理代码分开，实现代码解耦合。</p><p><strong>主要使用两个注解：</strong></p><ol><li><p><code>@ExceptionHandler</code>：</p><ul><li>使用注解@ExceptionHandler 可以将一个方法指定为异常处理方法。该注解只有一个可选属性 value，为一个 Class&lt;? extends Throwable&gt;数组，用于指定该注解的方法所要处理的异常类，即所要匹配的异常。</li><li>被注解的方法，其返回值可以是 ModelAndView、String，或 void，方法名随意，方法参数可以是 Exception 及其子类对象、HttpServletRequest、HttpServletResponse 等。系统会自动为这些方法参数赋值。</li></ul></li><li><p><code>@ControllerAdvice</code>：</p><ul><li><p>异常处理方法会专门定义在一个类中，作为全局的异常处理类。此时这个类就需要 @ControllerAdvice 注解。</p></li><li><p>@ControllerAdvice，字面理解就是“控制器增强”，是给控制器对象增强功能的。使用 @ControllerAdvice 修饰的类中可以使用 @ExceptionHandler。当使用 @RequestMapping 注解修饰的方法抛出异常时，会执行@ControllerAdvice 修饰的类中的异常处理方法。</p></li><li><p>由于 @ControllerAdvice 是使用 @Component 注解修饰的，需要为修饰的类所在的包加入组件扫描。</p></li></ul></li></ol><p><strong>一个小例子</strong></p><p>项目结构</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.3vaamvp6r3s0.png" alt="image"></p><p>springmvc-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 组件扫描 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;cn.yechen.controller&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 指定注解 @ControllerAdvice 所在的包名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;cn.yechen.handler&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 视图解析器，指定视图位置和扩展名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/view/&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 注解驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>请求页面 index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%<br>    String basePath = request.getScheme() + <span class="hljs-string">&quot;://&quot;</span> + request.getServerName() + <span class="hljs-string">&quot;:&quot;</span> + request.getServerPort() + request.getContextPath() + <span class="hljs-string">&quot;/&quot;</span>;<br>%&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;<br>    &lt;title&gt;发起请求&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;form action=<span class="hljs-string">&quot;test.do&quot;</span>&gt;<br>    &lt;table&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;姓名：&lt;/td&gt;<br>            &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span>&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;年龄：&lt;/td&gt;<br>            &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;age&quot;</span>&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;发起请求&quot;</span>&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/table&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>自定义异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserException</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserException</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserNameException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">UserException</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserNameException</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserNameException</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserAgeException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">UserException</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserAgeException</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserAgeException</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>全局异常处理器 GlobalExceptionHandler.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalExceptionHandler</span> </span>&#123;<br><br>    <span class="hljs-comment">// 处理 UserException</span><br>    <span class="hljs-meta">@ExceptionHandler(UserException.class)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doUserException</span><span class="hljs-params">(UserException userException)</span> </span>&#123;<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        modelAndView.addObject(<span class="hljs-string">&quot;msg&quot;</span>, userException.getMessage());<br>        modelAndView.setViewName(<span class="hljs-string">&quot;userException&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br><br>    <span class="hljs-comment">// 处理除 UserException 以外的异常</span><br>    <span class="hljs-meta">@ExceptionHandler</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doOtherException</span><span class="hljs-params">(Exception exception)</span> </span>&#123;<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        modelAndView.addObject(<span class="hljs-string">&quot;msg&quot;</span>, exception.getMessage());<br>        modelAndView.setViewName(<span class="hljs-string">&quot;userException&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：@ExceptionHandler 中 value 属性可以不写，但是只能出现一次，表示修饰方法处理没有指定的异常。如当前程序中，如果控制器抛出 UserException，则异常由 doUserException() 方法处理，控制器抛出其他异常，则由doOtherException() 方法处理。相当于一个擦屁股的方法。</p></blockquote><p>控制器 MyController.java，当 name 不为“张三”，年龄为 null 或者小于 18 时，主动抛出异常给控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/test.do&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">test</span><span class="hljs-params">(String name, Integer age)</span> <span class="hljs-keyword">throws</span> UserException </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;张三&quot;</span>.equals(name)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UserNameException(<span class="hljs-string">&quot;姓名不符合要求&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (age == <span class="hljs-keyword">null</span> || age &lt; <span class="hljs-number">18</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UserAgeException(<span class="hljs-string">&quot;年龄不符合要求&quot;</span>);<br>        &#125;<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        modelAndView.addObject(<span class="hljs-string">&quot;myName&quot;</span>, name);<br>        modelAndView.addObject(<span class="hljs-string">&quot;myAge&quot;</span>, age);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;show&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>执行成功展示页面 show.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%<br>    String basePath = request.getScheme() + <span class="hljs-string">&quot;://&quot;</span> + request.getServerName() + <span class="hljs-string">&quot;:&quot;</span> + request.getServerPort() + request.getContextPath() + <span class="hljs-string">&quot;/&quot;</span>;<br>%&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;<br>    &lt;title&gt;展示数据&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h2&gt;/WEB-INF/view 下的 show.jsp&lt;/h2&gt;<br>&lt;h2&gt;myName = $&#123;myName&#125;&lt;/h2&gt;<br>&lt;h2&gt;myAge = $&#123;myAge&#125;&lt;/h2&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>抛出异常跳转页面 userException.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%<br>    String basePath = request.getScheme() + <span class="hljs-string">&quot;://&quot;</span> + request.getServerName() + <span class="hljs-string">&quot;:&quot;</span> + request.getServerPort() + request.getContextPath() + <span class="hljs-string">&quot;/&quot;</span>;<br>%&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;<br>    &lt;title&gt;出错啦&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h2&gt;userException.jsp&lt;/h2&gt;<br>&lt;h2&gt;提示信息：$&#123;msg&#125;&lt;/h2&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><strong>测试环节：</strong></p><p>正确输入：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.12il3ma7zlnk.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.1radhhvzya00.png" alt="image"></p><p>错误输入，抛出自定义异常：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.5t3l7iwjoio0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.2us3gw60o660.png" alt="image"></p><p>错误输入，抛出其他异常：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.633knb1ghlo0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.50df6j061eo0.png" alt="image"></p><h2 id="8-拦截器"><a href="#8-拦截器" class="headerlink" title="8. 拦截器"></a>8. 拦截器</h2><p>SpringMVC 中的 <code>Interceptor 拦截器</code>是非常重要和相当有用的，它的主要作用是拦截指定的用户请求，并进行相应的预处理与后处理。</p><p>拦截器和过滤器类似，功能方向侧重点不同。 过滤器是用来<strong>过滤器请求参数</strong>，设置编码字符集等工作。拦截器是<strong>拦截用户的请求</strong>，对请求做判断处理的。</p><p>拦截器是全局的，可以对多个 Controller 做拦截。 一个项目中可以有任意数量的拦截器， 他们可以在一起拦截用户的请求。</p><p><strong>拦截器的执行时间：</strong></p><ol><li>在请求处理之前， 也就是处理器方法执行之前。</li><li>在处理器方法执行之后也会执行。</li><li>在请求处理完成后也会执行。</li></ol><p>在 SpringMVC 中自定义拦截器需要实现 <code>HandlerInterceptor</code> 接口，并实现其中的三个方法，这三个方法分别就在拦截器的三个执行时间执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span><br><span class="hljs-function">         <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class="hljs-params"><span class="hljs-function">         <span class="hljs-meta">@Nullable</span> ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span><br><span class="hljs-params"><span class="hljs-function">         <span class="hljs-meta">@Nullable</span> Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>   &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>以上是 <code>HandlerInterceptor</code> 接口中定义的方法，都是默认的，可以不实现。下面来分析以下这几方法：</p><p><code>preHandle()</code> ：该方法在<strong>处理器方法执行之前执行</strong>。</p><ul><li><strong>返回值：</strong>为 boolean，若为 true，则紧接着会执行处理器方法，且会将 afterCompletion() 方法放入到一个专门的方法栈中等待执行，即若返回值是 true，则 afterCompletion() 方法就一定会配套执行；若返回值为 false，则不会在继续执行处理器方法，请求到此方法就截止了。</li><li><strong>参数：</strong> <code>Object handler</code> 表示被拦截的控制器对象。</li><li><strong>作用：</strong>在这个方法中可以获取请求的信息， 验证请求是否符合要求。可以验证用户是否登录， 验证用户是否有权限访问某个连接地址（url）。如果验证失败，可以截断请求，请求不能被处理。如果验证成功，可以放行请求，此时控制器方法才能执行。</li></ul><p><code>postHandle</code>：该方法在<strong>处理器方法执行完成之后执行</strong>。处理器方法若最终未被执行（preHandle() 方法返回值为 false），则该方法不会执行。</p><ul><li><strong>参数：</strong><code>ModelAndView modelAndView</code>是处理器方法的返回值，可以修改 ModelAndView 中的数据和视图，可以影响到最后的执行结果。</li><li><strong>作用：</strong> 主要是通过一些判断，对原来的执行结果做二次修正。</li></ul><p><code>afterCompletion</code>：当 preHandle() 方法返回为 true 时，会将该方法放到专门的方法栈中，等到对请求进行响应的所有工作完成之后才执行该方法。即该方法是在中央调度器渲染（数据填充）了响应页面之后执行的，此时对ModelAndView 再操作也对响应无济于事。</p><ul><li><strong>参数：</strong><code>Exception ex</code> 是程序中发生的异常。</li><li><strong>作用：</strong>一般做资源回收工作的， 程序请求过程中创建了一些对象，在这里可以删除，把占用的内存回收。</li></ul><h3 id="8-1-拦截器三个方法的执行顺序验证"><a href="#8-1-拦截器三个方法的执行顺序验证" class="headerlink" title="8.1 拦截器三个方法的执行顺序验证"></a>8.1 拦截器三个方法的执行顺序验证</h3><p>处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyController</span> </span>&#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/test.do&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;===执行了 MyController 处理器方法===&quot;</span>);<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        modelAndView.addObject(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;执行了处理器方法，转发到了 show.jsp&quot;</span>);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;show&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;---执行了 MyInterceptor 拦截器的 preHandle() 方法---&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;---执行了 MyInterceptor 拦截器的 postHandle() 方法---&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;---执行了 MyInterceptor 拦截器的 afterCompletion() 方法---&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>展示页面 show.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%<br>    String basePath = request.getScheme() + <span class="hljs-string">&quot;://&quot;</span> + request.getServerName() + <span class="hljs-string">&quot;:&quot;</span> +    request.getServerPort() + request.getContextPath() + <span class="hljs-string">&quot;/&quot;</span>;<br>%&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;<br>    &lt;title&gt;展示数据&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h2&gt;/WEB-INF/view 下的 show.jsp&lt;/h2&gt;<br>&lt;h2&gt;转发过来的消息 = $&#123;msg&#125;&lt;/h2&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><strong>要使用拦截器，还需要在 SpringMVC 配置文件中注册拦截器</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 注册拦截器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--声明第一个拦截器--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">指定拦截的请求uri地址</span><br><span class="hljs-comment">              path：就是uri地址，可以使用通配符 **，** 表示任意的字符，文件或者多级目录和目录中的文件</span><br><span class="hljs-comment">        --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.handler.MyInterceptor&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试：发送请求</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.3keb626ovfu0.png" alt="image"></p><p>查看控制台输出，确实按照顺序依次执行</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.3ytbaxwd1ce0.png" alt="image"></p><p>现在将 preHandle() 方法的返回值该为 false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;---执行了 MyInterceptor 拦截器的 preHandle() 方法---&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>发起请求，页面无内容</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.fxv41rhljxs.png" alt="image"></p><p>控制台输出说明只执行了 preHandle() 方法，控制器方法没有执行，请求被拦截了。</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.2znr7z1bdsa0.png" alt="image"></p><p>总结：拦截器中方法与处理器方法的执行顺序如下图</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.3ujexj0vw7g0.png" alt="image"></p><p>换一种表现方式，也可以这样理解：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.e59sbd7xv68.png" alt="image"></p><h3 id="8-2-多个拦截器"><a href="#8-2-多个拦截器" class="headerlink" title="8.2 多个拦截器"></a>8.2 多个拦截器</h3><p>以两个拦截器为例，多个也类似。</p><p>在添加一个拦截器，实现 <code>HandlerInterceptor</code> 接口，实现三个方法，将连个拦截器的 preHandle() 方法返回值都设为 true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;***执行了 MyInterceptor2 拦截器的 preHandle() 方法***&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;***执行了 MyInterceptor2 拦截器的 postHandle() 方法***&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;***执行了 MyInterceptor2 拦截器的 afterCompletion() 方法***&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;---执行了 MyInterceptor 拦截器的 preHandle() 方法---&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;---执行了 MyInterceptor 拦截器的 postHandle() 方法---&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;---执行了 MyInterceptor 拦截器的 afterCompletion() 方法---&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在配置文件中注册这个拦截器</p><p><strong>注：拦截器的执行顺序就是按照配置文件中的注册是顺序，拦截器在容器内部保存在一个 List 集合中。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 注册拦截器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 第一个拦截器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.handler.MyInterceptor&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 第二个拦截器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.handler.MyInterceptor2&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发起请求，请求成功</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.77hlakj0g4w0.png" alt="image"></p><p>观察控制台输出</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.5iip7irdsxs.png" alt="image"></p><p>保持拦截器 1 preHandle() 方法返回值为 true，将拦截器 2 的 preHandle() 方法返回值改为 false，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 拦截器 1</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;---执行了 MyInterceptor 拦截器的 preHandle() 方法---&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 拦截器 2</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInterceptor2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;***执行了 MyInterceptor2 拦截器的 preHandle() 方法***&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;    <br></code></pre></td></tr></table></figure><p>此时拦截器 2 会将处理器方法拦截，处理器方法不执行，在处理器方法之后执行的 postHandle() 方法也都不执行，但是由于在拦截器 1 preHandle() 方法返回 true 时，拦截器 1 的 afterCompletion() 方法就被放入到专门的方法栈中，在请求结束时还是会执行的</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.24tg1wph5ji.png" alt="image"></p><p><strong>总结：</strong>当有多个拦截器时，形成拦<strong>截器链</strong>。拦截器链的执行顺序，与其注册顺序一致。</p><p>多个拦截器中方法与处理器方法的执行顺序如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.2l221nmxa2g0.png" alt="image"></p><p>换一种表现方式，也可以这样理解：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210721/image.70sgb9udy0g0.png" alt="image"></p><p>从图中可以看出，只要有一个 preHandle() 方法返回 false，则上部的执行链将被断开，其后续的处理器方法与 postHandle() 方法都将无法执行。但，无论执行链执行情况怎样，只要方法栈中有方法，即执行链中只要有 preHandle() 方法返回 true，就会执行方法栈中的afterCompletion()方法。最终都会给出响应。</p><h3 id="8-3-使用拦截器完成防止用户恶意登录功能"><a href="#8-3-使用拦截器完成防止用户恶意登录功能" class="headerlink" title="8.3 使用拦截器完成防止用户恶意登录功能"></a>8.3 使用拦截器完成防止用户恶意登录功能</h3><p><strong>功能要求：</strong>编写一个登录页面（login.jsp），只有登录成功才能访问主页（index.jsp），未登录过的用户只能访问登录页面内，不能访问主页。</p><p><strong>实现：</strong>用户登录成功，将用户信息保存到 seesion 域中，只有 session 域中有用户信息，才能访问主页，否则跳转到登录页面继续登录。</p><p><strong>环境准备：</strong></p><p>项目结构：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210722/image.fje1h3x0cew.png" alt="image"></p><p>登录页面 login.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%<br>    String basePath = request.getScheme() + <span class="hljs-string">&quot;://&quot;</span> + request.getServerName() + <span class="hljs-string">&quot;:&quot;</span> + request.getServerPort() + request.getContextPath() + <span class="hljs-string">&quot;/&quot;</span>;<br>%&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;<br>    &lt;title&gt;登录&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;form action=<span class="hljs-string">&quot;login.do&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    &lt;table&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;姓名：&lt;/td&gt;<br>            &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span>&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;密码：&lt;/td&gt;<br>            &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;span style=<span class="hljs-string">&quot;color: red&quot;</span>&gt;$&#123;exceptionMsg&#125;&lt;/span&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>        &lt;tr&gt;<br>            &lt;td&gt;&lt;/td&gt;<br>            &lt;td&gt;&lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;登录&quot;</span>&gt;&lt;/td&gt;<br>        &lt;/tr&gt;<br>    &lt;/table&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>登录成功主页 index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;%<br>    String basePath = request.getScheme() + <span class="hljs-string">&quot;://&quot;</span> + request.getServerName() + <span class="hljs-string">&quot;:&quot;</span> + request.getServerPort() + request.getContextPath() + <span class="hljs-string">&quot;/&quot;</span>;<br>%&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;base href=<span class="hljs-string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;<br>    &lt;title&gt;主页&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h2&gt;登录成功，欢迎您【$&#123;name&#125;】&lt;/h2&gt;<br>&lt;a href=<span class="hljs-string">&quot;logout.do&quot;</span>&gt;退出登录&lt;/a&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>登录异常类 LoginException.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LoginException</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LoginException</span><span class="hljs-params">(String message)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制器 LoginController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginController</span> </span>&#123;<br><br>    <span class="hljs-comment">// 登录操作，登录成功在 session 中保存值</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/login.do&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">login</span><span class="hljs-params">(String name, String password, HttpSession session)</span> <span class="hljs-keyword">throws</span> LoginException </span>&#123;<br>        <span class="hljs-comment">// 判断用户名和密码是否符合要求，不符合就抛出异常</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;张三&quot;</span>.equals(name)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> LoginException(<span class="hljs-string">&quot;用户名不正确&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;123&quot;</span>.equals(password)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> LoginException(<span class="hljs-string">&quot;密码不正确&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 用户名密码争取，登录成功</span><br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        session.setAttribute(<span class="hljs-string">&quot;userName&quot;</span>, name);<br>        modelAndView.addObject(<span class="hljs-string">&quot;name&quot;</span>, name);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;/WEB-INF/view/index.jsp&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取详细信息，只有登录成功后才能访问</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/detail.do&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">getDetail</span><span class="hljs-params">()</span> </span>&#123;<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        modelAndView.addObject(<span class="hljs-string">&quot;detail&quot;</span>, <span class="hljs-string">&quot;获取了详细信息&quot;</span>);<br>        modelAndView.setViewName(<span class="hljs-string">&quot;/WEB-INF/view/detail.jsp&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br><br>    <span class="hljs-comment">// 登出操作，清除 session</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/logout.do&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">logout</span><span class="hljs-params">(HttpSession session)</span> </span>&#123;<br>        <span class="hljs-comment">// 清除 session，返回到登录页面</span><br>        session.removeAttribute(<span class="hljs-string">&quot;userName&quot;</span>);<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        modelAndView.setViewName(<span class="hljs-string">&quot;/login.jsp&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>全局异常处理类 GlobalExceptionHandler.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalExceptionHandler</span> </span>&#123;<br><br>    <span class="hljs-comment">// 处理登录异常，重新跳转至登录页面</span><br>    <span class="hljs-meta">@ExceptionHandler(&#123;LoginException.class&#125;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doLoginException</span><span class="hljs-params">(LoginException loginException)</span> </span>&#123;<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;用户名不正确&quot;</span>.equals(loginException.getMessage())) &#123;<br>            modelAndView.addObject(<span class="hljs-string">&quot;exceptionMsg&quot;</span>, <span class="hljs-string">&quot;用户名不正确&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;密码不正确&quot;</span>.equals(loginException.getMessage())) &#123;<br>            modelAndView.addObject(<span class="hljs-string">&quot;exceptionMsg&quot;</span>, <span class="hljs-string">&quot;密码不正确&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 继续转发到 login.jsp</span><br>        modelAndView.setViewName(<span class="hljs-string">&quot;/login.jsp&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br><br>    <span class="hljs-comment">// 处理其他异常</span><br>    <span class="hljs-meta">@ExceptionHandler</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">doOtherException</span><span class="hljs-params">(Exception exception)</span> </span>&#123;<br>        ModelAndView modelAndView = <span class="hljs-keyword">new</span> ModelAndView();<br>        modelAndView.addObject(<span class="hljs-string">&quot;exceptionMsg&quot;</span>, exception.getMessage());<br>        modelAndView.setViewName(<span class="hljs-string">&quot;/login.jsp&quot;</span>);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>拦截器 LoginInterceptor.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerInterceptor</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><br>        <span class="hljs-comment">// 判断当前请求是不是登录操作 /login.do，是的话就放行</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;/login.do&quot;</span>.equals(request.getServletPath())) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 当前 Session 中没有 userName，表示没有登录过，拦截</span><br>        Object name = request.getSession().getAttribute(<span class="hljs-string">&quot;userName&quot;</span>);<br>        <span class="hljs-keyword">if</span> (name == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-comment">// 重新跳转到登录页面</span><br>            request.setAttribute(<span class="hljs-string">&quot;exceptionMsg&quot;</span>, <span class="hljs-string">&quot;请重新登录&quot;</span>);<br>            request.getRequestDispatcher(<span class="hljs-string">&quot;/login.jsp&quot;</span>).forward(request, response);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 已经登录过了，放行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>SpringMVC 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 控制器所在包组件扫描 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;cn.yechen.controller&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 异常处理器所在包组件扫描 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;cn.yechen.handler&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 注册拦截器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptors</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:interceptor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mvc:mapping</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/**&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.handler.LoginInterceptor&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:interceptors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 web.xml </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置欢迎页面 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">welcome-file-list</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">welcome-file</span>&gt;</span>/login.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">welcome-file-list</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 注册 DispatcherServlet --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 拦截动态资源和静态资源 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置 SpringMVC 中自带的乱码过滤器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 设置项目使用的字符编码 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 强制请求对象（HttpServletRequest）使用 encoding 编码的值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceRequestEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 强制响应对象（HttpServletResponse）使用 encoding 编码的值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceResponseEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>测试：</strong></p><ol><li>在没有登录的情况下直接访问 detail.do，发现被拦截器拦截，跳转到 login.jsp</li></ol><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210722/image.4k58g9b4c1w0.png" alt="image"></p><ol start="2"><li>输入错误姓名、密码，被异常处理器处理，跳转到 login.jsp</li></ol><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210722/image.4vzvnkicyqo0.png" alt="image"></p><ol start="3"><li>输入正确的姓名和密码，登录成功，跳转到 index.jsp</li></ol><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210722/image.2z081c7st2s0.png" alt="image"></p><ol start="4"><li>登录成功后访问 detail.do，拦截器发现 session 中有值，放行，正常访问</li></ol><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210722/image.2yi7cttm1m00.png" alt="image"></p><ol start="5"><li>在 index.jsp 点击登出按钮，清除 session，跳转到登录页面</li></ol><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210722/image.47anfj9870u0.png" alt="image"></p><ol start="6"><li>再次访问 detail.do，此时 session 中没有值，拦截器拦截，不能访问</li></ol><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210722/image.7cst3xdzymk0.png" alt="image"></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/ysocean/p/7375405.html">SpringMVC详解（二）——详细架构</a></p><p><a href="https://blog.csdn.net/Number_oneEngineer/article/details/82775419?ops_request_misc=%7B%22request_id%22:%22162648934716780271556962%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=162648934716780271556962&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-82775419.pc_search_result_control_group&utm_term=springmvc&spm=1018.2226.3001.4187">SpringMVC框架介绍</a></p><p><a href="https://blog.csdn.net/a745233700/article/details/80963758?ops_request_misc=%7B%22request_id%22:%22162648934716780271556962%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=162648934716780271556962&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-80963758.pc_search_result_control_group&utm_term=springmvc&spm=1018.2226.3001.4187">SpringMVC常见面试题总结（超详细回答）</a></p><p><a href="https://blog.csdn.net/qq_33369905/article/details/106647313?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162692364816780274147214%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162692364816780274147214&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-3-106647313.pc_search_all_es&utm_term=SpringMVC&spm=1018.2226.3001.4187">狂神说SpringMVC系列</a></p>]]></content>
    
    
    <categories>
      
      <category>SSM 框架</category>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM 框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis</title>
    <link href="/2021/09/13/SSM%E6%A1%86%E6%9E%B6-2021-09-13-MyBatis/"/>
    <url>/2021/09/13/SSM%E6%A1%86%E6%9E%B6-2021-09-13-MyBatis/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一、三层架构"><a href="#一、三层架构" class="headerlink" title="一、三层架构"></a>一、三层架构</h3><blockquote><p>界面层（视图层）</p></blockquote><p>完成和用户的交互，接受请求，显示请求的处理结果。</p><p>使用 <code>SpringMVC</code> 框架来实现。</p><blockquote><p>业务逻辑层</p></blockquote><p>计算数据，处理业务逻辑。</p><p>使用 <code>Spring</code> 框架来实现。</p><blockquote><p>数据访问层（持久层）</p></blockquote><p>对数据库进行操作。</p><p>使用 <code>MyBatis</code> 进行操作。</p><h3 id="二、概述"><a href="#二、概述" class="headerlink" title="二、概述"></a>二、概述</h3><h4 id="1-MyBatis-是什么，有什么特点？"><a href="#1-MyBatis-是什么，有什么特点？" class="headerlink" title="1. MyBatis 是什么，有什么特点？"></a>1. MyBatis 是什么，有什么特点？</h4><p>它是一款半自动的 <code>ORM</code> 持久层框架，具有较高的 SQL 灵活性，支持高级映射 (一对一，一对多)，动态 SQL，延迟加载和缓存等特性，但它的数据库无关性较低。</p><ul><li><p>什么是 <code>ORM</code>：</p><p><code>Object Relation Mapping</code>，对象关系映射。<strong>对象指的是 Java 对象，关系指的是数据库中的关系模型</strong>，对象关系映射，指的就是在 <strong>Java 对象和数据库的关系模型之间建立一种对应关系</strong>，比如用一个Java的Student类，去对应数据库中的一张 student 表，类中的属性和表中的列一一对应。Student类就对应student表，一个Student对象就对应student表中的一行数据。</p></li><li><p>为什么 mybatis 是半自动的 ORM 框架：</p><p><strong>用 mybatis 进行开发，需要手动编写 SQL 语句</strong>。而全自动的 ORM 框架，如 <code>hibernate</code>，则不需要编写 SQL 语句。用 hibernate 开发，只需要定义好 ORM 映射关系，就可以直接进行 CRUD 操作了。由于 mybatis 需要手写SQL 语句，<strong>所以它有较高的灵活性，可以根据需要，自由地对 SQL 进行定制</strong>，也因为要手写 SQL，<strong>当要切换数据库时，SQL 语句可能就要重写，因为不同的数据库有不同的方言 (Dialect)，所以 mybatis 的数据库无关性低</strong>。虽然 mybatis 需要手写 SQL，但相比 JDBC，它提供了输入映射和输出映射，可以很方便地进行 SQL 参数设置，以及结果集封装。并且还提供了关联查询和动态 SQL 等功能，极大地提升了开发的效率。并且它的学习成本也比 hibernate 低很多。</p></li></ul><h4 id="2-简单使用-MyBatis"><a href="#2-简单使用-MyBatis" class="headerlink" title="2. 简单使用 MyBatis"></a>2. 简单使用 MyBatis</h4><ol><li><p>创建数据库和数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE springdb;<br>use springdb;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `student` (<br> `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> ,<br> `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br> `email` <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br> `age` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure></li><li><p>加入 maven 依赖</p><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 单元测试依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- mybatis 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- mysql 驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.23<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建 dao 接口，定义操作数据库的方法</p><p><code>cn.yechen.dao.Studentdao.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.yechen.dao;<br><br><span class="hljs-keyword">import</span> cn.yechen.entity.Student;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentDao</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取 Student 表中的所有数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Student 表中所有数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">selectStudents</span><span class="hljs-params">()</span></span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加学生的方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> student 新增学生对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 影响数据库的行数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insertStudent</span><span class="hljs-params">(Student student)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建 mapper（sql 映射文件），写和接口中方法对应的 sql 语句</p><p><code>cn.yechen.dao.StudentDao.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">以上语句是指定约束文件的，格式是固定的，mybatis-3-mapper.dtd 文件就是约束文件</span><br><span class="hljs-comment">    约束文件是用来检查文件中出现的标签、属性必须符合 mybatis 的要求</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;cn.yechen.dao.StudentDao&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 查询操作 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudents&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.yechen.entity.Student&quot;</span>&gt;</span><br>        select id,name,email,age from Student<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 插入操作 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertStudent&quot;</span>&gt;</span><br>        insert into student (id, name, email, age) values (#&#123;id&#125;, #&#123;name&#125;, #&#123;email&#125;, #&#123;age&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;mapper&gt;</code> ：是当前文件的根标签，必须存在的</p><ul><li>namespace：叫做命名空间，值是唯一的，可以是自定义的字符串，要求你使用 dao 接口的全限定名称。</li></ul><p><code>&lt;select&gt;</code> ： 表示执行查询</p><p><code>&lt;insert&gt;</code> ： 表示插入数据操作</p><p><code>&lt;update&gt;</code> ： 表示更新数据库操作</p><p><code>&lt;delete&gt;</code> ： 表示删除操作</p><ul><li><strong>id</strong>：是你要执行的 sql 语句的唯一标识，mybatis 会使用这个 id 的值来找到要执行的 sql 语句，id 值可以自定义，但是推荐使用接口中的方法名。</li><li><strong>resultType</strong>：表示执行 sql 语句执行后得到的 resultSet，编历后得到的 java 对象的类型，值写的是返回值类型的全限定名称。</li></ul></li><li><p>创建 mybatis 主配置文件</p><p><code>resources/mybatis-config.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">以上语句是指定约束文件的，格式是固定的，mybatis-3-mapper.dtd 文件就是约束文件</span><br><span class="hljs-comment">    约束文件是用来检查文件中出现的标签、属性必须符合 mybatis 的要求</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- settings：控制 mybatis 的全局行为 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 设置 mybatis 输出日志 --&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 环境配置：数据库的连接信息</span><br><span class="hljs-comment">         default：必须和 其中一个 environment 标签中的 id 值一致，</span><br><span class="hljs-comment">                  告诉 mybatis 使用的是哪个数据库的连接信息，也就是访问哪个数据库。</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数据库信息的配置，是一个环境</span><br><span class="hljs-comment">             id：一个自定义的唯一值，表示环境的名称</span><br><span class="hljs-comment">         --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 表示 mybatis 的事务类型</span><br><span class="hljs-comment">                 type：使用 JDBC（表示使用 jdbc 中的 Connection 对象的 commit 和 rollback 做事务处理）</span><br><span class="hljs-comment">             --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!-- 表示数据源，用来连接数据库</span><br><span class="hljs-comment">                 type：表示数据源类型，POOLED 表示使用连接池</span><br><span class="hljs-comment">             --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/springdb&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ruanlitao2000&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--执行所有的 sql 映射文件的位置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 一个 mapper 标签指定一个 sql 映射文件的位置，从类路径（target/classes classes 就表示类路径）开始表示文件位置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;cn/yechen/dao/StudentDao.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    是 mybatis 的只要配置文件，主要定义了数据库的配置信息和 sql 映射文件的位置</span><br><span class="hljs-comment">    1. &lt;!DOCTYPE configuration</span><br><span class="hljs-comment">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="hljs-comment">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="hljs-comment">        是指定约束文件的，格式是固定的，mybatis-3-config.dtd 文件就是约束文件</span><br><span class="hljs-comment">        约束文件是用来检查文件中出现的标签、属性必须符合 mybatis 的要求</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    2. &lt;configuration&gt; 表示根标签</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;configuration&gt;</code>：表示根标签。</p><p><code>&lt;settings&gt;</code>：控制 mybatis 的全局行为。</p><p><code>&lt;environments&gt;</code>：环境配置，数据库的连接信息。</p><ul><li><strong>default</strong>：必须和其中一个 environment 标签中的 id 值一致，告诉 mybatis 使用的是哪个数据库的连接信息，也就是访问哪个数据库。</li></ul><p><code>&lt;environment&gt;</code>：数据库信息的配置，是一个环境。一个 <environments> 中可以写多个。</p><ul><li><strong>id</strong>：一个自定义的唯一值，表示环境的名称，当要使用这个环境的时候，就可以将 <environments> 标签中的 default 属性与 id 属性一致。</li></ul><p><code>&lt;dataSource&gt;</code>：表示数据源，用来连接数据库。</p><ul><li><strong>type</strong>：表示数据源类型，POOLED 表示使用连接池。</li></ul><p><code>&lt;property&gt;</code>：表示连接数据库的核心信息，驱动，url，user，password。</p></li><li><p>使用 mybatis 中的对象 <code>SqlSession</code> 来执行 sql 语句</p><p><code>Test/java/cn.yechen.TestMyBatis</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMybatis</span> </span>&#123;<br><br>    <span class="hljs-comment">// 测试查询操作</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectStudents</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 访问 mybatis，读取 Student 数据</span><br>        <span class="hljs-comment">// 1. 定义 mybatis 主配置文件的名称，从类路径开始</span><br>        String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br><br>        <span class="hljs-comment">// 2. 读取主配置文件</span><br>        InputStream inputStream = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            inputStream = Resources.getResourceAsStream(resource);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-comment">// 3. 通过 SqlSessionFactoryBuilder 对象的 build() 方法创建 SqlSessionFactory 对象</span><br>        SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br><br>        <span class="hljs-comment">// 4. 从 SqlSessionFactory 对象中获取 SqlSession 独享</span><br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br><br>        <span class="hljs-comment">// 5。 指定要执行的 sql 语句的标识</span><br>        String sqlId = <span class="hljs-string">&quot;cn.yechen.dao.StudentDao.selectStudents&quot;</span>;<br><br>        <span class="hljs-comment">// 6。 通过 sqlId 执行 sql</span><br>        List&lt;Student&gt; list = sqlSession.selectList(sqlId);<br><br>        <span class="hljs-comment">// 7. 输出结果</span><br>        <span class="hljs-keyword">for</span> (Student student : list) &#123;<br>            System.out.println(student);<br>        &#125;<br><br>        <span class="hljs-comment">// 8. 关闭 SqlSession 对象</span><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-comment">// 测试插入操作</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsertStudent</span><span class="hljs-params">()</span> </span>&#123;<br>        String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>        InputStream inputStream = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            inputStream = Resources.getResourceAsStream(resource);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        SqlSessionFactory sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        SqlSession sqlSession = sqlSessionFactory.openSession();<br><br>        String sqlId = <span class="hljs-string">&quot;cn.yechen.dao.StudentDao.insertStudent&quot;</span>;<br>        <span class="hljs-keyword">int</span> result = sqlSession.insert(sqlId, <span class="hljs-keyword">new</span> Student(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-string">&quot;123456789&quot;</span>, <span class="hljs-number">15</span>));<br>        <span class="hljs-comment">// 注意：mybatis 默认不是自动提交事务的，所以在 insert，update，delete 之后要手工提交事务</span><br>        sqlSession.commit();<br><br>        System.out.println(result);<br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查询语句执行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210423/image-20210421221004673.5ax3k2x4fk40.png" alt="image-20210421221004673"></p></li></ol><h3 id="三、主要类介绍"><a href="#三、主要类介绍" class="headerlink" title="三、主要类介绍"></a>三、主要类介绍</h3><p><code>Resources</code>：mybatis 中的一个类，<strong>负责读取主配置文件</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">InputStream inputStream = Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-config.xml&quot;</span>);<br></code></pre></td></tr></table></figure><p><code>SqlSessionFactoryBuilder</code>：只有一个功能：<strong>用于创建 SqlSessionFactory 对象</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SqlSessionFactory factory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder.build(inputStream);<br></code></pre></td></tr></table></figure><p><code>SqlSessionFactory（接口）</code>：重量级对象，该对象在创建时耗时长、使用资源多，在整个项目中，有一个就够用了。作用：<strong>获取 SqlSession 对象</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">SqlSession sqlSession = factory.openSession();<br></code></pre></td></tr></table></figure><ul><li>SqlSessionFactory 的默认实现类是 DefaultSqlSessionFactory</li><li>方法 <code>openSession</code>：<ul><li>openSession() 无参：获取的是<strong>非自动提交事务</strong>的 SqlSession 对象。</li><li>openSession(boolean autoCommit)：<strong>自己设置是否自动提交事务（true 表示自动提交）</strong>，并获得对应的 SqlSession 对象</li></ul></li></ul><p><code>SqlSession（接口）</code>：定义了操作数据库的方法，增删改查，事务提交，事务回滚。</p><ul><li>SqlSession 的默认实现类是 DefaultSqlSession</li><li>SqlSession 对象<strong>不是线程安全的</strong>，在执行完 sql 语句后，要使用 <strong>.close() 方法关闭</strong>它。</li></ul><h3 id="四、使用-mybatis-的动态代理"><a href="#四、使用-mybatis-的动态代理" class="headerlink" title="四、使用 mybatis 的动态代理"></a>四、使用 mybatis 的动态代理</h3><h4 id="1-什么是动态代理"><a href="#1-什么是动态代理" class="headerlink" title="1. 什么是动态代理"></a>1. 什么是动态代理</h4><p>mybatis 通过 SqlSession 的方法动态帮你创建 dao 接口的实现类，通过实现类来执行 sql。</p><h4 id="2-使用动态代理"><a href="#2-使用动态代理" class="headerlink" title="2. 使用动态代理"></a>2. 使用动态代理</h4><ol><li><p>封装工具类，通过工具类获取 SqlSession 对象。</p><p><code>cn.yechen.util.MyBatisUtils.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisUtils</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory factory;<br><br>    <span class="hljs-comment">// SqlSessionFactory 对象在程序中只需要一个，因此将创建的代码写在静态代码块中，只在类加载的时候创建一次</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// 读取主配置文件</span><br>        String rescourse = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>        InputStream inputStream = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            inputStream = Resources.getResourceAsStream(rescourse);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">// 创建 SqlSessionFactory 对象</span><br>        factory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取 SqlSession 对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> SqlSession 对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span> </span>&#123;<br>        SqlSession sqlSession = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span> (factory != <span class="hljs-keyword">null</span>) &#123;<br>            sqlSession = factory.openSession();<br>        &#125;<br>        <span class="hljs-keyword">return</span> sqlSession;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用动态代理查询所有学生</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectStudent</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 获取 SqlSession 对象</span><br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br><br>        <span class="hljs-comment">// 使用 mybatis 的动态代理生成的接口实现类</span><br>        StudentDao mapper = sqlSession.getMapper(StudentDao.class);<br>System.out.println(studentDao.getClass().getName());<br>        <br>        List&lt;Student&gt; studentList = mapper.selectStudents();<br>        <span class="hljs-keyword">for</span> (Student student : studentList) &#123;<br>            System.out.println(student);<br>        &#125;<br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210423/image-20210421221211689.26u54jt4qhzw.png" alt="image-20210421221211689"></p></li></ol><h4 id="3-使用动态代理的要求"><a href="#3-使用动态代理的要求" class="headerlink" title="3. 使用动态代理的要求"></a>3. 使用动态代理的要求</h4><ol><li>dao 接口和 mapper 文件放在一个目录下。</li><li>dao 接口和 mapper 文件名称一致。</li><li>mapper 文件中的 namespace 的值要和 dao 接口的全限定名称一致。</li><li>mapper 文件中的 <select><insert><update><delete> 标签的 id 值与接口中的方法一致。</li><li>dao 接口中不要使用重载方法，保证 mapper 文件中的 id 值是唯一的。</li></ol><h3 id="五、sql-中的参数传递"><a href="#五、sql-中的参数传递" class="headerlink" title="五、sql 中的参数传递"></a>五、sql 中的参数传递</h3><h4 id="一个参数时"><a href="#一个参数时" class="headerlink" title="一个参数时"></a>一个参数时</h4><p>在 sql 语句中使用 <code>#&#123;任意字符&#125;</code> 来传值。</p><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudentById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.yechen.entity.Student&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span><br>    select id,name,email,age from student where id=#&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中：</p><p><code>&lt;paramterType&gt;</code>：表示 dao 接口中方法参数的数据类型，值是 java 类型的全限定名称，或者是 MyBatis 中已经设置好的别名。<strong>这个属性是可选的</strong>，因为 MyBatis 可以通过<strong>类型处理器（TypeHandler）推断出具体传入语句的参数</strong>，默认值为未设置（unset）。</p><p><strong>MyBatis  如何执行对数据库的操作：</strong></p><ol><li><p>mybatis 会创建 Connection、PreparedStatement 对象。</p></li><li><p>获取 sql 语句，将 #{} 使用占位符 ? 代替。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String sql = <span class="hljs-string">&quot;select id,name,email,age from student where id=?&quot;</span>;<br></code></pre></td></tr></table></figure></li><li><p>对 PreparedStatement 对象赋值，预编译 sql。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">preparedStatement = connection.prepareStatement(sql);<br></code></pre></td></tr></table></figure></li><li><p>向 sql 语句中赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">preparedStatement.setInt(<span class="hljs-number">1</span>, id);<br></code></pre></td></tr></table></figure></li><li><p>执行 sql，获取结果集。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ResultSet resultSet = preparedStatement.executeQuery();<br></code></pre></td></tr></table></figure></li><li><p>将查询结果封住为 resultType 属性的执行的类型，返回给对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">Student student = <span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">while</span>(resultSet.next()) &#123;<br>    student = <span class="hljs-keyword">new</span> Student();<br>    student.setInt(resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>));<br>    student.setName(resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>));<br>    student.setEmail(resultSet.getString(<span class="hljs-string">&quot;email&quot;</span>));<br>    student.setAge(resultSet.getInt(<span class="hljs-string">&quot;age&quot;</span>));<br>&#125;<br><span class="hljs-keyword">return</span> student;<br></code></pre></td></tr></table></figure></li></ol><h4 id="多个参数时"><a href="#多个参数时" class="headerlink" title="多个参数时"></a>多个参数时</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>在接口中的方法参数使用 <code>@Param(&quot;自定义名称&quot;)</code> 命名，mapper 中使用 <code>#&#123;自定义名称&#125;</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// dao 接口</span><br><span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">selectMultiParam</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;studentName&quot;)</span> String name, <span class="hljs-meta">@Param(&quot;studentAge&quot;)</span> Integer age)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mapper 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectMultiParam&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.yechen.entity.Student&quot;</span>&gt;</span><br>    select id,name,email,age from student where name=#&#123;studentName&#125; or age=#&#123;studentAge&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>在接口中的方法==参数使用 java 对象==，在 mapper 中使用==java 对象的属性值作为 sql 参数的实际值==，这个 java 对象可以是使用时封装的 java 对象，也可以直接使用数据库对象类（po 类），mapper 中使用 #{java 对象属性名}。</p><ul><li><strong>最完整的语法格式</strong>：#{属性名，javaType=java对象中属性的类型，jdbcType=字段在数据库中的数据类型}  这种方法很少用。</li><li> <strong>使用简化的方式</strong>：#{属性名} 常用，javaType 和 jdbcType 的值 mybatis 可以通过反射获取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// dao 接口</span><br><span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">selectMultiObject</span><span class="hljs-params">(QueryParam queryParam)</span></span>;<br><br><span class="hljs-comment">// 自定义查询参数类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueryParam</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String queryName;<br>    <span class="hljs-keyword">private</span> Integer queryAge;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getQueryName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> queryName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setQueryName</span><span class="hljs-params">(String queryName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.queryName = queryName;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getQueryAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> queryAge;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setQueryAge</span><span class="hljs-params">(Integer queryAge)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.queryAge = queryAge;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mapper 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectMultiObject&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.yechen.entity.Student&quot;</span>&gt;</span><br>    select id, name, email, age from student where name=#&#123;queryName&#125; or age=#&#123;queryAge&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h5><p><strong>多个简单类型</strong>的参数通过<code>参数的位置</code>来传值。</p><ul><li>mybatis 3.4 之前，使用 #{0}，#{1}… 来传值</li><li>mybatis 3.4 之后，使用 <code>#&#123;arg0&#125;，#&#123;arg1&#125;...</code> 来传值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// dao 接口</span><br><span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">selectMultiPosition</span><span class="hljs-params">(String name, Integer age)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mapper 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectMultiPosition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.yechen.entity.Student&quot;</span>&gt;</span><br>    select id, name, email, age from student where name=#&#123;arg0&#125; or age=#&#123;arg1&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h5><p>在接口中的方法==参数使用 Map 类型对象==，mapper 中使用 ==#{map对象的 key}==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// dao 接口</span><br><span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">selectMultiMap</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span></span>;<br><br><span class="hljs-comment">// 测试方法</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectMultiMap</span><span class="hljs-params">()</span> </span>&#123;<br><br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    StudentDao mapper = sqlSession.getMapper(StudentDao.class);<br><br>    Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-comment">// key 为 “stuName”</span><br>    map.put(<span class="hljs-string">&quot;stuName&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>);<br>    <span class="hljs-comment">// key 为 &quot;stuAge&quot;</span><br>    map.put(<span class="hljs-string">&quot;stuAge&quot;</span>, <span class="hljs-number">15</span>);<br>    List&lt;Student&gt; studentList = mapper.selectMultiMap(map);<br><br>    <span class="hljs-keyword">for</span> (Student s : studentList) &#123;<br>        System.out.println(s);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mapper 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectMultiMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.yechen.entity.Student&quot;</span>&gt;</span><br>    select id, name, email, age from student where name=#&#123;stuName&#125; or age=#&#123;stuAge&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="参数传递时-和-的区别"><a href="#参数传递时-和-的区别" class="headerlink" title="参数传递时 # 和 $ 的区别"></a>参数传递时 # 和 $ 的区别</h4><p><code>#</code>：是 mybatis 中的占位符，告诉 mybatis 使用实际的参数值代替。并==使用 PrepareStatement 对象执行 sql 语句, #{…}代替 sql 语句的 “?”==。这样做更安全(可以避免 sql 注入)，更迅速，通常也是首选做法。</p><p><code>$</code>：是 mybatis 中的占位符，表示字符串替换，告诉 mybatis 使用 <code>$</code> 包含的“字符串”替换所在位置。==使用 Statement 把 sql 语句和 ${…} 的内容连接起来==。主要用在替换表名，列名，不同列排序等操作。会有 sql 注入等安全风险。</p><h3 id="六、sql-的返回结果"><a href="#六、sql-的返回结果" class="headerlink" title="六、sql 的返回结果"></a>六、sql 的返回结果</h3><h4 id="1、resultType-属性"><a href="#1、resultType-属性" class="headerlink" title="1、resultType 属性"></a>1、resultType 属性</h4><p><code>resultType</code>：属性指定的是结果类型，sql 语句执行完成之后，mybatis 调用指定的 java 类的无参构造方法，创建对应的对象。使用时要保证指定 java 类中的属性和数据库字段的名称要一致，并存在属性对应的 get 和 set 方法，mybatis 会将 ResultSet 对象中的指定列值赋给同名的属性。</p><p><code>resultType 属性值</code>可以是：</p><ul><li>类型的全限定名称，比如类 Integer 就要写成 java.lang.Integer。</li><li>由 mybatis 官方文档中指定的常用类型的别名，如 java。lang.Integer 的别名就是 int。</li></ul><h5 id="当返回值是-Map-类型的时候"><a href="#当返回值是-Map-类型的时候" class="headerlink" title="当返回值是 Map 类型的时候"></a>当返回值是 <code>Map</code> 类型的时候</h5><p>==执行完 sql 后，会将列名赋给 map 的 key，列值赋给 map 的 value。==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// dao 接口</span><br><span class="hljs-function">Map&lt;Object, Object&gt; <span class="hljs-title">selectMapById</span><span class="hljs-params">(Integer id)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mapper 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectMapById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.util.Map&quot;</span>&gt;</span><br>    select id,name,email from student where id=#&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试类</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectMapById</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    StudentDao mapper = sqlSession.getMapper(StudentDao.class);<br>    Map&lt;Object, Object&gt; objectObjectMap = mapper.selectMapById(<span class="hljs-number">3</span>);<br>    System.out.println(objectObjectMap);<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210423/image.4u997xac6aa0.png" alt="image"></p><h4 id="2、定义自定义类型别名"><a href="#2、定义自定义类型别名" class="headerlink" title="2、定义自定义类型别名"></a>2、定义自定义类型别名</h4><h5 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h5><p>在 mybatis 主配置文件中的 <code>&lt;typeAliases&gt;</code> 标签中定义，使用 <code>&lt;typeAlias&gt;</code> 标签自定义别名。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mybatis-config.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cn.yechen.dao.Student&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;student&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>type 属性：表示类型的全限定名称</li><li>alias 属性：表示自定义别名</li></ul><h5 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h5><p>在 mybatis 主配置文件中的 <code>&lt;typeAliases&gt;</code> 标签中定义，使用 <code>&lt;package&gt;</code> 标签指定包名，该包下的所有类名就是别名了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mybatis-config.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cn.yechen.dao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>name 属性：表示指定的包名，包中的所有类名就是别名。</li></ul><p>==使用时隐患==：当使用 <code>&lt;package&gt;</code> 标签定义了两个包，此时在两个包中存在同名的类，此时 mybatis 就不能区分出两个类，程序就会抛出异常。</p><h4 id="3、当列名和属性名不一致的时候的解决方法"><a href="#3、当列名和属性名不一致的时候的解决方法" class="headerlink" title="3、当列名和属性名不一致的时候的解决方法"></a>3、当列名和属性名不一致的时候的解决方法</h4><h5 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h5><p>使用 <code>&lt;resultMap&gt;</code> 标签：表示<strong>结果映射</strong>，指定 SQL 语句中的列名和 java 对象中的属性的对应关系，你可以自定义哪个列赋给哪个属性。<strong>resultMap 和 resultType 不能一起用，二选其一</strong>。</p><p>使用步骤：</p><ol><li><p>先定义一个 resultMap，自其中写上类名和属性一一对应的关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// cn.yechen.vo.SelectStudent</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SelectStudent</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Integer studentId;<br>    <span class="hljs-keyword">private</span> String studentName;<br>    <span class="hljs-keyword">private</span> String studentEmail;<br>    <span class="hljs-keyword">private</span> Integer studentAge;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mapper 文件 --&gt;</span><br><span class="hljs-comment">&lt;!-- id 属性值就是待会儿使用时 resultMap 属性的属性值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cn.yechen.vo.SelectStudent&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        对于主键列，使用 &lt;id&gt; 标签</span><br><span class="hljs-comment">        column：数据库中的列名</span><br><span class="hljs-comment">        property：java 类型的属性名</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;studentId&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        对于非主键类，使用 &lt;result&gt; 标签</span><br><span class="hljs-comment">        column：数据库中的列名</span><br><span class="hljs-comment">        property：java 类型的属性名</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;studentName&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;studentEmail&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;studentAge&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在 select 标签中使用 resultMap，值是定义时设定的 id 值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mapper 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllStudent&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;studentMap&quot;</span>&gt;</span><br>    select id,name,email,age from student<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h5 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h5><p>使用 resultType 指定要使用的 java 类的全限定名称，但在写 sql 语句的时候为每一列指定一个别名（==使用 sql 中的语法 as，给列名重命名==），这个别名和 java 类中的属性相一致。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mapper 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllStudent2&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.yechen.vo.SelectStudent&quot;</span>&gt;</span><br>    select id as studentId,name as studentName,email as studentEmail,age as studentAge from student<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4、模糊查询"><a href="#4、模糊查询" class="headerlink" title="4、模糊查询"></a>4、模糊查询</h4><h5 id="第一种方法-1"><a href="#第一种方法-1" class="headerlink" title="第一种方法"></a>第一种方法</h5><p>在 java 代码中将 like 之后的值全部传过来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// dao 接口类</span><br><span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">selectLikeOne</span><span class="hljs-params">(String name)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mapper 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectLikeOne&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.yechen.entity.Student&quot;</span>&gt;</span><br>    select id,name,email,age from student where name like #&#123;name&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试方法</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectLikeOne</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    StudentDao mapper = sqlSession.getMapper(StudentDao.class);<br>    <span class="hljs-comment">// 传递的值就是 like 之后的全部值</span><br>    List&lt;Student&gt; studentList = mapper.selectLikeOne(<span class="hljs-string">&quot;%李%&quot;</span>);<br>    <span class="hljs-keyword">for</span> (Student student : studentList) &#123;<br>        System.out.println(student);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210423/image.3azw0mmj5we0.png" alt="image"></p><h5 id="第二种方式-1"><a href="#第二种方式-1" class="headerlink" title="第二种方式"></a>第二种方式</h5><p>在 mapper 文件中拼接 like 的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// dao 接口</span><br><span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">selectLikeTwo</span><span class="hljs-params">(String name)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mapper 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectLikeTwo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.yechen.entity.Student&quot;</span>&gt;</span><br>    select id,name,email,age from student where name like &quot;%&quot; #&#123;name&#125; &quot;%&quot;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试方法</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectLikeTwo</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    StudentDao mapper = sqlSession.getMapper(StudentDao.class);<br>    List&lt;Student&gt; studentList = mapper.selectLikeTwo(<span class="hljs-string">&quot;李&quot;</span>);<br>    <span class="hljs-keyword">for</span> (Student student : studentList) &#123;<br>        System.out.println(student);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210423/image.2d8jqff3hp1c.png" alt="image"></p><h3 id="七、动态-sql"><a href="#七、动态-sql" class="headerlink" title="七、动态 sql"></a>七、动态 sql</h3><p><strong>动态sql</strong>: sql 的内容是变化的，==可以根据条件获取到不同的 sql 语句==。主要是 where 部分发生变化。</p><h4 id="if-标签"><a href="#if-标签" class="headerlink" title="if  标签"></a>if  标签</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 语法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;java 对象中的属性满足的条件&quot;</span>&gt;</span><br>    满足条件下拼接上去的 sql<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 比如：当 name 属性不为 null 且不为空时拼接 sql --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span><br>    name = #&#123;name&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure><p>==不足==：当 if 中的条件不全满足的时候，拼接后的 sql 语法可能有问题。会存在 and 或 or 的多出或者缺少，导致 sql语法错误，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// dao 接口</span><br><span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">selectStudentIf</span><span class="hljs-params">(Student student)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mapper 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudentIf&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.yechen.entity.Student&quot;</span>&gt;</span><br>    select id,name,email,age from student where<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span><br>        name = #&#123;name&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age &gt; 0&quot;</span>&gt;</span><br>        or age &gt; #&#123;age&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试方法</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectStudentIf</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    StudentDao mapper = sqlSession.getMapper(StudentDao.class);<br>    List&lt;Student&gt; studentList = mapper.selectStudentIf(<span class="hljs-keyword">new</span> Student(<span class="hljs-number">0</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">14</span>));<br>    <span class="hljs-keyword">for</span> (Student student : studentList) &#123;<br>        System.out.println(student);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>错误：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210423/image.6o2zm4yirwo0.png" alt="image"></p><h4 id="where-标签"><a href="#where-标签" class="headerlink" title="where  标签"></a>where  标签</h4><p>标签中包含多个 <if> 标签，当 if 标签中有一个及以上的条件成立时，mybatis 会在 sql 语句后加一个 where 关键字并去掉（添加）条件成立的 if 标签 sql 语句中多余（需要）的 and 或者 or。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// dao 接口</span><br><span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">selectStudentWhere</span><span class="hljs-params">(Student student)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mapper 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudentWhere&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.yechen.entity.Student&quot;</span>&gt;</span><br>    select id,name,email,age from student<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span><br>            and name = #&#123;name&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age &gt; 0&quot;</span>&gt;</span><br>            or age &gt; #&#123;age&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">1. 当两个 if 都不成立时，sql 语句为：select id,name,email,age from student;</span><br><span class="hljs-comment">2. 当只有第一个 if 成立时，sql 语句为：select id,name,email,age from student where name=?;</span><br><span class="hljs-comment">3. 当只有第二个 if 成立时，sql 语句为：select id,name,email,age from student where age&gt;?;</span><br><span class="hljs-comment">4. 当两个 if 都成立时，sql 语句为：select id,name,email,age from student where name=? or age=?;</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试方法</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectStudentWhere</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    StudentDao mapper = sqlSession.getMapper(StudentDao.class);<br>    List&lt;Student&gt; studentList = mapper.selectStudentWhere(<span class="hljs-keyword">new</span> Student(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">for</span> (Student student : studentList) &#123;<br>        System.out.println(student);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210423/image.7j49dfbyg9o0.png" alt="image"></p><h4 id="foreach-标签"><a href="#foreach-标签" class="headerlink" title="foreach  标签"></a>foreach  标签</h4><p>==用来循环 java 中的数组、list 集合的，主要用在 sql 语句的 in 语句中。==</p><h5 id="使用一：list-中保存的是基本数据类型"><a href="#使用一：list-中保存的是基本数据类型" class="headerlink" title="使用一：list 中保存的是基本数据类型"></a>使用一：list 中保存的是基本数据类型</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    #&#123;item中自定义的用来编历的变量&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">1. collection：表示接口中方法参数的类型，如果是数组，属性值就是 “array”，如果是集合，属性值就是 “list”</span><br><span class="hljs-comment">2. item：自定义的，代表数组或集合成员中的一个变量。</span><br><span class="hljs-comment">3. open：循环开始时的字符。</span><br><span class="hljs-comment">4. close：循环结束时的字符。</span><br><span class="hljs-comment">5. separator：集合成员之间的分隔符。</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// dao 接口</span><br><span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">selectForeachOne</span><span class="hljs-params">(List&lt;Integer&gt; idList)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mapper 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectForeachOne&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.yechen.entity.Student&quot;</span>&gt;</span><br>    select id,name,email,age from student where id in<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;stuId&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>        #&#123;stuId&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试方法</span><br> <span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectForeachOne</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    StudentDao mapper = sqlSession.getMapper(StudentDao.class);<br>    List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    list.add(<span class="hljs-number">1</span>);<br>    list.add(<span class="hljs-number">2</span>);<br>    list.add(<span class="hljs-number">3</span>);<br>    list.add(<span class="hljs-number">4</span>);<br>    List&lt;Student&gt; studentList = mapper.selectForeachOne(list);<br>    <span class="hljs-keyword">for</span> (Student student : studentList) &#123;<br>        System.out.println(student);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210423/image.6y86x7qfwk80.png" alt="image"></p><h5 id="使用二：list-中保存的是引用数据类型"><a href="#使用二：list-中保存的是引用数据类型" class="headerlink" title="使用二：list 中保存的是引用数据类型"></a>使用二：list 中保存的是引用数据类型</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    #&#123;item中自定义的编历对象.对应的属性值&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">1. collection：表示接口中方法参数的类型，如果是数组，属性值就是 “array”，如果是集合，属性值就是 “list”</span><br><span class="hljs-comment">2. item：自定义的，代表数组或集合成员中的一个变量。</span><br><span class="hljs-comment">3. open：循环开始时的字符。</span><br><span class="hljs-comment">4. close：循环结束时的字符。</span><br><span class="hljs-comment">5. separator：集合成员之间的分隔符。</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// dao 接口</span><br><span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">selectForeachTwo</span><span class="hljs-params">(List&lt;Student&gt; stuList)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mapper 文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectForeachTwo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.yechen.entity.Student&quot;</span>&gt;</span><br>    select id,name,email,age from student where id in<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;stu&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>        #&#123;stu.id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 测试方法</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectForeachTwo</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>    StudentDao mapper = sqlSession.getMapper(StudentDao.class);<br>    List&lt;Student&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-number">1</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>));<br>    list.add(<span class="hljs-keyword">new</span> Student(<span class="hljs-number">2</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>));<br>    List&lt;Student&gt; studentList = mapper.selectForeachTwo(list);<br>    <span class="hljs-keyword">for</span> (Student student : studentList) &#123;<br>        System.out.println(student);<br>    &#125;<br>    sqlSession.close();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210423/image.qo1fthw2cgg.png" alt="image"></p><h4 id="sql-标签"><a href="#sql-标签" class="headerlink" title="sql  标签"></a>sql  标签</h4><p>==将高复用的 sql 语句放在 <sql> 标签中，实现 sql 的复用。==</p><p>使用步骤：</p><ol><li><p>先定义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;自定义的唯一名称，代表当前 sql&quot;</span>&gt;</span><br>    sql 语句<br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在 <select><insert> 等标签中使用 sql 语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;sql 标签中 id 的值&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="八、mybatis-主配置文件"><a href="#八、mybatis-主配置文件" class="headerlink" title="八、mybatis 主配置文件"></a>八、mybatis 主配置文件</h3><p>全局配置文件中，各个标签要按照如下顺序进行配置，因为mybatis加载配置文件的源码中是按照这个顺序进行解析的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 配置顺序如下</span><br><span class="hljs-comment">     properties  </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     settings</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     typeAliases</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     typeHandlers</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     objectFactory</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     plugins</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     environments</span><br><span class="hljs-comment">        environment</span><br><span class="hljs-comment">            transactionManager</span><br><span class="hljs-comment">            dataSource</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     mappers</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 一个 mapper 标签指定一个 sql 映射文件的位置，从类路径（target/classes classes 就表示类路径）开始表示文件位置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;cn/yechen/dao/StudentDao.xml&quot;</span>/&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 也可以使用 class 属性，值是 dao 接口的全限定名称 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.dao.StudentDao&quot;</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- 批量注册，name 属性指向 dao 层的包，表示在该 dao 包下，所有的 mapper 映射文件全部自动注册 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cn.yechen.dao&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html">参考官方文档</a></p><h3 id="九、mybatis-逆向工程"><a href="#九、mybatis-逆向工程" class="headerlink" title="九、mybatis 逆向工程"></a>九、mybatis 逆向工程</h3><p><a href="https://www.cnblogs.com/zzjlxy-225223/p/12458344.html">https://www.cnblogs.com/zzjlxy-225223/p/12458344.html</a></p><h3 id="十、参考文档"><a href="#十、参考文档" class="headerlink" title="十、参考文档"></a>十、参考文档</h3><p><a href="https://blog.csdn.net/vcj1009784814/article/details/106391982">mybatis看这一篇就够了，简单全面一发入魂</a></p><p><a href="https://mybatis.org/mybatis-3/zh/index.html">官方文档</a></p>]]></content>
    
    
    <categories>
      
      <category>SSM 框架</category>
      
      <category>MyBatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM 框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring</title>
    <link href="/2021/09/13/SSM%E6%A1%86%E6%9E%B6-2021-09-13-Spring/"/>
    <url>/2021/09/13/SSM%E6%A1%86%E6%9E%B6-2021-09-13-Spring/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-Spring-概述"><a href="#1-Spring-概述" class="headerlink" title="1. Spring 概述"></a>1. Spring 概述</h2><h3 id="Spring-简介"><a href="#Spring-简介" class="headerlink" title="Spring 简介"></a>Spring 简介</h3><p>Spring 是一个开源框架，是一个与 2003 年兴起的<strong>轻量级的 Java 开发框架</strong>，最早由<strong>Rod Johnson</strong>创建，目的是为了解决企业级应用开发的业务逻辑层和其他各层的<strong>耦合问题</strong>。它是一个分层的 JavaSE/JavaEE full-stack（一站式）轻量级开源框架，为开发 Java 应用程序提供全面的基础架构支持。Spring 负责基础架构，因此 Java 开发者可以专注于应用程序的开发。Spring 最根本的使命是<strong>解决企业级应用开发的复杂性，即简化 Java 开发</strong>。</p><p><strong>Spring的核心是控制反转（IoC）和面向切面编程（AOP）</strong></p><h3 id="Spring-由那些模块构成？"><a href="#Spring-由那些模块构成？" class="headerlink" title="Spring 由那些模块构成？"></a>Spring 由那些模块构成？</h3><p>Spring 总共大约有 20 个模块， 由 1300 多个不同的文件构成。 而这些组件被分别整合在==核心容器（Core Container）== 、 ==AOP（Aspect Oriented Programming）==和==设备支持（Instrmentation）== 、==数据访问与集成（Data Access/Integeration）== 、==Web==、 ==消息（Messaging）== 、 ==测试（Test）== 等 6 个模块中。 以下是 Spring 5 的模块结构图：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210709/image.5qfahkg992o0.png" alt="image"></p><ul><li><strong>spring core</strong>：提供了框架的基本组成部分，包括控制反转（Inversion of Control，IOC）和依赖注入（Dependency Injection，DI）功能。</li><li><strong>spring beans</strong>：提供了BeanFactory，是工厂模式的一个经典实现，Spring 将管理对象称为 Bean。</li><li><strong>spring context</strong>：构建于 core 封装包基础上的 context 封装包，提供了一种框架式的对象访问方法。</li><li><strong>spring jdbc</strong>：提供了一个JDBC的抽象层，消除了烦琐的JDBC编码和数据库厂商特有的错误代码解析， 用于简化 JDBC。</li><li><strong>spring aop</strong>：提供了面向切面的编程实现，让你可以自定义拦截器、切点等。</li><li><strong>spring web</strong>：提供了针对 Web 开发的集成特性，例如文件上传，利用 servlet listeners 进行 ioc 容器初始化和针对 Web 的 ApplicationContext。</li><li><strong>spring test</strong>：主要为测试提供支持的，支持使用 JUnit 或 TestNG 对 Spring 组件进行单元测试和集成测试。</li></ul><h2 id="2-Spring-的控制反转-Ioc"><a href="#2-Spring-的控制反转-Ioc" class="headerlink" title="2. Spring 的控制反转(Ioc)"></a>2. Spring 的控制反转(Ioc)</h2><p>控制反转即 IoC (Inversion of Control)，它把传统上由程序代码直接<strong>操控的对象的调用权交给容器</strong>，通过容器来实现对象组件的装配和管理。所谓的“控制反转”概念就是对组件对象控制权的转移，从程序代码本身转移到了外部容器。</p><p>Spring Ioc 的实现方法是通过<strong>依赖注入 DI（Dependency Injection）</strong>，即在程序运行过程中，若需要调用另一个对象协助时，无须在代码中创建被调用者，而是依赖于外部容器，由外部容器创建后传递给程序。</p><p>Spring 的依赖注入对调用者与被调用者几乎没有任何要求，完全支持对象之间依赖关系的管理。</p><blockquote><p>Spring 容器是一个超级大工厂，负责创建、管理所有的 Java 对象，这些 Java 对象被称为 Bean。Spring 容器管理着容器中 Bean 之间的依赖关系，Spring 使用“依赖注入”的方式来管理 Bean 之间的依赖关系。使用 IoC 实现对象之间的解耦和。</p></blockquote><h3 id="2-1-简单使用-Spring-Ioc"><a href="#2-1-简单使用-Spring-Ioc" class="headerlink" title="2.1  简单使用 Spring Ioc"></a>2.1  简单使用 Spring Ioc</h3><ol><li>创建一个接口类（SomeService.java）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.yechen.service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SomeService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>创建一个接口实现类（SomeServiceImpl.java），并实现 doSome 方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.yechen.service.impl;<br><br><span class="hljs-keyword">import</span> cn.yechen.service.SomeService;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SomeServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">SomeService</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SomeServiceImpl</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了 SomeServiceImpl 的无参数构造方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;执行了 SomeService 的 doSome() 方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>在 resources 目录下新建 Spring 的配置文件（applictionContext.xml）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    Spring 的配置文件</span><br><span class="hljs-comment">    1. beans：是根标签，Spring 中把 java 对象称为 bean</span><br><span class="hljs-comment">    2. spring-beans.xsd：是约束文件</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        Spring 要创建某个类的对象，需要声明 bean</span><br><span class="hljs-comment">        &lt;bean class=&quot;&quot; id=&quot;&quot;/&gt;</span><br><span class="hljs-comment">        class：类的全限定名称，不能是接口（因为 Spring 使用反射机制创建对象）</span><br><span class="hljs-comment">        id：自定义变量名，代表对象，Spring 通过这个名称找到对象</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        Spring 会将创建好后的对象存放到容器内部的一个 map 中</span><br><span class="hljs-comment">        key 是 id 的值，即对象名称，</span><br><span class="hljs-comment">        value 是指生成的对象</span><br><span class="hljs-comment">        即执行语句：</span><br><span class="hljs-comment">springMap.put(&quot;someService&quot;, new SomeServiceImpl());</span><br><span class="hljs-comment">        之后通过 key 取 value，就可以拿到生成的对象了</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        一个 bean 标签生成一个 java 对象</span><br><span class="hljs-comment">    --&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.service.impl.SomeServiceImpl&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;someService&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.service.impl.SomeServiceImpl&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;someService1&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        使用 Spring 创建一个非自定义的已存在的对象</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.util.Date&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nowTime&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>测试使用（AppTest.java）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.yechen;<br><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.junit.Assert.assertTrue;<br><br><span class="hljs-keyword">import</span> cn.yechen.service.SomeService;<br><span class="hljs-keyword">import</span> cn.yechen.service.impl.SomeServiceImpl;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 1. 指定 Spring 配置文件的路径</span><br>        String config = <span class="hljs-string">&quot;applicationContext.xml&quot;</span>;<br>        <span class="hljs-comment">// 2. 创建表示 Spring 容器的对象</span><br>        ApplicationContext applicationContext = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(config);<br>        <span class="hljs-comment">// 3. 调用对象方法通过 id，从容器中获取对象</span><br>        SomeService someService = (SomeService) applicationContext.getBean(<span class="hljs-string">&quot;someService&quot;</span>);<br>        someService.doSome();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>发现：通过 debug 发现 bean 指定实例创建时机是 执行 <code>getBean()</code> 方法的时候</strong></p><h3 id="2-2-基于-XML-的DI"><a href="#2-2-基于-XML-的DI" class="headerlink" title="2.2  基于 XML 的DI"></a>2.2  基于 XML 的DI</h3><p>bean 实例在调用无参构造器创建对象后，就要对 bean 对象的属性进行初始化。初始化是由容器自动完成的，称为注入。</p><p>根据注入方式的不同，常用的有两类：<strong>构造注入、set 注入</strong>。</p><h4 id="2-2-1-构造注入"><a href="#2-2-1-构造注入" class="headerlink" title="2.2.1  构造注入"></a>2.2.1  构造注入</h4><p>Spring 通过调用类的有参数构造方法，在创建对象的同时，在构造方法中给属性赋值构造注入使用标签 &lt;constructor-arg&gt;，一个 &lt;constructor-arg&gt; 表示构造方法的一个参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.io.File&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;parent&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;C:\Users\30117\Desktop\Spring学习&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;child&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;beans.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>属性有：</p><ul><li>name：表示构造方法的形参名</li><li>index：表示构造方法的参数的位置，参数从左往右位置是 0，1，2… 的顺序</li><li>value：构造方法的形参类型是简单类型的，使用 value</li><li>ref：构造方法的形参类型是引用类型的，使用 ref</li></ul><p>name 和 index 属性可以任选其一，在赋值顺序与构造方法中变量顺序一致时，可以省略 index</p><h4 id="2-2-2-通过-set-注入（设值注入）"><a href="#2-2-2-通过-set-注入（设值注入）" class="headerlink" title="2.2.2  通过 set 注入（设值注入）"></a>2.2.2  通过 set 注入（设值注入）</h4><p>即 Spring 先调用类的无参构造方法创建对象，再调用类的 set 方法，通过 set 方法完成属性的赋值</p><ul><li><strong>简单类型的 set 注入：</strong></li></ul><p>简单类型：Spring 中规定 java 中的基本数据类型，包括包装类，以及 String，都是简单类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  一个 &lt;property&gt;只能给一个属性赋值 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;属性名称&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;给属性赋的值&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>【注意】：</p><p> 对于使用 set 注入赋值的类，一定要存在对应的 set 方法，否则会抛出异常。</p><p>对于 set 方法存在，但属性不存在情况，运行时不会出现异常，因为 Spring 只是去执行对应的 set 方法,有没有对应属性是不管的。因此可以理解，&lt;property&gt;  标签中的 name 属性只是一个标志，Spring 根据命名规则通过标志来寻找对应的 set 方法的，然后执行该方法。</p><ul><li><strong>引用数据类型的 set 注入：</strong>                          </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;属性名称&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bean标签的id（对象名称）&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>其他类型的 set 注入（数组，list，map，set，null，配置文件）</strong></li></ul><p>首先编写一个实体类 Student.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 此处省略 set 方法 和 toString 方法，但是一定要写</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Address address;<br>    <span class="hljs-keyword">private</span> String[] booksName;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; hobbies;<br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; course;<br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; games;<br>    <span class="hljs-keyword">private</span> Properties info;<br>    <span class="hljs-keyword">private</span> String wife;<br>&#125;<br></code></pre></td></tr></table></figure><p>spring 配置文件 applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.domain.Address&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;city&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;绍兴&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stress&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上虞小越&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.domain.Student&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 普通值注入 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;叶尘&quot;</span>/&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- bean 注入 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;address&quot;</span>/&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 数组注入 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;booksName&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>西游记<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>红楼梦<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>水浒传<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>三国演义<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- list 集合注入 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>唱<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>跳<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>rap<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- map 集合注入 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;course&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;语文&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;110&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;数学&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;130&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;英语&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;125&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- set 集合注入 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;games&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>LOL<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>COC<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>BOB<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- null 值注入 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wife&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 配置文件注入 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;info&quot;</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;学号&quot;</span>&gt;</span>A001<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;性别&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;班级&quot;</span>&gt;</span>高一三班<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;班主任&quot;</span>&gt;</span>小明<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试类 MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        Student student = (Student) context.getBean(<span class="hljs-string">&quot;student&quot;</span>);<br>        System.out.println(student);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         输出：</span><br><span class="hljs-comment">         Student&#123;</span><br><span class="hljs-comment">             name=&#x27;叶尘&#x27;,</span><br><span class="hljs-comment">             address=Address&#123;city=&#x27;绍兴&#x27;, stress=&#x27;上虞小越&#x27;&#125;,</span><br><span class="hljs-comment">             booksName=[西游记, 红楼梦, 水浒传, 三国演义],</span><br><span class="hljs-comment">             hobbies=[唱, 跳, rap],</span><br><span class="hljs-comment">             course=&#123;语文=110, 数学=130, 英语=125&#125;,</span><br><span class="hljs-comment">             games=[LOL, COC, BOB],</span><br><span class="hljs-comment">             info=&#123;班主任=小明, 班级=高一三班, 学号=A001, 性别=男&#125;,</span><br><span class="hljs-comment">             wife=&#x27;null&#x27;</span><br><span class="hljs-comment">         &#125;</span><br><span class="hljs-comment">        */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-3-p-命名空间注入、c-命名空间注入（扩展方式注入）"><a href="#2-2-3-p-命名空间注入、c-命名空间注入（扩展方式注入）" class="headerlink" title="2.2.3  p 命名空间注入、c 命名空间注入（扩展方式注入）"></a>2.2.3  p 命名空间注入、c 命名空间注入（扩展方式注入）</h4><p>实体类 User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 要写 setter 和 构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>&#125;<br></code></pre></td></tr></table></figure><p>spring 配置文件 userbeans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:c</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/c&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        首先要引入 xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="hljs-comment">        p 命名空间的注入，可以直接注入属性的值，p 是 property 的简称</span><br><span class="hljs-comment">        其本质还是 set 注入</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.domain.User&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;yechen&quot;</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">&quot;18&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        首先要引入 xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br><span class="hljs-comment">        c 命名空间的注入，本质是使用构造方法注入，c 是  constructor 的简称</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.domain.User&quot;</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">&quot;zhangsan&quot;</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">&quot;19&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUser</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;userBeans.xml&quot;</span>);<br>    <span class="hljs-comment">// 这里可以对 getBeans 方法添加第二参数，指定从容器中获取对象的类型，这样就可以不用强转了</span><br>    User user = context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意点：p 命名空间和 c 命名空间不能直接使用，需要导入 xml 约束</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;<br>xmlns:c=&quot;http://www.springframework.org/schema/c&quot;<br></code></pre></td></tr></table></figure><h2 id="3-bean-的作用域"><a href="#3-bean-的作用域" class="headerlink" title="3.  bean 的作用域"></a>3.  bean 的作用域</h2><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210710/image.7by6pemzz6s0.png" alt="image">        </p><h3 id="3-1-Singleton（单例模式，默认机制）"><a href="#3-1-Singleton（单例模式，默认机制）" class="headerlink" title="3.1 Singleton（单例模式，默认机制）"></a>3.1 Singleton（单例模式，默认机制）</h3><p>在 spring 容器中只创建 bean 定义的对象的一个实例，当从容器中多次获取实例时，获取到了总是同一个。</p><p>实例创建的时机是加载配置文件的时候，即 <code>ApplicationContext context = new ClassPathXmlApplicationContext(&quot;配置文件&quot;);</code></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210710/image.300r4e7q2i60.png" alt="image"></p><p><strong>验证：</strong></p><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 要写上 setter</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了 User 的无参构造方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 p 命名空间创建一个 bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 默认就是单例，所有也可以不写 scope=&quot;singleton&quot;--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.domain.User&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;yechen&quot;</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">&quot;18&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSingleton</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;userBeans.xml&quot;</span>);<br>    User user = context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>    User user2 = context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>    System.out.println(user == user2);<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：只调用了一个构造方法，从容器中获取到的两个对象是同一个。</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210709/image.2vapf1qolws0.png" alt="image"></p><h3 id="3-2-Prototype（原型模式）"><a href="#3-2-Prototype（原型模式）" class="headerlink" title="3.2 Prototype（原型模式）"></a>3.2 Prototype（原型模式）</h3><p>每当 bean 被注入到另一个 bean 中，或者通过<code>getBean()</code>容器上的方法调用来获取 bean 的时候都会创建一个 bean 实例。</p><p>创建实例的时机不是在加载 spring 配置文件时候，是在调用 <code>getBean()</code> 方法时候创建多实例对象。</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210709/image.f5423tyh6r4.png" alt="image"></p><p><strong>测试：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.domain.User&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;yechen&quot;</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">&quot;18&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;user2&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPrototype</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;userBeans.xml&quot;</span>);<br>    User user = context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>    User user2 = context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>    System.out.println(user == user2);<br>&#125;<br></code></pre></td></tr></table></figure><p>测试结果：在 getBean() 方法执行的时候，都会创建一个新的 User 实例。</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210709/image.5a8s0nokeow0.png" alt="image"></p><h3 id="3-3-其余的模式"><a href="#3-3-其余的模式" class="headerlink" title="3.3 其余的模式"></a>3.3 其余的模式</h3><p><code>request</code>、<code>session</code>、<code>application</code>、<code>webSocket</code> 只能在 <strong>Web</strong> 开发中使用，这里不详细了解。</p><h2 id="4-bean-的自动装配"><a href="#4-bean-的自动装配" class="headerlink" title="4. bean 的自动装配"></a>4. bean 的自动装配</h2><p>自动装配是 Spring 满足 bean 依赖的一种方式，Spring 会在上下文中自动寻找并自动给 bean 装配属性！</p><p>在 Spring 中有三种装配的方式：</p><ol><li>在 xml 文件中显式地配置（之前就是）。</li><li>在 java 文件中显式地配置（之后再讲）。</li><li>隐式的自动装配 bean（就在这里）。</li></ol><p>测试环境：</p><p>实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;喵喵喵！&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;汪汪汪！&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 存在 setter</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Cat cat;<br>    <span class="hljs-keyword">private</span> Dog dog;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-1-使用-XML-实现自动装配"><a href="#4-1-使用-XML-实现自动装配" class="headerlink" title="4.1 使用 XML 实现自动装配"></a>4.1 使用 XML 实现自动装配</h3><h4 id="4-1-1-byName-自动装配"><a href="#4-1-1-byName-自动装配" class="headerlink" title="4.1.1 byName 自动装配"></a>4.1.1 byName 自动装配</h4><p>Spring 会自动在容器上下文中查找和当前 bean 中需要装配的属性同名（即同 id）的 bean，并自动装配。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.domain.Cat&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog111&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.domain.Dog&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;people&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.domain.People&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;叶尘&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>使用条件：</strong>装配进去的 bean 要和属性==同名同类型==</p><p><strong>弊端：</strong>当不存在同名 bean 或者同名 bean 的类型与需要装配的属性的类型不一致时，自动装配会出现问题。</p><h4 id="4-1-2-byType-自动装配"><a href="#4-1-2-byType-自动装配" class="headerlink" title="4.1.2 byType 自动装配"></a>4.1.2 byType 自动装配</h4><p>Spring 会自动在容器上下文中查找和当前 bean 中需要装配的属性同类型（即同 class）的 bean，并自动装配。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.domain.Cat&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog111&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.domain.Dog&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;people&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.domain.People&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;叶尘&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>使用条件：</strong>装配进去的 bean 要和属性==同类型==</p><p><strong>弊端：</strong>当有多个类型（class）一致的 bean 时，通过属性自动装配就会出现问题</p><h3 id="4-2-使用注解实现自动装配"><a href="#4-2-使用注解实现自动装配" class="headerlink" title="4.2 使用注解实现自动装配"></a>4.2 使用注解实现自动装配</h3><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210709/image.7gdi1c112c00.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210709/image.6k15wryxllw0.png" alt="image"></p><blockquote><p>如果想要使用注解自动装配，需要现在配置文件中<strong>导入约束（context 约束），并配置注解的支持</strong></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-2-1-Autowired-注解"><a href="#4-2-1-Autowired-注解" class="headerlink" title="4.2.1 @Autowired 注解"></a>4.2.1 @Autowired 注解</h4><p><code>@Autowired</code> 注释，它可以对类<strong>成员变量、方法及构造函数</strong>进行标注，完成自动装配的工作。 通过 @Autowired的使用来消除 set ，get方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Cat cat;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Dog dog;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">People</span><span class="hljs-params">(Cat cat, Dog dog)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.cat = cat;<br>        <span class="hljs-keyword">this</span>.dog = dog;<br>    &#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">play</span><span class="hljs-params">(Cat cat, Dog dog)</span> </span>&#123;<br>        cat.shout();<br>        dog.shout();<br>    &#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCat</span><span class="hljs-params">(Cat cat)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.cat = cat;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@Autowired</code> 注解 在默认情况下是在 Ioc 容器中根据类型匹配（<code>byType</code>）注入，当存在多个类型相同的 bean 时，才会根据名称匹配注入（<code>byName</code>）。</p><p>==<strong>优先级：byType —&gt;  byName —&gt;  Qualifier</strong>==</p><p>在 <code>@Autowired</code> 注解中存在一个<code>required</code>属性，默认为 true，当一个注入点（属性）不需要或者不能注入时，可以将该属性标记为非必需，即 <code>required = false</code>；</p><p>如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired(required = false)</span><br>    <span class="hljs-keyword">private</span> Cat cat;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Dog dog;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-2-Qualifler-注解"><a href="#4-2-2-Qualifler-注解" class="headerlink" title="4.2.2 @Qualifler 注解"></a>4.2.2 @Qualifler 注解</h4><p>如果 <code>@Autowired</code> 自动装配的环境比较复杂（<strong>存在多个同类型的 bean，同时与属性名称又都不相同</strong>），自动装配无法通过这一个注解完成的时候，我们可以使用 <code>@Qualifler(value = &quot;容器中bean的id&quot;)</code>，来指定唯一的 bean 对象注入。</p><p>如，配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 这里定义了俩个同类型的 bean，同时和属性名又不一致 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.domain.Cat&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.domain.Cat&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.domain.Dog&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.domain.Dog&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;people&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.domain.People&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;yechen&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果此时只使用 <code>@AutoWired </code>，Spring 是不能完成自动装配的，因为一个类型有多个 bean，byType 匹配不到，又因为所有 bean 的 id 和此时需要注入的属性名都不相同，byName 也匹配不到，就会报错。</p><p>此时就需要 <code>@Qualifler</code> 了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这样就可以指定为一的 bean 来注入了</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(value = &quot;cat1&quot;)</span><br>    <span class="hljs-keyword">private</span> Cat cat;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Qualifier(value = &quot;dog2&quot;)</span><br>    <span class="hljs-keyword">private</span> Dog dog;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">// 由于这里使用的是 xml 注入，name 属性一定要有 set 方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-3-Resource-注解"><a href="#4-2-3-Resource-注解" class="headerlink" title="4.2.3 @Resource 注解"></a>4.2.3 @Resource 注解</h4><p><code>@Resource</code> 的作用和 @Autowired 一样，只不过 @Autowired 是按 byType 自动注入，而 @Resource 默认按 byName 自动注入，而且还提供了 <code>name</code> 和 <code>type</code> 两个属性，其含义也容易理解，分别按 byName 和 byType 注入。</p><p>不考虑注入的顺序，@Resource 的功能是将 @Autowired 和 @Qualifler 结合起来</p><p>==<strong>优先级：byName —&gt;  byType</strong>==</p><p>对于上面的配置文件，使用 @Resource 注解就可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 这样就可以指定为一的 bean 来注入了</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">People</span> </span>&#123;<br>    <span class="hljs-meta">@Resource(name = &quot;cat1&quot;)</span><br>    <span class="hljs-keyword">private</span> Cat cat;<br><br>    <span class="hljs-meta">@Resource(name = &quot;dog2&quot;)</span><br>    <span class="hljs-keyword">private</span> Dog dog;<br><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">// 由于这里使用的是 xml 注入，name 属性一定要有 set 方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-4-Autowired与-Resource异同"><a href="#4-2-4-Autowired与-Resource异同" class="headerlink" title="4.2.4 @Autowired与@Resource异同"></a>4.2.4 @Autowired与@Resource异同</h4><ol><li><p>@Autowired 与 @Resource 都可以用来装配 bean。都可以写在字段上，或写在setter方法上。</p></li><li><p><code>@Autowired</code> 默认按类型装配（属于 spring 规范），默认情况下必须要求依赖对象必须存在，如果要允许 null 值，可以设置它的 required 属性为 false，如：@Autowired(required=false) ，如果我们想使用名称装配可以结合 @Qualififier 注解进行使用。</p></li><li><p><code>@Resource</code>（属于J2EE 规范），默认按照名称进行装配，名称可以通过name 属性进行指定。如果没有指定name 属性且没有找到同名 bean，==就会按照类型进行装配==。但是需要注意的是，如果 name 属性一旦指定，就只会按照名称进行装配。</p></li><li><p>它们的作用相同都是用注解方式注入对象，但执行顺序不同。@Autowired 先 byType，@Resource 先byName。</p></li></ol><h2 id="Bean-的生命周期"><a href="#Bean-的生命周期" class="headerlink" title="Bean 的生命周期"></a>Bean 的生命周期</h2><ol><li><p>通过构造器创建 bean 实例（无惨构造方法）</p></li><li><p>对 bean 实例的属性赋值（调用 set 方法）</p></li><li><p>把 bean 实例传递给 bean 后置处理，执行后置处理器的 <code>postProcessBeforeInitialization()</code> 方法 </p></li><li><p>调用 bean 的初始化方法（方法需要自己配置，并在 bean 标签内指定）</p></li><li><p>把 bean 实例传递给 bean 后置处理，执行后置处理器的 <code>postProcessAfterInitialization()</code> 方法 </p></li><li><p>bean 实例可以使用了（对象获取到了）</p></li><li><p>当容器关闭时，调用 bean 的销毁的方法（方法需要自己配置，并在 bean 标签内指定）</p></li></ol><p>创建放入容器的类 User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;（1）通过构造器创建 bean 实例&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name, Integer age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;（2）对 bean 实例的属性赋值&quot;</span>);<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(Integer age)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;（2）对 bean 实例的属性赋值&quot;</span>);<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;add......&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 初始化方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initMethod</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;（4）调用 bean 的初始化方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 销毁方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroyMethod</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;（7）调用 bean 的销毁的方法&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建 bean 后置处理器（需要实现 BeanPostProcessor 接口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBeanPostProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BeanPostProcessor</span> </span>&#123;<br><br>    <span class="hljs-comment">// 在实例调用 initMethod 方法前调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;（3）在初始化之前执行的方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br><br>    <span class="hljs-comment">// 在实例调用 initMethod 方法后调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">postProcessAfterInitialization</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;（5）在初始化之后执行的方法&quot;</span>);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 spring 配置文件中定义 bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 通过 init-method 和 destroy-method 标签指定初始化和销毁的方法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.entity.User&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;initMethod&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;destroyMethod&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;zhangsan&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置后置处理器（此时这个后置处理器是容器中的所有对象使用的） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myBeanPostProcessor&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.MyBeanPostProcessor&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>测试 bean 的生命周期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBeanLifeCycle</span><span class="hljs-params">()</span> </span>&#123;<br>    ClassPathXmlApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean1.xml&quot;</span>);<br>    User user = context.getBean(<span class="hljs-string">&quot;user&quot;</span>, User.class);<br>    System.out.println(<span class="hljs-string">&quot;（6）bean 实例可以使用了&quot;</span>);<br>    System.out.println(user);<br>    <span class="hljs-comment">// 关闭容器，调用销毁方法</span><br>    context.close();<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210910/image.72ab9n6dpxk0.png" alt="image"></p><h2 id="5-基于注解的-DI"><a href="#5-基于注解的-DI" class="headerlink" title="5. 基于注解的 DI"></a>5. 基于注解的 DI</h2><p>在 spring4 之后，想要使用注解形式，必须得要引入aop的包。</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210711/image.2cktgntn4akg.png" alt="image"></p><p>并且在配置文件当中，还得要引入一个context约束。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-1-定义-Bean-的注解-Component"><a href="#5-1-定义-Bean-的注解-Component" class="headerlink" title="5.1 定义 Bean 的注解 @Component"></a>5.1 定义 Bean 的注解 @Component</h3><p>我们之前要声明 bean 是在 xml 配置文件中使用 &lt;bean&gt; 标签声明，但是这种方法在复杂的开发中会显得不方便，所以在实际开发中，我们一般会使用注解直接声明 bean。</p><ol><li>首先要在配置文件中写上 spring 需要扫描那些包下的注解</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--指定注解扫描包，此时 spring 会自动扫描该包及其子包下的所有注解--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;cn.yechen.domain&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 不使用默认的 filter，自己配置 filter，此时配置只扫描带有 @Controller 注解的类 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;cn.yechen&quot;</span> <span class="hljs-attr">use-default-filters</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:include-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 指定不扫描那些注解，这里是不扫描 @Controller 注解 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;cn.yechen&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:exclude-filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;annotation&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context:component-scan</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210711/image.2bsr7zwcdbb4.png" alt="image"></p><ol start="2"><li>在指定的包下编写类，使用注解 <code>@Component</code> 声明 bean</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用该注解相当于在配置文件中配置 &lt;bean id=&quot;user&quot; class=&quot;cn.yechen.domain.User&quot;/&gt;</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@Component</code> 不指定 value 属性，bean 的 id 是类名的首字母小写。</p><p>当需要自定义 bean 的 id 时，就可以设置 value 属性，如 <code>@Componet(value = &quot;user111&quot;)</code></p><h3 id="5-2-简单类型属性注入-Value"><a href="#5-2-简单类型属性注入-Value" class="headerlink" title="5.2 简单类型属性注入 @Value"></a>5.2 简单类型属性注入 @Value</h3><p>需要在属性上使用注解 <code>@Value</code>，该注解的 value 属性用于指定要注入的值。</p><p>使用该注解完成属性注入时，类中无需 setter。当然，若属性有 setter，则也可将其加到 setter 上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;user111&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@Value(&quot;yechen&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Value(&quot;18&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上语句相当于在配置文件中声明 bean 并 set 注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user111&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.domain.User&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;yechen&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;18&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-3-衍生注解"><a href="#5-3-衍生注解" class="headerlink" title="5.3 衍生注解"></a>5.3 衍生注解</h3><p>Spring 还提供了 3 个创建 bean 的注解，分别对应 web 开发中的三层架构。</p><ul><li><code>@Repository</code> ：用于对 DAO 中的实现类进行注解。</li><li><code>@Service</code> ：用于对 Service 层中的实现类进行注解。</li><li><code>@Controller</code> ：用于对 Controller 层中的类进行注解。</li></ul><p>这三个注解与 @Component 都可以创建对象，但这三个注解还有其他的含义，@Service <strong>创建业务层对象，业务层对象可以加入事务功能</strong>，@Controller  <strong>注解创建的对象可以作为处理器接收用户的请求</strong>。</p><p>@Repository，@Service，@Controller 是对 @Component 注解的细化，标注不同层的对象。即持久层对象，业务层对象，控制层对象。</p><h3 id="5-4-自动装配注解"><a href="#5-4-自动装配注解" class="headerlink" title="5.4 自动装配注解"></a>5.4 自动装配注解</h3><p>[详见](###4.2 使用注解实现自动装配)</p><h3 id="5-5-作用域-Scope"><a href="#5-5-作用域-Scope" class="headerlink" title="5.5 作用域 @Scope"></a>5.5 作用域 @Scope</h3><p>在类上标注</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 单例模式</span><br><span class="hljs-meta">@Scope(&quot;singleton&quot;)</span><br><span class="hljs-comment">// 原型模型</span><br><span class="hljs-meta">@Scope(&quot;prototype&quot;)</span><br></code></pre></td></tr></table></figure><h3 id="5-6-注解和-XML-的对比"><a href="#5-6-注解和-XML-的对比" class="headerlink" title="5.6 注解和 XML 的对比"></a>5.6 注解和 XML 的对比</h3><p>注解的优点是：</p><ul><li>方便</li><li>直观</li><li>高效（代码少，没有配置文件的书写那么复杂）</li></ul><p>但是弊端也显而易见：以硬编码的方式写入到 Java 代码中，修改是需要重新编译代码的。</p><p>XML 方式的优点是：</p><ul><li>配置和代码是分离的</li><li>在 XML 中做修改，无需编译代码，只需要重启服务器即可将新的配置加载</li></ul><p>XML 的缺点是：编写麻烦，效率低，对于大型项目过于复杂。</p><p>XML 和注解的最佳实践：</p><ul><li>使用 XML 来管理 bean</li><li>使用注解来完成属性的注入</li></ul><h2 id="6-使用-Java-的方法配置-Spring"><a href="#6-使用-Java-的方法配置-Spring" class="headerlink" title="6. 使用 Java 的方法配置 Spring"></a>6. 使用 Java 的方法配置 Spring</h2><p>这是 Spring 的一个新特性，可以完全不是 Spring 的 XML 配置了，全权交给 Java 来做！</p><p>JavaConfig 原来是 Spring 的一个子项目，它通过 Java 类的方式提供 Bean 的定义信息，在 Spring4 的版本， JavaConfig 已正式成为 Spring4 的核心功能 。</p><p><strong>测试使用</strong></p><ol><li>编写一个实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-comment">// 使用注解注入值</span><br>    <span class="hljs-meta">@Value(&quot;yechen&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>新建一个confifig配置包，编写一个AppConfig 配置类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 代表这是一个配置类</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">// 通过方法注册一个 bean，这里的返回值就 Bean 的类型，方法名就是 bean 的id！</span><br>    <span class="hljs-comment">// 同时也可以给 value 属性赋值给 bean 添加别名</span><br>    <span class="hljs-meta">@Bean(&quot;user111&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>测试使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">userTest</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(AppConfig.class);<br>    User getUser = context.getBean(<span class="hljs-string">&quot;user111&quot;</span>, User.class);<br>    System.out.println(getUser);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>如果要导入别的配置，可以使用注解 @Imput</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 代表这是一个配置类</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-comment">// 代表引入名为 AppConfig2 的配置文件</span><br><span class="hljs-meta">@Imput(AppConfig2.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppConfig</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>关于这种Java类的配置方式，我们在之后的SpringBoot 和 SpringCloud中还会大量看到，我们需要知道这些注解的作用即可！</p><h2 id="7-Spring-AOP（面向切面编程）"><a href="#7-Spring-AOP（面向切面编程）" class="headerlink" title="7.Spring AOP（面向切面编程）"></a>7.Spring AOP（面向切面编程）</h2><h3 id="7-1-什么是-AOP"><a href="#7-1-什么是-AOP" class="headerlink" title="7.1 什么是 AOP"></a>7.1 什么是 AOP</h3><blockquote><p><code>AOP（Aspect Oriented Programming）</code>意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP 是 OOP 的延续，是软件开发中的一个热点，也是 Spring 框架中的一个重要内容，是函数式编程的一种衍生范型。利用 AOP 可以对业务逻辑的各个部分进行<strong>隔离</strong>，从而<strong>使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率</strong>。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210711/image.2c4h1id7iahw.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210711/image.7jnd1q5yk7w0.png" alt="image"></p><p>面向切面编程，就是将<strong>交叉业务逻辑</strong>封装成切面，<strong>利用 AOP 容器的功能将切面织入到主业务逻辑中</strong>。所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志、缓存等。</p><p>若不使用 AOP，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样，会使主业务逻辑变的混杂不清。</p><p>例如，转账，在真正转账业务逻辑前后，需要权限控制、日志记录、加载事务、结束事务等交叉业务逻辑，而这些业务逻辑与主业务逻辑间并无直接关系。但它们的代码量所占比重能达到总代码量的一半甚至还多。它们的存在，不仅产生了大量的“冗余”代码，还大大干扰了主业务逻辑 — 转账。</p><h3 id="7-2-AOP-编程术语"><a href="#7-2-AOP-编程术语" class="headerlink" title="7.2 AOP 编程术语"></a>7.2 AOP 编程术语</h3><ul><li><code>Aspect</code>：切面，<strong>表示增强功能的一个动作</strong>，就是一堆代码，完成某一个功能的过程。非业务功能，常见的切面功能有日志， 事务， 统计信息， 参数检查， 权限验证。</li><li><code>JoinPoint</code>：连接点 ，连接业务方法和切面的位置。 就目标类中的某一个业务方法。</li><li><code>JoinCut</code>：切入点 ，指多个连接点方法的集合。多个方法。</li><li><code>Target Object</code>：目标对象，给哪个类的方法添加增强功能，哪个类就是目标对象。</li><li><code>Advice</code>：通知，定义（通知）了在连接点做什么，即执行了什么增强方法。同时提供了<strong>具体的通知类型</strong>。<ul><li><code>前置通知[Before]</code>：在连接点前面执行，前置通知不会影响连接点的执行，除非此处抛出异常。 </li><li><code>正常返回通知[AfterReturning ]</code>：在连接点正常执行完成后执行，如果连接点抛出异常，则不会执行。 </li><li><code>异常返回通知[AfterThrowing]</code>：在连接点抛出异常后执行。 </li><li><code>后置通知[After]</code>：在连接点执行完成后执行，不管是正常执行完成，还是抛出异常，都会执行返回通知中的内容。 </li><li><code>环绕通知[Around]</code>：环绕通知围绕在连接点前后，比如一个方法调用的前后。这是最强大的通知类型，能在方法调用前后自定义一些操作。环绕通知还需要负责决定是继续处理 join point （调用ProceedingJoinPoint 的 proceed 方法）还是中断执行。 </li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210712/image.4qtoma1h7zs0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210712/image.27pgcetd536s.png" alt="image"></p><p>[实际例子理解 AOP 术语](###7.5 从实际例子中理解 AOP 编程术语)</p><p><strong>AOP基本运行流程</strong>，参考 <a href="https://blog.csdn.net/qq_27052085/article/details/86689217">AOP基本运行流程</a></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210712/image.3ah6ixu4sa20.png" alt="image"></p><h3 id="7-3-AOP-的实现方法"><a href="#7-3-AOP-的实现方法" class="headerlink" title="7.3 AOP 的实现方法"></a>7.3 AOP 的实现方法</h3><h4 id="7-3-1-底层原理"><a href="#7-3-1-底层原理" class="headerlink" title="7.3.1 底层原理"></a>7.3.1 底层原理</h4><p>AOP 底层，就是采用动态代理模式实现的。**采用了两种代理：<code>JDK 的动态代理</code>，与 <code>CGLIB 的动态代理</code>**。</p><ul><li><strong>JDK 的动态代理</strong>：使用 JDK 中自带的 <code>Proxy</code>、<code>Method</code>、<code>InvocationHandler</code> 类创建代理对象。但是 JDK 的动态代理要求目标类必须是接口实现类。</li><li><strong>CGLIB 动态代理</strong>：是第三方的工具库，创建代理对象，其原理是<code>继承</code>。通过继承目标类，创建子类，子类就是代理对象。由于使用的是继承，所以目标类不能是 final 修饰的，方法也不能是 final 的。</li></ul><p>动态代理的作用：</p><ul><li>在目标类源代码不改变的情况下，增加功能。</li><li>减少代码的重复。</li><li>专注业务逻辑代码。</li><li>解耦合，让业务功能和日志、事务等业务功能分离。</li></ul><p><strong>AOP 将动态代理规范化，将动态代理的实现步骤、方式都定义好了，让开发人员使用统一的方式来实现动态代理。</strong></p><h4 id="7-3-2-AOP-的实现"><a href="#7-3-2-AOP-的实现" class="headerlink" title="7.3.2 AOP 的实现"></a>7.3.2 AOP 的实现</h4><p>Spring 在内部实现了 AOP 规范，能做 AOP 的工作，主要在处理事务是使用，当但是有与 Spring 的 AOP 实现比较笨重，项目开放中很少使用 Spring 的 AOP 实现。</p><p>在开发中比较常用的是 <code>AspectJ</code>，一个开源的 AOP 框架。在 Spring 中已经集成了 AspectJ 框架，通过 Spring 就能使用。</p><p>AspectJ 框架实现 AOP 有两种方式：</p><ol><li><p>使用 xml 的配置文件 ： 配置全局事务。[详见](####9.4.2 使用 AspectJ 框架 AOP 功能 )</p></li><li><p>使用注解，我们在项目中要做 AOP 功能，一般都使用注解。[详见](##7.4 AspectJ 的实际使用（以前置通知为例）)</p><p>AspectJ 有 5 个注解，分别对应 Advice 中的 5 种通知类型。</p><ul><li><code>@Before</code></li><li><code>@AfterReturning</code></li><li><code>@AfterThrowing</code></li><li><code>@AfterReturning</code></li><li><code>@Around</code></li></ul></li></ol><h4 id="7-3-3-AspectJ-的切入点表达式"><a href="#7-3-3-AspectJ-的切入点表达式" class="headerlink" title="7.3.3 AspectJ 的切入点表达式"></a>7.3.3 <strong>AspectJ 的切入点表达式</strong></h4><p>AspectJ 定义了专门的表达式用于指定切入点。表达式的原型是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">execution(<br>modifiers-pattern?<br>ret-type-pattern <br>declaring-type-pattern?name-pattern(param-pattern)<br><span class="hljs-keyword">throws</span>-pattern?<br>)<br></code></pre></td></tr></table></figure><ul><li><p>modifiers-pattern：访问权限类型（可选）</p></li><li><p><code>ret-type-pattern</code>：返回值类型</p></li><li><p>declaring-type-pattern：包名类名（可选）</p></li><li><p><code>name-pattern(param-pattern)</code>：方法名(参数类型和参数个数)</p></li><li><p>throws-pattern：抛出异常类型（可选）</p><p>？表示可选的部分</p></li></ul><p><strong>以上表达式共 4 个部分：</strong></p><p>execution(访问权限 ==方法返回值== ==方法声明(参数)== 异常类型)</p><p>切入点表达式要匹配的对象就是目标方法的方法名。所以，execution 表达式中明显就是方法的签名。注意，表达式中黑色文字表示可省略部分，各部分间用空格分开。在其中可以使用以下符号：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210712/image.42iqdllb5ak0.png" alt="image"></p><p>举例：</p><ul><li><p>execution(public * *(..))     指定切入点为：任意公共方法。</p></li><li><p>execution(* set*(..))    指定切入点为：任何一个以“set”开始的方法</p></li><li><p>execution(* com.xyz.service.*.*(..))     指定切入点为：定义在 com.xyz.service 包里的任意类的任意方法</p></li><li><p>execution(* com.xyz.service..*.*(..))    指定切入点为：定义在 service 包或者子包里的任意类的任意方法</p></li><li><p>execution(* *..service.*.*(..))    指定所有包下的 serivce 子包下所有类（接口）中所有方法为切入点</p></li></ul><h3 id="7-4-AspectJ-的实际使用（以前置通知为例）"><a href="#7-4-AspectJ-的实际使用（以前置通知为例）" class="headerlink" title="7.4 AspectJ 的实际使用（以前置通知为例）"></a>7.4 AspectJ 的实际使用（以前置通知为例）</h3><ol><li>新建 Maven 项目，加入依赖。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring 依赖 --&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- AspectJ 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210712/image.58pmzf9x2340.png" alt="image"></p><ol start="2"><li>创建目标类（接口和它的实现类），之后要做的就是给类中的方法增加功能。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 目标类接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(String name, Integer age)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(String name)</span></span>;<br>&#125;<br><br><span class="hljs-comment">// 目标类接口实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">save</span><span class="hljs-params">(String name, Integer age)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;目标方法：用户【姓名=&quot;</span>+name+<span class="hljs-string">&quot;,年龄=&quot;</span>+age+<span class="hljs-string">&quot;】已保存&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;目标方法：用户【&quot;</span>+name+<span class="hljs-string">&quot;】已删除&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>创建切面类（普通类）</li></ol><ul><li>在类的上面加入 <code>@Aspect</code> 注解，代表当前类是一个切面。</li><li>在类中定义方法，方法就是切面中要执行的功能代码，在方法上面加入 AspectJ 中的通知注解（如 @Before），并写入切入点表达式（如 execution(public * *(..)) 表示切入点为所有公开的方法）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// AspectJ 框架中的注解，代表当前类是切面类，是用来给业务方法增强功能的类，这个类中有切面的功能代码</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    定义方法，定义切面功能</span><br><span class="hljs-comment">        要求：</span><br><span class="hljs-comment">            1.公共方法（public）</span><br><span class="hljs-comment">            2.无返回值</span><br><span class="hljs-comment">            3.名称自定义</span><br><span class="hljs-comment">            4.可以没有参数，但如果需要参数，需要使用规定的参数类型</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     在方法上方添加通知注解</span><br><span class="hljs-comment">        存在属性 value，指定切入点表达式，表示切面功能的执行位置</span><br><span class="hljs-comment">     当前指定的切入点只包含了 save() 这个方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Before(&quot;execution(public void cn.yechen.aspect.UserService.save(String, Integer))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printDateTime</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;前置通知，切面功能：&quot;</span> + <span class="hljs-keyword">new</span> Date());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>创建 Spring 的配置文件，声明对象，将对象交给容器统一管理。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 目标对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.aspect.impl.UserServiceImpl&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 切面类对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myAspect&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.aspect.MyAspect&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        声明自动代理生成器：使用 AspectJ 框架内部功能，创建目标对象的代理对象</span><br><span class="hljs-comment">        aspectj-autoproxy：会把 Spring 容器中所有已经指定好的目标对象，一次性都生成代理对象</span><br><span class="hljs-comment">        创建代理对象是在内存中实现的，修改了目标对象在内存中的结构。</span><br><span class="hljs-comment">        所以从容器中取得的目标对象就是被修改后的代理对象</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> /&gt;</span><br></code></pre></td></tr></table></figure><ol start="5"><li>测试，从容器中获取目标对象（已经经过代理的对象），通过代理对象执行功能，实现 AOP。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">aspectTest1</span><span class="hljs-params">()</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        UserService userService = context.getBean(<span class="hljs-string">&quot;userService&quot;</span>, UserService.class);<br>        <span class="hljs-comment">// 输出从容器中获取的对象</span><br>        System.out.println(<span class="hljs-string">&quot;userService=&quot;</span>+userService.getClass().getName());<br>        <span class="hljs-comment">// 是指定的连接点</span><br>        System.out.println(<span class="hljs-string">&quot;========================&quot;</span>);<br>        userService.save(<span class="hljs-string">&quot;yechen&quot;</span>, <span class="hljs-number">18</span>);<br>        <span class="hljs-comment">// 不是指定的连接点</span><br>        System.out.println(<span class="hljs-string">&quot;========================&quot;</span>);<br>        userService.delete(<span class="hljs-string">&quot;yechen&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210712/image.6p9tkaj93pc0.png" alt="image"></p><h3 id="7-5-从实际例子中理解-AOP-编程术语"><a href="#7-5-从实际例子中理解-AOP-编程术语" class="headerlink" title="7.5 从实际例子中理解 AOP 编程术语"></a>7.5 从实际例子中理解 AOP 编程术语</h3><p>首先 <code>Aspect</code>，表示的就是一个切面类，用来给业务方法提供增强功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>切面类中可以写许多增强方法，即 <code>Advice</code>，并且通过通知注解来指定这些增强方法的调用时机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br>    <span class="hljs-comment">// 这里就是一个 Advice，但此时还没有定义切入点，就是不知道要在哪个目标类哪个方法中调用增强方法</span><br>    <span class="hljs-meta">@Before()</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printDateTime</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;前置通知，切面功能：&quot;</span> + <span class="hljs-keyword">new</span> Date());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在通知注解中存在一个 value 属性，就可以指定切入点 <code>JoinCut</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br>    <span class="hljs-comment">// 这里就指定了切入点是 cn.yechen.aspect 包下的 UserService 类中的 save(String, Integer) 方法，这样指定之后，在程序执行的过程中，一旦调用了 save() 方法，就会在 save() 前调用 printDateTime() 方法，执行增强功能</span><br>    <span class="hljs-meta">@Before(&quot;execution(public void cn.yechen.aspect.UserService.save(String, Integer))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printDateTime</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;前置通知，切面功能：&quot;</span> + <span class="hljs-keyword">new</span> Date());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然也可以扩大切入点的范围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br>    <span class="hljs-comment">// 这里就指定了切入点是 cn.yechen.aspect 包下的 UserService 类中的所有方法</span><br>    <span class="hljs-meta">@Before(&quot;execution(void cn.yechen.aspect.UserService.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printDateTime</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;前置通知，切面功能：&quot;</span> + <span class="hljs-keyword">new</span> Date());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因此可以理解连接点 <code>JoinPoint</code>，就是<code>目标类（Target Object）</code>中的一个方法，这里 <code>UserService</code> 类下的一个方法就是一个连接点，执行这些方法前都会调用增强功能。</p><p>==<strong>总结：</strong>==</p><blockquote><p><code>通知（Advice）</code>就是一个增强方法，它存在于一个<code>切面（Aspect）</code>中，可以通过注解指定它的调用时间，通过注解上的属性，可以指定<code>切入点（JoinCut）</code>，切入点是目标类中方法的集合，集合中的一个方法就是一个<code>连接点（JoinPoint）</code>，当一个目标类中的方法被调用时，只要这个方法存在于切入点，这个方法就是<code>连接点（JoinPoint）</code>，就会调用增强功能。</p></blockquote><h3 id="7-6-通知方法的定义"><a href="#7-6-通知方法的定义" class="headerlink" title="7.6 通知方法的定义"></a>7.6 通知方法的定义</h3><h4 id="7-6-1前置通知-Before"><a href="#7-6-1前置通知-Before" class="headerlink" title="7.6.1前置通知 Before"></a>7.6.1前置通知 Before</h4><p>在方法前使用注解 <code>@Before</code> 标记</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br>    <span class="hljs-meta">@Before(&quot;execution(* *.(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myBefore</span><span class="hljs-params">()</span> </span>&#123;<br>       <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法定义的要求：</strong> </p><ol><li>公共方法（public）</li><li>无返回值</li><li>名称自定义</li><li>可以没有参数，但如果需要参数，需要使用规定的参数类型（JoinPoint）</li></ol><p><code>JoinPoint</code> 参数可以在切面方法中获取相应连接点执行时的信息，即目标对象方法的信息，如方法名称，方法的实参等。</p><p>如果在切面功能中需要使用到方法的信息，就加入 JoinPoint 参数。</p><p><strong>==这个 JoinPoint 参数的值是有框架赋予的，必须处于是参数中的第一个位置。==</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br>    <span class="hljs-meta">@Before(&quot;execution(public void cn.yechen.aspect.UserService.save(String, Integer))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">MyBefore</span><span class="hljs-params">(JoinPoint joinPoint)</span> </span>&#123;<br>        Signature signature = joinPoint.getSignature();<br>        System.out.println(<span class="hljs-string">&quot;方法的签名（定义） = &quot;</span> + signature);<br>        System.out.println(<span class="hljs-string">&quot;方法的名称 = &quot;</span>+ signature.getName());<br>        Object[] args = joinPoint.getArgs();<br>        <span class="hljs-keyword">for</span> (Object o : args) &#123;<br>            System.out.println(<span class="hljs-string">&quot;参数 = &quot;</span> + o);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;前置通知，切面功能：&quot;</span> + <span class="hljs-keyword">new</span> Date());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">aspectTest1</span><span class="hljs-params">()</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        UserService userService = context.getBean(<span class="hljs-string">&quot;userService&quot;</span>, UserService.class);<br>        System.out.println(<span class="hljs-string">&quot;userService=&quot;</span>+userService.getClass().getName());<br>        <span class="hljs-comment">// 是指定的连接点</span><br>        System.out.println(<span class="hljs-string">&quot;========================&quot;</span>);<br>        userService.save(<span class="hljs-string">&quot;yechen&quot;</span>, <span class="hljs-number">18</span>);<br>        <span class="hljs-comment">// 不是指定的连接点</span><br>        System.out.println(<span class="hljs-string">&quot;========================&quot;</span>);<br>        userService.delete(<span class="hljs-string">&quot;yechen&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210712/image.60yh56ccy600.png" alt="image"></p><p>==五个通知注解中都可以使用参数 JoinPoint==</p><h4 id="7-6-2-返回通知-AfterReturning"><a href="#7-6-2-返回通知-AfterReturning" class="headerlink" title="7.6.2 返回通知 AfterReturning"></a>7.6.2 返回通知 AfterReturning</h4><p>在方法前使用注解 <code>@AfterReturning</code> 标记</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br>    <span class="hljs-meta">@AfterReturning(&quot;execution(* *.(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myAfterReturning</span><span class="hljs-params">()</span> </span>&#123;<br>       <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法定义的要求：</strong> </p><ol><li>公共方法（public）</li><li>无返回值</li><li>名称自定义</li><li>方法是有参数的，推荐是 Object，参数名自定义</li></ol><p><strong>@AfterReturning 中有两个参数</strong></p><ul><li><code>value</code>：指定切入点</li><li><code>retuening</code>：指定方法的返回值，需要通知方法上的形参名一致</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Student <span class="hljs-title">select</span><span class="hljs-params">()</span> </span>&#123;<br>        Student student = <span class="hljs-keyword">new</span> Student();<br>        student.setName(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        student.setAge(<span class="hljs-number">25</span>);<br>        System.out.println(<span class="hljs-string">&quot;目标方法：&quot;</span> + student);<br>        <span class="hljs-keyword">return</span> student;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br>    <span class="hljs-meta">@AfterReturning(value = &quot;execution(* cn.yechen.aspect.UserService.select())&quot;, returning = &quot;res&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myAfterReturning</span><span class="hljs-params">(Object res)</span> </span>&#123;<br>        ((Student) res).setName(<span class="hljs-string">&quot;wangwu&quot;</span>);<br>        ((Student) res).setAge(<span class="hljs-number">30</span>);<br>        System.out.println(<span class="hljs-string">&quot;正常返回通知：返回值为 = &quot;</span> + res);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">aspectTest1</span><span class="hljs-params">()</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        UserService userService = context.getBean(<span class="hljs-string">&quot;userService&quot;</span>, UserService.class);<br>        System.out.println(<span class="hljs-string">&quot;测试：&quot;</span> + userService.select());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210712/image.5p7h3esx7240.png" alt="image"></p><h4 id="7-6-3-环绕通知-Around"><a href="#7-6-3-环绕通知-Around" class="headerlink" title="7.6.3 环绕通知 Around"></a>7.6.3 环绕通知 Around</h4><p>在方法前使用注解 <code>@Around</code> 标记</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br>    <span class="hljs-meta">@Around(&quot;execution(* *.(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myAround</span><span class="hljs-params">()</span> </span>&#123;<br>       <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法定义的要求：</strong> </p><ol><li>公共方法（public）</li><li>必须有一个返回值，推荐使用 Object</li><li>名称自定义</li><li>方法是有参数的，固定的参数 <code>ProceedingJoinPoint</code></li></ol><p><strong>@Around 中有一个参数</strong></p><ul><li><code>value</code>：指定切入点</li></ul><p><strong>特点：</strong></p><ol><li>它是功能最强的，在目标方法前后都能增强功能。</li><li>可以控制目标方法是否被调用执行。</li><li>可以修改原来目标方法的执行结果，影响最后的调用结果。</li></ol><blockquote><p>环绕通知等同于 JDK 的动态代理，InvocationHandler 接口中的 invoken() 方法</p><p>参数 ProceedingJoinPoint 就等同于 Method，在方法中使用使用 ProceedingJoinPoint  对象来调用目标类方法的。</p></blockquote><p><strong>使用：</strong>环绕通知经常用用于处理事务，在目标方法之前开启事务，之后执行目标方法，在目标方法之后提交事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">(String name, Integer age)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;目标方法：用户【姓名=&quot;</span>+name+<span class="hljs-string">&quot;,年龄=&quot;</span>+age+<span class="hljs-string">&quot;】已找到&quot;</span>);<br>        <span class="hljs-keyword">return</span> name+<span class="hljs-string">&quot;同学&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br>    <span class="hljs-meta">@Around(value = &quot;execution(* cn.yechen.aspect.UserService.getName(String, Integer))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">myAround</span><span class="hljs-params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        <span class="hljs-comment">// 获取参数值</span><br>        Object[] args = proceedingJoinPoint.getArgs();<br>        <span class="hljs-comment">// 方法前增强</span><br>        System.out.println(<span class="hljs-string">&quot;环绕通知：在目标方法执行之前，输出时间【&quot;</span>+<span class="hljs-keyword">new</span> Date()+<span class="hljs-string">&quot;】&quot;</span>);<br>        <span class="hljs-comment">// 目标方法调用（可以添加调用条件）</span><br>        Object result = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span> (args != <span class="hljs-keyword">null</span> &amp;&amp; args.length &gt; <span class="hljs-number">1</span>) &#123;<br>            String name = (String) args[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;yechen&quot;</span>.equals(name)) &#123;<br>                result = proceedingJoinPoint.proceed();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 方法后增强</span><br>        System.out.println(<span class="hljs-string">&quot;环绕通知：在目标方法之后，提交事务&quot;</span>);<br>        <span class="hljs-comment">// 修改返回结果</span><br>        <span class="hljs-keyword">if</span> (result != <span class="hljs-keyword">null</span>) &#123;<br>            result = result + <span class="hljs-string">&quot;找到了&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            result = <span class="hljs-string">&quot;没找到&quot;</span>;<br>        &#125;<br>        <span class="hljs-comment">// 返回结果</span><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">aspectTest1</span><span class="hljs-params">()</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        UserService userService = context.getBean(<span class="hljs-string">&quot;userService&quot;</span>, UserService.class);<br>        System.out.println(userService.getName(<span class="hljs-string">&quot;yechen&quot;</span>, <span class="hljs-number">20</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当床底参数是符合的条件的时候，才会调用目标类方法</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210712/image.3ebx0ihsxjs0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210712/image.560jwltmcaw0.png" alt="image"></p><h4 id="7-6-4-异常通知-AfterThrowing"><a href="#7-6-4-异常通知-AfterThrowing" class="headerlink" title="7.6.4 异常通知 AfterThrowing"></a>7.6.4 异常通知 AfterThrowing</h4><p>在方法前使用注解 <code>@AfterThrowing</code> 标记</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br>    <span class="hljs-meta">@AfterThrowing(&quot;execution(* *.(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myAfterThrowing</span><span class="hljs-params">()</span> </span>&#123;<br>       <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法定义的要求：</strong> </p><ol><li>公共方法（public）</li><li>无返回值</li><li>名称自定义</li><li>方法存在参数 Exception 和 JoinPoint（不使用可以不写）</li></ol><p><strong>@AfterThrowing 中有两个参数</strong></p><ul><li><code>value</code>：指定切入点</li><li><code>throwing</code>：表示目标方法抛出的异常信息，变量名必须和方法的参数名一致</li></ul><p><strong>特点：</strong></p><ol><li>在目标方法抛出异常时执行</li><li>可以做异常的监控，监控目标方法执行的时候是不是有异常，如果有异常，可以进行一系列处理。</li></ol><p>==相当于对 try catch finally 语句中对于 catch 语句块的功能增强。==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">throwException</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;目标方法：抛出一个异常&quot;</span>);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception(<span class="hljs-string">&quot;在测试异常通知&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br>    <span class="hljs-meta">@AfterThrowing(value = &quot;execution(* cn.yechen.aspect.UserService.throwException())&quot;, throwing = &quot;e&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myAfterThrowing</span><span class="hljs-params">(JoinPoint joinPoint, Exception e)</span> </span>&#123;<br>        Signature signature = joinPoint.getSignature();<br>        System.out.println(<span class="hljs-string">&quot;方法的签名（定义） = &quot;</span> + signature);<br>        System.out.println(<span class="hljs-string">&quot;方法的名称 = &quot;</span>+ signature.getName());<br>        System.out.println(<span class="hljs-string">&quot;异常通知：&quot;</span> + e.getMessage());<br>        System.out.println(<span class="hljs-string">&quot;异常通知：已经解决异常&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">aspectTest1</span><span class="hljs-params">()</span> </span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        UserService userService = context.getBean(<span class="hljs-string">&quot;userService&quot;</span>, UserService.class);<br>        <span class="hljs-keyword">try</span> &#123;<br>            userService.throwException();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// e.printStackTrace();</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210712/image.4xtr27pawjk0.png" alt="image"></p><h4 id="7-6-5-后置通知-After"><a href="#7-6-5-后置通知-After" class="headerlink" title="7.6.5 后置通知 After"></a>7.6.5 后置通知 After</h4><p>在方法前使用注解 <code>@After</code> 标记</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br>    <span class="hljs-meta">@After(&quot;execution(* *.(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myAfter</span><span class="hljs-params">()</span> </span>&#123;<br>       <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法定义的要求：</strong> </p><ol><li>公共方法（public）</li><li>无返回值</li><li>名称自定义</li><li>可以没有参数，但如果需要参数，需要使用规定的参数类型（JoinPoint）</li></ol><p>==相当于对 try catch finally 语句中对于 finally 语句块的功能增强。不管目标方法是否执行执行成功，都会调用。==</p><p>==一般用来做资源清理工作。==</p><h3 id="7-7-PointCut-定义切入注解"><a href="#7-7-PointCut-定义切入注解" class="headerlink" title="7.7 @PointCut 定义切入注解"></a>7.7 @PointCut 定义切入注解</h3><p>当切面类中的通知方法有多个切入点的表达式是重复的，可以使用 @PointCut 注解定义和管理切入点，是切入表达式复用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(&quot;myPointCut()&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printDateTime</span><span class="hljs-params">(JoinPoint joinPoint)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;前置通知&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@After(&quot;myPointCut()&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myAfter</span><span class="hljs-params">(JoinPoint joinPoint)</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;后置通知&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 管理切入点</span><br><span class="hljs-meta">@Pointcut(value = &quot;execution(* cn.yechen.aspect.UserService.save(String, Integer))&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myPointCut</span><span class="hljs-params">()</span> </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-8-Spring-动态代理方式的选择"><a href="#7-8-Spring-动态代理方式的选择" class="headerlink" title="7.8 Spring 动态代理方式的选择"></a>7.8 Spring 动态代理方式的选择</h3><p><strong>当目标类是接口实现类时，默认使用 JDK 的动态代理。</strong></p><p>验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Service</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">// 接口实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Service</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;目标方法&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 切面类</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br>    <span class="hljs-meta">@Before(&quot;execution(* *..doSome())&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myBefore</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;功能增强&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;cn.yechen.proxy&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;service&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.proxy.ServiceImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myAspect&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.proxy.MyAspect&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">proxyTest</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    Service service = (Service) context.getBean(<span class="hljs-string">&quot;service&quot;</span>);<br>    System.out.println(service.getClass().getName());<br>    service.doSome();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210712/image.6csbzm28bf40.png" alt="image"></p><p><strong>当目标类是接口实现类时，可以修改配置文件使用 CGLIB 的动态代理。</strong></p><p>修改配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;cn.yechen.proxy&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;service&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.proxy.ServiceImpl&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myAspect&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.proxy.MyAspect&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 这里添加了一个属性 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> <span class="hljs-attr">proxy-target-class</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210712/image.69l4oo9hjf00.png" alt="image"></p><p><strong>当目标类是普通类是，默认使用 CGLIB 的动态代理。</strong></p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 目标类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Service</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;目标方法&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 切面类</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAspect</span> </span>&#123;<br>    <span class="hljs-meta">@Before(&quot;execution(* *..doSome())&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">myBefore</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;功能增强&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;cn.yechen.proxy&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;service&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.proxy.Service&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myAspect&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.proxy.MyAspect&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">proxyTest</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    Service service = (Service) context.getBean(<span class="hljs-string">&quot;service&quot;</span>);<br>    System.out.println(service.getClass().getName());<br>    service.doSome();<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210712/image.2exed3el04bo.png" alt="image"></p><h2 id="8-Spring-集成-MyBatis"><a href="#8-Spring-集成-MyBatis" class="headerlink" title="8. Spring 集成 MyBatis"></a>8. Spring 集成 MyBatis</h2><p>将 MyBatis 与 Spring 进行整合，主要解决的问题就是将 SqlSessionFactory 对象交由 Spring 来管理。所以，该整合，只需要将 SqlSessionFactory 的对象生成器 SqlSessionFactoryBean 注册在 Spring 容器中，再将其注入给 Dao 的实现类即可完成整合。</p><p>实现 Spring 与 MyBatis 的整合常用的方式：扫描的 Mapper 动态代理 Spring 像插线板一样，MyBatis 框架是插头，可以容易的组合到一起。插线板 Spring 插上 MyBatis，两个框架就是一个整体。</p><h4 id="第一步：创建测试工程"><a href="#第一步：创建测试工程" class="headerlink" title="第一步：创建测试工程"></a>第一步：创建测试工程</h4><p>创建一个 Maven 普通项目，在 pom.xml 文件中引入先关依赖和配置</p><p><strong>jar 包依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 单元测试 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Spring 核心 ioc --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Spring 事务 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- mybatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- mybatis 和 Spring 集成的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- mysql 驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 阿里的数据库连接池 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210713/image.xdo592kd0f4.png" alt="image"></p><p>构建项目结构</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210713/image.a7dv8fgg93c.png" alt="image"></p><h4 id="第二步：创建数据库"><a href="#第二步：创建数据库" class="headerlink" title="第二步：创建数据库"></a>第二步：创建数据库</h4><p>创建数据 springdb</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210713/image.2kw5d3454aw0.png" alt="image"></p><p>创建数据表 student</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210713/image.z9lzpb7r0wg.png" alt="image"></p><h4 id="第三步：创建-MyBatis-主配置文件"><a href="#第三步：创建-MyBatis-主配置文件" class="headerlink" title="第三步：创建 MyBatis 主配置文件"></a>第三步：创建 MyBatis 主配置文件</h4><p>在 resource 目录下创建 mybatis 的主配置文件 <code>mybatis-config.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 全局设置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 日志输出 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- mapper 映射文件注册 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cn.yechen.dao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>由于 mybatis 中内置的线程池功能有限，因此在实际项目中会使用其他功能强大的线程池，这里会使用阿里巴巴开源的 <strong>druid</strong>，因此在主配置文件中不在配置数据源。</p><h4 id="第四步：编写-Mapper-以及其他配置文件"><a href="#第四步：编写-Mapper-以及其他配置文件" class="headerlink" title="第四步：编写 Mapper 以及其他配置文件"></a>第四步：编写 Mapper 以及其他配置文件</h4><p>在 domain 包下创建实体类 Student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 要写上 setter 和 getter，这里就不写了</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 dao 包下创建 StudentDao 接口和 mapper 映射文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insertStudent</span><span class="hljs-params">(Student student)</span></span>;<br><br>    <span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">selectAllStudents</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>StudentDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;cn.yechen.dao.StudentDao&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 添加记录 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertStudent&quot;</span>&gt;</span><br>        insert into student (id, name, email, age)<br>        values (#&#123;id&#125;, #&#123;name&#125;, #&#123;email&#125;, #&#123;age&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 查询记录 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAllStudents&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.yechen.domain.Student&quot;</span>&gt;</span><br>        select id, name, email, age<br>        from student;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 service 包下创建 StudentService 接口及其实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentService</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">addStudent</span><span class="hljs-params">(Student student)</span></span>;<br><br>    <span class="hljs-function">List&lt;Student&gt; <span class="hljs-title">getStudentList</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>StudentServiceImpl，在类中引入 StudentDao 对象，通过 set 注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">StudentService</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> StudentDao studentDao;<br><br>    <span class="hljs-comment">// 使用 set 注入赋值</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStudentDao</span><span class="hljs-params">(StudentDao studentDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.studentDao = studentDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">addStudent</span><span class="hljs-params">(Student student)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> count = studentDao.insertStudent(student);<br>        <span class="hljs-keyword">return</span> count == <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Student&gt; <span class="hljs-title">getStudentList</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> studentDao.selectAllStudents();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写一个工具类，方便生成 UUID 为 id 赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UUIDUtil</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getUUID</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="第五步：创建-Spring-配置文件"><a href="#第五步：创建-Spring-配置文件" class="headerlink" title="第五步：创建 Spring 配置文件"></a>第五步：创建 Spring 配置文件</h4><p>创建 Spring 配置文件 <strong>applicationContext.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>1. 配置数据源 DataSource</strong>（由于 druid 会依据提供的 url 判断出要使用的数据库驱动，所以这里不再需要配置驱动）</p><p>详细配置信息详见<a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE">官方文档</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 数据库配置信息 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:db.properties&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 声明数据源 DataSource，作用是连接数据库 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxActive&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.maxActive&#125;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中的数据库配置信息文件 db.properties 位于 resource 目录下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">jdbc.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/springdb</span><br><span class="hljs-meta">jdbc.username</span>=<span class="hljs-string">root</span><br><span class="hljs-meta">jdbc.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-meta">jdbc.maxActive</span>=<span class="hljs-string">20</span><br></code></pre></td></tr></table></figure><p><strong>2. 声明 SqlSessionFactory 对象</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 声明 mybatis 中提供的 SqlSessionFactoryBean 类，这里类内部会创建 SqlSessionFactory 对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- mybatis 主配置文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>要注意的是这里声明的是 mybatis 中提供的 <code>SqlSessionFactoryBean</code>，并不是直接声明 SqlSessionFactory，但是声明这个类之后，在内部会创建 <strong>SqlSessionFactory</strong> 对象。</li><li>声明需要提供两个参数：（1）之前声明的数据源，（2）mybatis 的主配置文件</li></ul><p><strong>3. 声明 dao 接口</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定 sqlSessionFactory 对象--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 指定 dao 接口所在的包名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cn.yechen.dao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>这里声明的不是一个个单独的 dao，而是 mybatis 提供的 <code>MapperScannerConfigurer</code></p></li><li><p>MapperScannerConfigurer 会扫描指定 dao 包中的所有接口，内部会创建 SqlSession 对象，调用 getMapper 方法为每个 dao 接口都生成代理对象，创建好的代理对象会放到 Spring 的容器中，<strong>通过 dao 接口名称首字母小写获取。</strong></p></li><li><p>声明需要提供两个参数：（1）之前声明的 SqlSessionFactory 对象，（2） dao 接口所在的包名</p></li></ul><p><strong>4. 声明 service 对象</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  service --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;studentService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.service.impl.StudentServiceImpl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;studentDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;studentDao&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们在 StudentServiceImpl 类中设置了一个 StudentDao 的属性，并设置了 set 方法，在这里声明的时候就可以将之前声明的 dao 注入进去。</p><h4 id="第六步测试：测试功能"><a href="#第六步测试：测试功能" class="headerlink" title="第六步测试：测试功能"></a>第六步测试：测试功能</h4><p><strong>先来看看在 Spring 容器中创建了那些对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testEnvironment</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    String[] names = context.getBeanDefinitionNames();<br>    <span class="hljs-keyword">for</span> (String name : names) &#123;<br>        System.out.println(<span class="hljs-string">&quot;Spring中取出对象名：&quot;</span> + name + <span class="hljs-string">&quot;，对象为：&quot;</span> + context.getBean(name).getClass().getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 一部分输出内容</span><br>Spring中取出对象名：dataSource，对象为：com.alibaba.druid.pool.DruidDataSource<br>Spring中取出对象名：sqlSessionFactory，对象为：org.apache.ibatis.session.defaults.DefaultSqlSessionFactory<br>Spring中取出对象名：org.mybatis.spring.mapper.MapperScannerConfigurer#<span class="hljs-number">0</span>，对象为：org.mybatis.spring.mapper.MapperScannerConfigurer<br>Spring中取出对象名：studentService，对象为：cn.yechen.service.impl.StudentServiceImpl<br>Spring中取出对象名：studentDao，对象为：com.sun.proxy.$Proxy11<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210713/image.6j7mhz49ui00.png" alt="image"></p><p><strong>测试添加操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    <span class="hljs-comment">// 从容器中获取 service 对象</span><br>    StudentService studentService = context.getBean(<span class="hljs-string">&quot;studentService&quot;</span>, StudentService.class);<br>    Student student = <span class="hljs-keyword">new</span> Student();<br>    student.setId(UUIDUtil.getUUID());<br>    student.setName(<span class="hljs-string">&quot;yechen&quot;</span>);<br>    student.setEmail(<span class="hljs-string">&quot;yechen@qq.com&quot;</span>);<br>    student.setAge(<span class="hljs-number">25</span>);<br>    <span class="hljs-comment">// Spring 和 mybatis 整合后，事务是自动提交的，无序执行 sqlSession.commit()</span><br>    <span class="hljs-keyword">boolean</span> res = studentService.addStudent(student);<br>    System.out.println(res);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210713/image.2pr7uicsnek0.png" alt="image"></p><p>==spring 和 mybatis 整合后，事务是自动提交的，无需执行 sqlSession.commit()==</p><p><strong>测试查询操作</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelect</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    <span class="hljs-comment">// 从容器中获取 service 对象</span><br>    StudentService studentService = context.getBean(<span class="hljs-string">&quot;studentService&quot;</span>, StudentService.class);<br>    List&lt;Student&gt; studentList = studentService.getStudentList();<br>    System.out.println(<span class="hljs-string">&quot;--------------------------------------------输出--------------------------------------------&quot;</span>);<br>    <span class="hljs-keyword">for</span> (Student student : studentList) &#123;<br>        System.out.println(student);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210713/image.fnx3hudv874.png" alt="image"></p><h2 id="9-Spring-事务"><a href="#9-Spring-事务" class="headerlink" title="9. Spring 事务"></a>9. Spring 事务</h2><h3 id="9-1-事务概念"><a href="#9-1-事务概念" class="headerlink" title="9.1 事务概念"></a>9.1 事务概念</h3><p>理解事务之前，先讲一个你日常生活中最常干的事：<strong>取钱</strong>。 </p><p>比如你去ATM机取1000块钱，大体有两个步骤：首先输入密码金额，银行卡扣掉1000元钱；然后ATM出1000元钱。这两个步骤必须是要么都执行要么都不执行。如果银行卡扣除了1000块但是ATM出钱失败的话，你将会损失1000元；如果银行卡扣钱失败但是ATM却出了1000块，那么银行将损失1000元。所以，如果一个步骤成功另一个步骤失败对双方都不是好事，如果不管哪一个步骤失败了以后，整个取钱过程都能回滚，也就是完全取消所有操作的话，这对双方都是极好的。 </p><p>事务就是用来解决类似问题的。</p><p><strong>事务是一系列的动作，它们综合在一起才是一个完整的工作单元，这些动作必须全部完成，如果有一个失败的话，那么事务就会回滚到最开始的状态，仿佛什么都没发生过一样。</strong> </p><p>在企业级应用程序开发中，事务管理必不可少的技术，用来确保数据的完整性和一致性。 </p><p><strong>事务有四个特性（ACID）</strong>：</p><ul><li>原子性（Atomicity）：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。</li><li>一致性（Consistency）：一旦事务完成（不管成功还是失败），系统必须确保它所建模的业务处于一致的状态，而不会是部分完成部分失败。在现实中的数据不应该被破坏。</li><li>隔离性（Isolation）：可能有许多事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。</li><li>持久性（Durability）：一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响，这样就能从任何系统崩溃中恢复过来。通常情况下，事务的结果被写到持久化存储器中。</li></ul><p><strong>关于事务之间的隔离性</strong>：</p><ul><li>第一级别：读未提交（read uncommitted），对方执行了 DML 语句，但是事务还没有提交，我们当前事务就可以读到对方未提交的数据，<strong>会存在脏读现象（Dirty Read）</strong>。</li><li>第二级别：读已提交（read committed），对方执行了 DML 语句，只有在事务提交之后，我们当前事务才可以读取到对方已提交的数据，<strong>但是（相对于当前事务开启时的数据）不可重复读</strong>。</li><li>第三级别：可重复读（repeatable read），对方执行了 DML 语句，即使已经提交了事务，我们当前事务也不能读取到最新数据。<strong>可重复读取之前的数据，但是读取到的数据是幻想</strong>（可以理解为事务开启时，对之前的表做了一份备份，之后的操作是对备份数据进行操作，不受对方事务是否提交修改数据的影响）。</li><li>第四级别：序列化读/串行化读（serializable），解决了之前所有的问题，效率低，需要事务排队（事务只能一个一个执行）。</li></ul><p>可以<a href="https://www.cnblogs.com/balfish/p/8298296.html#_label0">参考文章</a></p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210714/679616-20180116184232756-1519061918.5xyus5qej640.png" alt="679616-20180116184232756-1519061918"></p><h3 id="9-2-Spring-事务管理器"><a href="#9-2-Spring-事务管理器" class="headerlink" title="9.2 Spring 事务管理器"></a>9.2 Spring 事务管理器</h3><p>Spring 并不直接管理事务，而是提供了多种事务管理器，他们将事务管理的职责委托给 MyBatis 或 Hibernate 等持久化机制所提供的相关平台框架的事务来实现。</p><p>Spring 事务管理器的接口是 <code>org.springframework.transaction.PlatformTransactionManager</code>，通过这个接口，Spring为各个平台如JDBC、Hibernate等都提供了对应的事务管理器，但是具体的实现就是各个平台自己的事情了。</p><p>此接口的内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">Public interface <span class="hljs-title">PlatformTransactionManager</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-comment">// 由 TransactionDefinition 得到 TransactionStatus 对象</span><br>    <span class="hljs-function">TransactionStatus <span class="hljs-title">getTransaction</span><span class="hljs-params">(TransactionDefinition definition)</span> <span class="hljs-keyword">throws</span> TransactionException</span>; <br>    <span class="hljs-comment">// 提交</span><br>    <span class="hljs-function">Void <span class="hljs-title">commit</span><span class="hljs-params">(TransactionStatus status)</span> <span class="hljs-keyword">throws</span> TransactionException</span>;  <br>    <span class="hljs-comment">// 回滚</span><br>    <span class="hljs-function">Void <span class="hljs-title">rollback</span><span class="hljs-params">(TransactionStatus status)</span> <span class="hljs-keyword">throws</span> TransactionException</span>;  <br>&#125; <br></code></pre></td></tr></table></figure><p>从这里可知具体的事务管理机制对 Spring 来说是透明的，它并不关心那些，那些是对应各个平台需要关心的，所以<strong>Spring 事务管理的一个优点就是为不同的事务 API 提供一致的编程模型</strong>，如 JDBC、MyBatis，Hibernate、JPA。下面分别介绍各个平台框架实现事务管理的机制。</p><ul><li><code>DataSourceTransactionManager</code> ：位于 <code>org.springframework.jdbc.datasource</code> 包中，数据源事务管理器，提供对单个 javax.sql.DataSource 事务管理，用于 <strong>Spring JDBC 抽象框架、MyBatis 框架</strong>的事务管理；</li><li><code>HibernateTransactionManager</code> ：位于 <code>org.springframework.orm.hibernate3</code> 包中，提供对单个<code>org.hibernate.SessionFactory</code> 事务支持，用于集成 <strong>Hibernate 框架</strong>时的事务管理。</li><li><code>JpaTransactionManager</code> ：位于 <code>org.springframework.orm.jpa</code> 包中，提供对单个<code>javax.persistence.EntityManagerFactory</code> 事务支持，用于集成 <strong>JPA 实现框架</strong>时的事务管理；</li></ul><p>具体使用时，我们需要告诉 Spring 我们使用的是那种数据库的访问技术，我们需要在 Spring 的配置文件中声明数据库访问技术对应的事务管理器实现类。</p><p>例如，要使用 MyBatis 访问数据库，则在 xml 配置文件中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这里注入的属性就是 MyBatis 连接数据库需要的数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="9-3-事务基本属性的定义"><a href="#9-3-事务基本属性的定义" class="headerlink" title="9.3 事务基本属性的定义"></a>9.3 事务基本属性的定义</h3><p>上面讲到的事务管理器接口 PlatformTransactionManager 通过 getTransaction(TransactionDefinition definition) 方法来得到事务，这个方法里面的参数是 <code>TransactionDefinition</code> 类，这个类就定义了一些基本的事务属性。</p><p>那么什么是事务属性呢？事务属性可以理解成事务的一些基本配置，描述了事务策略如何应用到方法上。事务属性包含了5个方面，如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210714/20160325003448793.lhjrsuskmts.png" alt="20160325003448793"></p><p>而 TransactionDefinition 接口内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TransactionDefinition</span> </span>&#123;<br>    <span class="hljs-comment">// 七个事务传播行为</span><br>    <span class="hljs-keyword">int</span> PROPAGATION_REQUIRED = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> PROPAGATION_SUPPORTS = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> PROPAGATION_MANDATORY = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">int</span> PROPAGATION_REQUIRES_NEW = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">int</span> PROPAGATION_NOT_SUPPORTED = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">int</span> PROPAGATION_NEVER = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">int</span> PROPAGATION_NESTED = <span class="hljs-number">6</span>;<br>    <br>    <span class="hljs-comment">// 事务的隔离级别</span><br>    <span class="hljs-keyword">int</span> ISOLATION_DEFAULT = -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> ISOLATION_READ_UNCOMMITTED = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> ISOLATION_READ_COMMITTED = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">int</span> ISOLATION_REPEATABLE_READ = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">int</span> ISOLATION_SERIALIZABLE = <span class="hljs-number">8</span>;<br>    <br>    <span class="hljs-comment">// 事务超时时间</span><br>    <span class="hljs-keyword">int</span> TIMEOUT_DEFAULT = -<span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 返回事务的传播行为</span><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPropagationBehavior</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回事务的隔离级别，事务管理器根据它来控制另外一个事务可以看到本事务内的哪些数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getIsolationLevel</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回事务必须在多少秒内完成</span><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getTimeout</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 事务是否只读，事务管理器能够根据这个返回值进行优化，确保事务是只读的</span><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isReadOnly</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-function"><span class="hljs-keyword">default</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> TransactionDefinition <span class="hljs-title">withDefaults</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> StaticTransactionDefinition.INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9-3-1-事务的传播行为"><a href="#9-3-1-事务的传播行为" class="headerlink" title="9.3.1 事务的传播行为"></a>9.3.1 事务的传播行为</h4><p>事务的第一个方面是传播行为（propagation behavior）。当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。</p><ul><li><strong>PROPAGATION_REQUIRED</strong>：指定的方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，会启动一个新的事务。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210714/image.3vmb37okvy40.png" alt="image"></p><ul><li><strong>PROPAGATION_SUPPORTS</strong>：指定的方法支持运行在当前事务中，但若当前没有事务，也可以以无事务方式运行。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210714/image.1xtpbu199io0.png" alt="image"></p><ul><li><strong>PROPAGATION_REQUIRES_NEW</strong>：指定方法的运行总是新建一个事务，若当前存在事务，就将当前事务挂起，直到新事务执行完毕。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210714/image.1s8fybnyki5c.png" alt="image"></p><ul><li>PROPAGATION_MANDATORY：指定的方法必须在事务中运行，如果当前事务不存在，则会抛出一个异常。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210714/image.19zoryodm0ps.png" alt="image"></p><ul><li>PROPAGATION_NOT_SUPPORTED：指定的方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将被挂起。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210714/image.32zl4jkav480.png" alt="image"></p><ul><li>PROPAGATION_NEVER：指定的方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210714/image.6u11sybs54w0.png" alt="image"></p><ul><li>PROPAGATION_NESTED：指定方法的运行总是新建一个事务，若当前存在事务，就将当前事务挂起，直到新事务执行完毕，两个事务是嵌套关系，外层事务的回滚可以引起内层事务的回滚，而内层事务的异常并不会导致外层事务的回滚。</li></ul><h4 id="9-3-2-事务的隔离级别"><a href="#9-3-2-事务的隔离级别" class="headerlink" title="9.3.2 事务的隔离级别"></a>9.3.2 事务的隔离级别</h4><p>[详见](###9.1 事务概念)</p><h4 id="9-3-3-事务超时"><a href="#9-3-3-事务超时" class="headerlink" title="9.3.3 事务超时"></a>9.3.3 事务超时</h4><p>为了使应用程序很好地运行，事务不能运行太长的时间。因为事务可能涉及对后端数据库的锁定，所以长时间的事务会不必要的占用数据库资源。事务超时就是事务的一个定时器，在特定时间内事务如果没有执行完毕，那么就会自动回滚，而不是一直等待其结束。</p><h3 id="9-4-Spring-框架中提供的事务处理方案"><a href="#9-4-Spring-框架中提供的事务处理方案" class="headerlink" title="9.4 Spring 框架中提供的事务处理方案"></a>9.4 Spring 框架中提供的事务处理方案</h3><h4 id="9-4-1-使用-Transactional-注解"><a href="#9-4-1-使用-Transactional-注解" class="headerlink" title="9.4.1 使用 @Transactional 注解"></a>9.4.1 使用 @Transactional 注解</h4><p>该方法适用于<strong>中小项目</strong>。因为使用的是注解，需要一个一个加，当需要的事务的方法很多是，容易出错和遗漏。</p><p>Spring 框架使用自己的 AOP 解决方案实现给业务方法增加事务的功能， 使用 @Transactional 注解增加事务。</p><p>@Transactional 注解是 Spring 框架自己注解，需要放在 public 方法的上面，表示当前方法具有事务。可以给注解的属性赋值，表示具体的隔离级别，传播行为，异常信息等等。<strong>默认传播行为（propagation）是：REQUIRED；默认隔离级别（isolation）是：EFAULT；默认回滚事务的异常类型（rollbackFor）是：运行时异常（RunTimeException.class）</strong></p><p>关于 <code>rollbackFor</code> 属性：</p><ul><li>当使用的是默认值，只要是抛出的异常时运行时异常，事务就一定会回滚。</li><li>当给属性设置了值，只要抛出的异常存在于列表中，不管是不是运行异常，都会回滚事务。</li></ul><p>实现步骤：</p><ol><li>声明事务管理器对象，在 Spring 配置文件中声明事务管理器。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>开启事务注解驱动，告诉 Spring 要使用注解管理事务，创建代理对象（注意引用的限制文件名称）</li></ol><p>需要先引入</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210714/image.5x8rfojz8v80.png" alt="image"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 开启事务注解驱动，告诉 Spring 要使用注解管理事务，创建代理对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>在需要添加事务的 public 方法上添加 @Transactional 注解，可以自定义属性，也可以使用默认值。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSome</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 业务代码</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9-4-2-使用-AspectJ-框架-AOP-功能"><a href="#9-4-2-使用-AspectJ-框架-AOP-功能" class="headerlink" title="9.4.2 使用 AspectJ 框架 AOP 功能"></a>9.4.2 使用 AspectJ 框架 AOP 功能</h4><p>适合<strong>大型项目</strong>，有很多的类，方法，需要大量的配置事务，使用 AspectJ 框架功能，在 Spring 配置文件中声明类，方法需要的事务。</p><p>这种方式业务方法和事务配置完全分离，都是在 xml 配置文件中实现的。</p><p>实现步骤：</p><ol><li>要使用的是aspectj框架，需要加入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>声明事务管理器对象</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>声明方法需要的事务类型（配置方法的事务属性【隔离级别，传播行为，超时】）</li></ol><p>需要先引入</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210714/image.5x8rfojz8v80.png" alt="image"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 声明业务方法它的属性 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置事务属性 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 具体事务属性 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;需要添加事务的方法名&quot;</span>  <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;传播行为&quot;</span> <span class="hljs-attr">isolation</span>=<span class="hljs-string">&quot;隔离级别&quot;</span> <span class="hljs-attr">rollback-for</span>=<span class="hljs-string">&quot;回滚异常类型&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br></code></pre></td></tr></table></figure><pre><code>说明：（1）`name` 属性只需要填写需要添加方法的方法名即可，也可以使用 * 来代表多个字符，例如如果是添加操作可以是 `add*`，修改操作可以是 `modify\*`。如：</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;add*&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!-- 添加操作 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;modify*&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!-- 修改操作 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;remove*&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!-- 删除操作 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;query*&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!-- 查询操作 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!-- 所有操作 --&gt;</span><br></code></pre></td></tr></table></figure><pre><code>（2）`propagation`，`isolation`，`rollback-for` 属性都存在默认值，可以不设置，默认值[详见](###9.4.1 使用 @Transactional 注解)。（3）如果需要为 `rollback-for` 属性设置，需要填写异常类的全限定名称，并通过逗号分隔。</code></pre><ol start="4"><li>配置 AOP（使用 xml 的配置文件）：指定哪些哪类要创建代理</li></ol><p>需要先引入</p><p><img src="../../../AppData/Roaming/Typora/typora-user-images/image-20210714210112452.png" alt="image-20210714210112452"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置 AOP --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置切入点表达式，表示所有 service 包及其子包下的所有类中的方法--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;servicePointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* *..service..*(..))&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置增强器：关联 advice 和 pointcut --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;myAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;servicePointcut&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="9-4-Spring-事务简单使用"><a href="#9-4-Spring-事务简单使用" class="headerlink" title="9.4 Spring 事务简单使用"></a>9.4 Spring 事务简单使用</h3><h4 id="9-4-1-环境准备"><a href="#9-4-1-环境准备" class="headerlink" title="9.4.1 环境准备"></a>9.4.1 环境准备</h4><p><strong>举例：购买商品 trans_sale 项目</strong></p><p>本例要实现购买商品，模拟用户下订单，向订单表添加销售记录，从商品表减少库存。</p><p><strong>Step0：创建数据库表</strong></p><p>销售记录表 tbl_sale</p><p><img src="../../../AppData/Roaming/Typora/typora-user-images/image-20210714143734294.png" alt="image-20210714143734294"></p><p>商品表 tbl_goods</p><p><img src="../../../AppData/Roaming/Typora/typora-user-images/image-20210714143652528.png" alt="image-20210714143652528"></p><p>tbl_goods 中的数据</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210714/image.6ux8x7l95m40.png" alt="image"></p><p><strong>Step1：maven 项目 pom.xml 依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 需要添加的依赖 --&gt;</span><br><span class="hljs-comment">&lt;!-- 单元测试 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Spring 核心 ioc --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Spring 事务 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-tx<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- mybatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- mybatis 和 Spring 集成的依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- mysql 驱动 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 阿里的数据库连接池 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Step2：创建实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 商品类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Goods</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer amount;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">float</span> price;<br>&#125;<br><br><span class="hljs-comment">// 销售记录表</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sale</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String goodsId;<br>    <span class="hljs-keyword">private</span> Integer num;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Step3：定义 dao 接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">GoodsDao</span> </span>&#123;<br>    <span class="hljs-comment">// 更新商品数量</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateGoodsAmount</span><span class="hljs-params">(Goods goods)</span></span>;<br><br>    <span class="hljs-comment">// 通过 id 查详情</span><br>    <span class="hljs-function">Goods <span class="hljs-title">selectGoodsById</span><span class="hljs-params">(String id)</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SaleDao</span> </span>&#123;<br>    <span class="hljs-comment">// 插入销售记录</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insertSale</span><span class="hljs-params">(Sale sale)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Step4：定义 dao 接口对应的 mapper 映射文件</strong></p><p>GoodsDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;cn.yechen.dao.GoodsDao&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateGoodsAmount&quot;</span> &gt;</span><br>        update tbl_goods<br>        set amount=amount-#&#123;amount&#125;<br>        where id =#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectGoodsById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.yechen.domain.Goods&quot;</span>&gt;</span><br>        select id,name,amount,price<br>        from tbl_goods<br>        where id=#&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>SaleDao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;cn.yechen.dao.SaleDao&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertSale&quot;</span>&gt;</span><br>        insert into tbl_sale (id, goodsId, num)<br>        values (#&#123;id&#125;, #&#123;goodsId&#125;, #&#123;num&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Step5：定义异常类</strong></p><p>继承于 RunTimeException，在业务出错是抛出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyException</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Step6：定义 serivce 接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">BuyGoodsService</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 购买商品</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> goodsId 商品 id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> num 购买数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">buyGoods</span><span class="hljs-params">(String goodsId, Integer num)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Step7：定义 service 的实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BuyGoodsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BuyGoodsService</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> SaleDao saleDao;<br>    <span class="hljs-keyword">private</span> GoodsDao goodsDao;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSaleDao</span><span class="hljs-params">(SaleDao saleDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.saleDao = saleDao;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGoodsDao</span><span class="hljs-params">(GoodsDao goodsDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.goodsDao = goodsDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">buyGoods</span><span class="hljs-params">(String goodsId, Integer num)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;===销售方法开始===&quot;</span>);<br>        <span class="hljs-comment">// 记录销售信息，向销售表添加记录</span><br>        Sale sale = <span class="hljs-keyword">new</span> Sale();<br>        sale.setId(UUIDUtil.getUUID());<br>        sale.setGoodsId(goodsId);<br>        sale.setNum(num);<br>        <span class="hljs-keyword">int</span> i = saleDao.insertSale(sale);<br>        <span class="hljs-keyword">if</span> (i != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyException(<span class="hljs-string">&quot;销售记录添加失败&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 更新库存，修改商品表</span><br>        Goods goods = goodsDao.selectGoodsById(goodsId);<br>        <span class="hljs-keyword">if</span> (goods == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyException(<span class="hljs-string">&quot;商品编号为【&quot;</span>+goodsId+<span class="hljs-string">&quot;】的商品不存在&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (goods.getAmount() &lt; num) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyException(<span class="hljs-string">&quot;商品编号为【&quot;</span>+goodsId+<span class="hljs-string">&quot;】的商品库存不足&quot;</span>);<br>            &#125;<br>        &#125;<br>        Goods g = <span class="hljs-keyword">new</span> Goods();<br>        g.setId(goodsId);<br>        g.setAmount(num);<br>        <span class="hljs-comment">// 更新库存</span><br>        <span class="hljs-keyword">int</span> i1 = goodsDao.updateGoodsAmount(g);<br>        <span class="hljs-keyword">if</span> (i1 != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyException(<span class="hljs-string">&quot;更新库存失败&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;===销售方法结束===&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Step8：编写 Spring 配置文件中的内容</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 数据库配置信息 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:db.properties&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 声明数据源 DataSource，作用是连接数据库 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;init&quot;</span> <span class="hljs-attr">destroy-method</span>=<span class="hljs-string">&quot;close&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxActive&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.maxActive&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 声明 SqlSessionFactory--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- mybatis 主配置文件 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 声明 dao 对象 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定 sqlSessionFactory 对象--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 指定 dao 接口所在的包名 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;basePackage&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;cn.yechen.dao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 声明 service --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;buyGoodsService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.yechen.service.impl.BuyGoodsServiceImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;goodsDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;goodsDao&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;saleDao&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;saleDao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 声明事务管理器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Step9：测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBuyGoods</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    BuyGoodsService buyGoodsService = context.getBean(<span class="hljs-string">&quot;buyGoodsService&quot;</span>, BuyGoodsService.class);<br>    <span class="hljs-keyword">boolean</span> result = buyGoodsService.buyGoods(<span class="hljs-string">&quot;4eb9406dcd2d43ca90ee1d61dfee59e9&quot;</span>, <span class="hljs-number">2</span>);<br>    System.out.println(<span class="hljs-string">&quot;buyGoodsService = &quot;</span> + buyGoodsService.getClass().getName());<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9-4-2-使用-Transacional-注解"><a href="#9-4-2-使用-Transacional-注解" class="headerlink" title="9.4.2 使用 @Transacional 注解"></a>9.4.2 使用 @Transacional 注解</h4><p>在 Spring 配置文件中开启事务注解驱动，告诉 Spring 要使用注解管理事务，创建代理对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>在 BuyGoodsService 类中的 buygoods() 方法上加上 @Transactional 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BuyGoodsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">BuyGoodsService</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> SaleDao saleDao;<br>    <span class="hljs-keyword">private</span> GoodsDao goodsDao;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSaleDao</span><span class="hljs-params">(SaleDao saleDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.saleDao = saleDao;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setGoodsDao</span><span class="hljs-params">(GoodsDao goodsDao)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.goodsDao = goodsDao;<br>    &#125;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">buyGoods</span><span class="hljs-params">(String goodsId, Integer num)</span> </span>&#123;<br>     <span class="hljs-comment">// 业务功能</span><br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><p>正常使用：数据都正常添加和和修改</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210714/image.2819pjar5xjw.png" alt="image"></p><p>主动产生异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBuyGoods</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    BuyGoodsService buyGoodsService = context.getBean(<span class="hljs-string">&quot;buyGoodsService&quot;</span>, BuyGoodsService.class);<br>    <span class="hljs-comment">// 库存不足</span><br>    <span class="hljs-keyword">boolean</span> result = buyGoodsService.buyGoods(<span class="hljs-string">&quot;4eb9406dcd2d43ca90ee1d61dfee59e9&quot;</span>, <span class="hljs-number">20</span>);<br>    System.out.println(<span class="hljs-string">&quot;buyGoodsService = &quot;</span> + buyGoodsService.getClass().getName());<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><p>程序抛出自定义异常，回滚事务，没有数据添加和修改</p><p><img src="../../../AppData/Roaming/Typora/typora-user-images/image-20210714200429778.png" alt="image-20210714200429778"></p><h4 id="9-4-3-使用-AspectJ-框架-AOP-功能"><a href="#9-4-3-使用-AspectJ-框架-AOP-功能" class="headerlink" title="9.4.3 使用 AspectJ 框架 AOP 功能"></a>9.4.3 使用 AspectJ 框架 AOP 功能</h4><p>先在 pom.xml 文件中添加 AspectJ 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- AspectJ 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-aspects<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在 Spring 配置文件配置 AspectJ，之后就可以测试了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!-- 声明事务管理器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 数据源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 声明业务方法它的属性 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置事务属性 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 具体事务属性 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;buyGoods&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 配置 AOP --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置切入点表达式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;servicePointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* *..service..*(..))&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置增强器：关联 advice 和 pointcut --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;myAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;servicePointcut&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBuyGoods</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    BuyGoodsService buyGoodsService = context.getBean(<span class="hljs-string">&quot;buyGoodsService&quot;</span>, BuyGoodsService.class);<br>    <span class="hljs-keyword">boolean</span> result = buyGoodsService.buyGoods(<span class="hljs-string">&quot;e20e4da16037469aabfb40d8e58afa5a&quot;</span>, <span class="hljs-number">10</span>);<br>    System.out.println(<span class="hljs-string">&quot;buyGoodsService = &quot;</span> + buyGoodsService.getClass().getName());<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><p>正常使用：数据都正常添加和和修改</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210714/image.4nloyguf7wg0.png" alt="image"></p><p>主动产生异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBuyGoods</span><span class="hljs-params">()</span> </span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    BuyGoodsService buyGoodsService = context.getBean(<span class="hljs-string">&quot;buyGoodsService&quot;</span>, BuyGoodsService.class);<br>    <span class="hljs-comment">// 提供一个不存在的 id</span><br>    <span class="hljs-keyword">boolean</span> result = buyGoodsService.buyGoods(<span class="hljs-string">&quot;e20e4da16037469aabfb40d8e58afa5b&quot;</span>, <span class="hljs-number">10</span>);<br>    System.out.println(<span class="hljs-string">&quot;buyGoodsService = &quot;</span> + buyGoodsService.getClass().getName());<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><p>程序抛出自定义异常，回滚事务，没有数据添加和修改</p><p><img src="https://cdn.jsdelivr.net/gh/yechen-ops/image-hosting@master/20210714/image.43glr7vbqu80.png" alt="image"></p><h2 id="10-Spring-和-Web"><a href="#10-Spring-和-Web" class="headerlink" title="10. Spring 和 Web"></a>10. Spring 和 Web</h2><p>在之前的普通 Java 项目中，我们都是在普通方法里面通过 <code>new ClassPathXmlApplicationContext(&quot;配置文件路径&quot;)</code> 的方式创建 Spring 容器的。在 web 项目中，就是在 Controller 中创建容器并从容器中获取需要的对象。</p><p>Controller 对象是由 Tomcat 创建的，每次调用控制器的时候都会创建一个新的容器对象，这样是很耗费资源的，并且没有必要。</p><p>所以我们就会想到了使用<strong>监听器</strong>，在 Tomcat 启动的时候<strong>创建一次容器对象</strong>，然后将容器对象存放到<strong>上下文域对象（ServlerContext）</strong>中，这样之后需要使用容器，就从 application 中获取就可以了。</p><p>简单使用：</p><p><strong>Step0：在 pom.xml 文件中添加 spring-web 依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring Web --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Step1：在 web.xml 文件中注册监听器</strong></p><p>这个监听器来自 <code>org.springframework.web.context</code> 包下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 注册监听器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">listener</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="hljs-tag">&lt;/<span class="hljs-name">listener-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">listener</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Step2：修改监听器读取 Spring 配置文件的默认路径</strong></p><p>监听器对象被创建后，会读取 Spring 的配置文件来创建容器对象，但是默认路径是 <code>/WEB-INF/applicationContext.xml</code>，但我们习惯将配置文件存放在 Resource 目录下，所以我们需要修改配置文件的默认路径，同样是在 web.xml 文件中设置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 修改 Spring 默认配置文件路径 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">context-param</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>Step3：在控制器中通过上下文对象获取容器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">WebApplicationContext context = (WebApplicationContext) request.getServletContext().getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);<br></code></pre></td></tr></table></figure><ul><li><code>WebApplicationContext</code> 对象和 <code>ApplicationContext</code> 相似，都是容器对象，只是前者使用在 web 项目中，而后者使用在普通项目中。</li><li><code>WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE</code>，是监听器中向上下文域对象中存容器对象的时候的 key，这里我们就可以通过 key 来获取容器对象。</li></ul><p>当然 Spring 中有一个工具类，方法中传入上下文域对象，就可以获取的容器对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(request.getServletContext());<br></code></pre></td></tr></table></figure><p><strong>这样获取到的容器对象都是同一个了。</strong></p><h2 id="11-Spring-WebFlux"><a href="#11-Spring-WebFlux" class="headerlink" title="11. Spring WebFlux"></a>11. Spring WebFlux</h2>]]></content>
    
    
    <categories>
      
      <category>SSM 框架</category>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM 框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/09/13/hello-world/"/>
    <url>/2021/09/13/hello-world/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
